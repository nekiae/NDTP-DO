#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –¢–µ—Ö–Ω–æ–ë–æ—Ç–∞
–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤
"""

# –¶–µ–Ω—ã DeepSeek API (–∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
DEEPSEEK_PRICES = {
    "standard": {  # UTC 00:30-16:30 (–æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è)
        "input_cache_hit": 0.07,
        "input_cache_miss": 0.27,
        "output": 1.10
    },
    "discount": {  # UTC 16:30-00:30 (—Å–∫–∏–¥–∫–∞ 50%)
        "input_cache_hit": 0.035,
        "input_cache_miss": 0.135,
        "output": 0.550
    }
}

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
TOKEN_COMPONENTS = {
    "system_prompt": 355,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    "user_query_simple": 5,  # "–ø—Ä–∏–≤–µ—Ç"
    "user_query_medium": 15,  # "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"
    "user_query_complex": 25,  # "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ —Å–µ–Ω—Ç—è–±—Ä—å—Å–∫—É—é —Å–º–µ–Ω—É"
    
    # RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–∏–º–≤–æ–ª—ã / 4 = —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)
    "rag_context_none": 0,  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    "rag_context_small": 1000 // 4,  # 250 —Ç–æ–∫–µ–Ω–æ–≤ - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "rag_context_medium": 8000 // 4,  # 2000 —Ç–æ–∫–µ–Ω–æ–≤ - —Å—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
    "rag_context_large": 19727 // 4,  # 4932 —Ç–æ–∫–µ–Ω–æ–≤ - —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    
    # –û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
    "response_short": 238 // 4,  # 60 —Ç–æ–∫–µ–Ω–æ–≤ - –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    "response_medium": 800 // 4,  # 200 —Ç–æ–∫–µ–Ω–æ–≤ - —Å—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    "response_long": 1200 // 4,  # 300 —Ç–æ–∫–µ–Ω–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
}

# –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
QUERY_TYPES = {
    "simple": {  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, /start, –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "probability": 0.30,
        "input_tokens": TOKEN_COMPONENTS["system_prompt"] + TOKEN_COMPONENTS["user_query_simple"] + TOKEN_COMPONENTS["rag_context_none"],
        "output_tokens": TOKEN_COMPONENTS["response_short"]
    },
    "medium": {  # –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
        "probability": 0.50,
        "input_tokens": TOKEN_COMPONENTS["system_prompt"] + TOKEN_COMPONENTS["user_query_medium"] + TOKEN_COMPONENTS["rag_context_medium"],
        "output_tokens": TOKEN_COMPONENTS["response_medium"]
    },
    "complex": {  # –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ —Å–º–µ–Ω–∞—Ö, –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "probability": 0.20,
        "input_tokens": TOKEN_COMPONENTS["system_prompt"] + TOKEN_COMPONENTS["user_query_complex"] + TOKEN_COMPONENTS["rag_context_large"],
        "output_tokens": TOKEN_COMPONENTS["response_long"]
    }
}

def calculate_weighted_average():
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å"""
    total_input = 0
    total_output = 0
    
    for query_type, data in QUERY_TYPES.items():
        prob = data["probability"]
        total_input += data["input_tokens"] * prob
        total_output += data["output_tokens"] * prob
    
    return total_input, total_output

def calculate_monthly_cost(requests_per_day, cache_hit_rate=0.3, discount_hours_rate=0.4):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    
    Args:
        requests_per_day: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
        cache_hit_rate: –î–æ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å cache hit (0.0-1.0)
        discount_hours_rate: –î–æ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ª—å–≥–æ—Ç–Ω—ã–µ —á–∞—Å—ã (0.0-1.0)
    """
    
    # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å
    avg_input_tokens, avg_output_tokens = calculate_weighted_average()
    
    # –ú–µ—Å—è—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    monthly_requests = requests_per_day * 30
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ—Å—è—Ü
    total_input_tokens = monthly_requests * avg_input_tokens
    total_output_tokens = monthly_requests * avg_output_tokens
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ input —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ cache hit/miss
    cache_hit_tokens = total_input_tokens * cache_hit_rate
    cache_miss_tokens = total_input_tokens * (1 - cache_hit_rate)
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–æ–±—ã—á–Ω–æ–µ vs —Å–∫–∏–¥–∫–∞)
    standard_rate = 1 - discount_hours_rate
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –æ–±—ã—á–Ω—ã–µ —á–∞—Å—ã
    standard_cost = (
        (cache_hit_tokens * standard_rate / 1_000_000) * DEEPSEEK_PRICES["standard"]["input_cache_hit"] +
        (cache_miss_tokens * standard_rate / 1_000_000) * DEEPSEEK_PRICES["standard"]["input_cache_miss"] +
        (total_output_tokens * standard_rate / 1_000_000) * DEEPSEEK_PRICES["standard"]["output"]
    )
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª—å–≥–æ—Ç–Ω—ã–µ —á–∞—Å—ã
    discount_cost = (
        (cache_hit_tokens * discount_hours_rate / 1_000_000) * DEEPSEEK_PRICES["discount"]["input_cache_hit"] +
        (cache_miss_tokens * discount_hours_rate / 1_000_000) * DEEPSEEK_PRICES["discount"]["input_cache_miss"] +
        (total_output_tokens * discount_hours_rate / 1_000_000) * DEEPSEEK_PRICES["discount"]["output"]
    )
    
    total_cost = standard_cost + discount_cost
    
    return {
        "requests_per_day": requests_per_day,
        "monthly_requests": monthly_requests,
        "avg_input_tokens": avg_input_tokens,
        "avg_output_tokens": avg_output_tokens,
        "total_input_tokens": total_input_tokens,
        "total_output_tokens": total_output_tokens,
        "cache_hit_tokens": cache_hit_tokens,
        "cache_miss_tokens": cache_miss_tokens,
        "standard_cost": standard_cost,
        "discount_cost": discount_cost,
        "total_cost": total_cost,
        "cost_per_request": total_cost / monthly_requests,
        "cache_hit_rate": cache_hit_rate,
        "discount_hours_rate": discount_hours_rate
    }

def print_cost_analysis():
    """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    
    print("ü§ñ –ê–ù–ê–õ–ò–ó –°–¢–û–ò–ú–û–°–¢–ò TECHNO-–ë–û–¢–ê")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
    print("\nüìä –ö–û–ú–ü–û–ù–ï–ù–¢–´ –¢–û–ö–ï–ù–û–í (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö):")
    print(f"‚îú‚îÄ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {TOKEN_COMPONENTS['system_prompt']} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚îú‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {TOKEN_COMPONENTS['user_query_simple']}-{TOKEN_COMPONENTS['user_query_complex']} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚îú‚îÄ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç: 0-{TOKEN_COMPONENTS['rag_context_large']} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚îî‚îÄ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {TOKEN_COMPONENTS['response_short']}-{TOKEN_COMPONENTS['response_long']} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    avg_input, avg_output = calculate_weighted_average()
    print(f"\n‚öñÔ∏è –°–†–ï–î–ù–ï–í–ó–í–ï–®–ï–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
    print(f"‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π input: {avg_input:.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π output: {avg_output:.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚îî‚îÄ –í—Å–µ–≥–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_input + avg_output:.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    scenarios = [
        ("üêå –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", 10),
        ("üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞", 50), 
        ("üöÄ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", 150),
        ("üí• –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", 500),
        ("üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", 1000)
    ]
    
    print(f"\nüí∞ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ü–û –°–¶–ï–ù–ê–†–ò–Ø–ú:")
    print("-" * 60)
    
    for scenario_name, requests_per_day in scenarios:
        print(f"\n{scenario_name} ({requests_per_day} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)")
        
        # –†–∞—Å—á–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_scenarios = [
            ("–ü–ª–æ—Ö–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", 0.1, 0.3),
            ("–°—Ä–µ–¥–Ω–µ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", 0.3, 0.4), 
            ("–•–æ—Ä–æ—à–µ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", 0.6, 0.5)
        ]
        
        for cache_name, cache_hit_rate, discount_rate in cache_scenarios:
            result = calculate_monthly_cost(requests_per_day, cache_hit_rate, discount_rate)
            
            print(f"  {cache_name}:")
            print(f"    üíµ –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${result['total_cost']:.2f}")
            print(f"    üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∑–∞–ø—Ä–æ—Å: ${result['cost_per_request']:.4f}")
            print(f"    üìä Cache Hit Rate: {cache_hit_rate*100:.0f}%")
            print(f"    üïí –õ—å–≥–æ—Ç–Ω—ã–µ —á–∞—Å—ã: {discount_rate*100:.0f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó (–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞)")
    print("-" * 60)
    
    result = calculate_monthly_cost(50, 0.3, 0.4)
    
    print(f"üìà –û–±—ä–µ–º—ã:")
    print(f"‚îú‚îÄ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü: {result['monthly_requests']:,}")
    print(f"‚îú‚îÄ Input —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ—Å—è—Ü: {result['total_input_tokens']:,}")
    print(f"‚îú‚îÄ Output —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ—Å—è—Ü: {result['total_output_tokens']:,}")
    print(f"‚îî‚îÄ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ—Å—è—Ü: {result['total_input_tokens'] + result['total_output_tokens']:,}")
    
    print(f"\nüí∞ –†–∞–∑–±–∏–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
    print(f"‚îú‚îÄ –û–±—ã—á–Ω—ã–µ —á–∞—Å—ã: ${result['standard_cost']:.2f}")
    print(f"‚îú‚îÄ –õ—å–≥–æ—Ç–Ω—ã–µ —á–∞—Å—ã: ${result['discount_cost']:.2f}")
    print(f"‚îî‚îÄ –ò–¢–û–ì–û: ${result['total_cost']:.2f}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("‚îú‚îÄ üïí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—å–≥–æ—Ç–Ω—ã–µ —á–∞—Å—ã (16:30-00:30 UTC)")
    print("‚îú‚îÄ üì¶ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚îú‚îÄ ‚úÇÔ∏è –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Ä RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚îú‚îÄ üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    print("‚îî‚îÄ üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    print_cost_analysis() 