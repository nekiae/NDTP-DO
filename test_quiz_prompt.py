#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∫–≤–∏–∑–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ò–ò –Ω–µ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ 5-–≥–æ –≤–æ–ø—Ä–æ—Å–∞
"""
import asyncio
import logging
from unittest.mock import Mock, AsyncMock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def test_quiz_prompt_rules():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–º–ø—Ç–∞ –∫–≤–∏–∑–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞ –∫–≤–∏–∑–∞...")
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç
        with open('quiz_system_prompt.txt', 'r', encoding='utf-8') as f:
            prompt = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        critical_rules = [
            "–ù–ò–ö–û–ì–î–ê –Ω–µ –¥–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ 5-–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            "–ù–ò–ö–û–ì–î–ê –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏—á–Ω–æ—Å—Ç—å –¥–æ 5-–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            "–¢–æ–ª—å–∫–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–ª—É—à–∞–π –æ—Ç–≤–µ—Ç—ã",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–∞–≤–∞–π –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ 5-–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            "–ù–ï –î–ê–í–ê–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–û 5-–ì–û –í–û–ü–†–û–°–ê"
        ]
        
        missing_rules = []
        for rule in critical_rules:
            if rule not in prompt:
                missing_rules.append(rule)
        
        if missing_rules:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:")
            for rule in missing_rules:
                print(f"   - {rule}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
        question_structure = [
            "Q1: –ó–∞–¥–∞–π –ø–µ—Ä–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            "Q2: –ó–∞–¥–∞–π –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ Q1",
            "Q3: –ó–∞–¥–∞–π —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ Q1+Q2",
            "Q4: –ó–∞–¥–∞–π —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ Q1+Q2+Q3",
            "Q5: –ó–∞–¥–∞–π –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ Q1+Q2+Q3+Q4",
            "–ü–û–°–õ–ï Q5: –î–∞–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        ]
        
        missing_structure = []
        for structure in question_structure:
            if structure not in prompt:
                missing_structure.append(structure)
        
        if missing_structure:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:")
            for structure in missing_structure:
                print(f"   - {structure}")
            return False
        else:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if "–§–û–†–ú–ê–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û –ü–û–°–õ–ï 5-–ì–û –í–û–ü–†–û–°–ê):" in prompt:
            print("‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        else:
            print("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            return False
        
        print("üéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return False

async def test_quiz_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–≤–∏–∑-–º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∏–º–ø–æ—Ä—Ç –∫–≤–∏–∑-–º–æ–¥—É–ª—è...")
    
    try:
        from quiz_mod import register_quiz_handlers, get_quiz_stats, quiz_start_callback
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–≤–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–≤–∏–∑–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫–≤–∏–∑–∞...")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    import_success = await test_quiz_import()
    
    # –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–º–ø—Ç–∞
    prompt_success = await test_quiz_prompt_rules()
    
    if import_success and prompt_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ü—Ä–æ–º–ø—Ç –∫–≤–∏–∑–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    asyncio.run(main()) 