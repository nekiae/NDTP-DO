import asyncio
import logging
import os

# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
import re
import time
from datetime import datetime
from typing import Optional

import aiohttp
from aiogram import BaseMiddleware, Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from dotenv import load_dotenv
from tenacity import retry, stop_after_attempt, wait_exponential

from operator_handler import OperatorState, UserStatus, operator_handler
from rag_system import RAGModes, rag_system
from schedule_parser import (
    force_update_schedule,
    get_schedule_context,
    get_schedule_context_async,
    schedule_updater_loop,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–í–ê–ñ–ù–û: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º –º–æ–¥—É–ª–µ–π)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%H:%M:%S",
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
logging.getLogger("aiogram.dispatcher").setLevel(logging.WARNING)
logging.getLogger("aiogram.bot").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç dateparser
try:
    import dateparser

    DATEPARSER_AVAILABLE = True
    logger.info("‚úÖ dateparser —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    DATEPARSER_AVAILABLE = False
    logger.warning("‚ö†Ô∏è dateparser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback regex")

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    import redis.asyncio as redis

    REDIS_AVAILABLE = True
    logger.info("‚úÖ redis.asyncio —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    REDIS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ª–∏–º–∏—Ç–æ–≤")
    redis = None
except Exception as e:
    REDIS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ redis: {e}")
    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ª–∏–º–∏—Ç–æ–≤")
    redis = None

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π


# –†–æ–ª–∏: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS="id1,id2,...")
ADMIN_IDS_ENV = os.getenv("ADMIN_IDS", "").strip()
ADMIN_IDS = set()
if ADMIN_IDS_ENV:
    for part in ADMIN_IDS_ENV.split(","):
        part = part.strip()
        if not part:
            continue
        try:
            ADMIN_IDS.add(int(part))
        except ValueError:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ ADMIN_IDS: {part}")


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è


# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
try:
    from documents_parser import (
        documents_updater_loop,
        force_update_documents,
        get_documents_context,
        get_documents_context_async,
    )

    DOCUMENTS_PARSER_AVAILABLE = True
    logger.info("üìÑ –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    DOCUMENTS_PARSER_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤
try:
    from lists_parser import (
        get_lists_stats,
        initialize_lists_parser,
        search_name_in_lists,
        update_lists_cache,
    )

    LISTS_PARSER_AVAILABLE = True
    logger.info("üìã –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    LISTS_PARSER_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
try:
    from calendar_module import (
        get_calendar_interface,
        get_notification_settings_interface,
        get_shift_info,
    )

    CALENDAR_AVAILABLE = True
    logger.info("üìÖ –ú–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CALENDAR_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from notification_system import notification_system

    NOTIFICATIONS_AVAILABLE = True
    logger.info("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    NOTIFICATIONS_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –∫–≤–∏–∑ –º–æ–¥—É–ª—è
try:
    from quiz_mod import (
        get_quiz_stats,
        quiz_start,
        quiz_start_callback,
        register_quiz_handlers,
    )

    QUIZ_AVAILABLE = True
    logger.info("üéØ –ö–≤–∏–∑ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ö–≤–∏–∑ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    QUIZ_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
try:
    from brainstorm_mod import (
        get_brainstorm_stats,
        init_brainstorm_llm,
        register_brainstorm_handlers,
        register_brainstorm_menu_handler,
    )

    BRAINSTORM_AVAILABLE = True
    logger.info("üß† –ú–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    BRAINSTORM_AVAILABLE = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ª–µ–Ω–∏–≤–æ)
optimized_rag = None
modern_rag = None
OPTIMIZED_RAG_AVAILABLE = False
MODERN_RAG_AVAILABLE = False

# –§–ª–∞–≥–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º
rag_systems_ready = {"optimized": False, "modern": False}


async def init_optimized_rag():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    global optimized_rag, OPTIMIZED_RAG_AVAILABLE
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã...")
        from optimized_rag_system import RAGModes, get_optimized_rag

        loop = asyncio.get_running_loop()
        optimized_rag = await loop.run_in_executor(
            None, lambda: get_optimized_rag(RAGModes.ECONOMY)
        )

        OPTIMIZED_RAG_AVAILABLE = True
        rag_systems_ready["optimized"] = True
        logger.info(
            f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: {optimized_rag.get_stats()}"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG: {e}")
        OPTIMIZED_RAG_AVAILABLE = False


async def init_modern_rag():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    global modern_rag, MODERN_RAG_AVAILABLE
    try:
        logger.info("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã...")
        from modern_rag_system import ModernRAGSystem, set_global_instance

        loop = asyncio.get_running_loop()

        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def create_and_init_rag():
            rag = ModernRAGSystem()
            rag.load_and_index_knowledge()
            return rag

        modern_rag = await loop.run_in_executor(None, create_and_init_rag)
        set_global_instance(modern_rag)

        MODERN_RAG_AVAILABLE = True
        rag_systems_ready["modern"] = True
        stats = modern_rag.get_stats()
        logger.info(
            f"‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: {stats['total_documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG: {e}")
        MODERN_RAG_AVAILABLE = False


# ========================================
# üîß –£–õ–£–ß–®–ï–ù–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –∏ –ª–∏–º–∏—Ç—ã API
# ========================================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
MONTHS_PATTERNS = {
    r"—è–Ω–≤–∞—Ä\w*": 1,
    r"—Ñ–µ–≤—Ä–∞–ª\w*": 2,
    r"–º–∞—Ä—Ç\w*": 3,
    r"–∞–ø—Ä–µ–ª\w*": 4,
    r"–º–∞[–π—è]\w*": 5,
    r"–∏—é–Ω\w*": 6,
    r"–∏—é–ª\w*": 7,
    r"–∞–≤–≥—É—Å—Ç\w*": 8,
    r"—Å–µ–Ω—Ç—è–±—Ä\w*": 9,
    r"–æ–∫—Ç—è–±—Ä\w*": 10,
    r"–Ω–æ—è–±—Ä\w*": 11,
    r"–¥–µ–∫–∞–±—Ä\w*": 12,
}

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º regex –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
DATE_REGEX = re.compile(
    rf"(?P<day>\d{{1,2}})\s+(?P<month>{'|'.join(MONTHS_PATTERNS)})\s*(?P<year>\d{{4}})?",
    re.IGNORECASE | re.UNICODE,
)


def parse_russian_date(text: str, default_year: int = None) -> Optional[datetime]:
    """
    –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç —Å fallback –Ω–∞ dateparser

    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞—Ç—É
        default_year: –ì–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω

    Returns:
        datetime –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    if not text:
        return None

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    clean_text = re.sub(r"\s+", " ", text.strip())

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º dateparser (–Ω–∞–¥—ë–∂–Ω–µ–µ), –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if DATEPARSER_AVAILABLE:
        try:
            dt = dateparser.parse(
                clean_text,
                languages=["ru"],
                settings={"DATE_ORDER": "DMY", "PREFER_DAY_OF_MONTH": "first"},
            )
            if dt:
                return dt
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è dateparser –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '{clean_text}': {e}")

    # Fallback –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π regex
    try:
        match = DATE_REGEX.search(clean_text)
        if match:
            day = int(match.group("day"))
            month_text = match.group("month")
            year = int(match.group("year") or default_year or datetime.now().year)

            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
            month = None
            for pattern, num in MONTHS_PATTERNS.items():
                if re.fullmatch(pattern, month_text, re.IGNORECASE):
                    month = num
                    break

            if month:
                return datetime(year, month, day)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Regex –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '{clean_text}': {e}")

    return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
redis_client = None
if REDIS_AVAILABLE:
    try:
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis - —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        logger.info("üî¥ Redis –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Redis –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        REDIS_AVAILABLE = False

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö LLM –∑–∞–ø—Ä–æ—Å–æ–≤
LLM_CONCURRENCY = 10
llm_semaphore = asyncio.Semaphore(LLM_CONCURRENCY)


class HourlyLimitMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π Redis –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""

    def __init__(self, limit_per_hour: int = 50):
        self.limit = limit_per_hour
        self.fallback_cache = {}  # Fallback –¥–ª—è —Å–ª—É—á–∞—è –±–µ–∑ Redis
        self._redis_client = None

    async def __call__(self, handler, event, data):
        if not hasattr(event, "from_user") or not event.from_user:
            return await handler(event, data)

        user_id = event.from_user.id

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if REDIS_AVAILABLE and redis is not None:
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if self._redis_client is None:
                    self._redis_client = redis.from_url(
                        "redis://localhost", decode_responses=True
                    )

                key = f"user:{user_id}:quota"
                used = await self._redis_client.incr(key)
                if used == 1:
                    await self._redis_client.expire(key, 3600)  # TTL 1 —á–∞—Å

                if used > self.limit:
                    ttl = await self._redis_client.ttl(key)
                    await event.answer(
                        "‚åõ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å.\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {ttl if ttl > 0 else 3600} —Å–µ–∫—É–Ω–¥."
                    )
                    return

                # –õ–æ–≥–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ –∫ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å—ã
                if used > self.limit * 0.8:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É: {used}/{self.limit}"
                    )

                # –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Redis, –≤—ã—Ö–æ–¥–∏–º
                return await handler(event, data)

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                self._redis_client = None

        # Fallback: –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        current_time = time.time()
        current_hour = int(current_time // 3600)

        if user_id not in self.fallback_cache:
            self.fallback_cache[user_id] = {"hour": current_hour, "count": 0}

        user_data = self.fallback_cache[user_id]

        # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
        if user_data["hour"] != current_hour:
            user_data["hour"] = current_hour
            user_data["count"] = 0

        user_data["count"] += 1

        if user_data["count"] > self.limit:
            await event.answer(
                "‚åõ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å."
            )
            return

        return await handler(event, data)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"


# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek API
def get_system_prompt() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π"""
    from datetime import datetime

    current_date = datetime.now().strftime("%d.%m.%Y")
    current_weekday = datetime.now().strftime("%A")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    weekdays_ru = {
        "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "—Å—Ä–µ–¥–∞",
        "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "—Å—É–±–±–æ—Ç–∞",
        "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    current_weekday_ru = weekdays_ru.get(current_weekday, current_weekday)

    return f"""[–Ø–ó–´–ö –û–ë–©–ï–ù–ò–Ø - –°–¢–†–û–ì–û –†–£–°–°–ö–ò–ô]
‚Ä¢ –¢—ã –¢–µ—Ö–Ω–æ–ë–æ—Ç. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞. –ë—É–¥—å –≤–µ–∂–ª–∏–≤ –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω.

[–¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê –ò –í–†–ï–ú–Ø]
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {current_date} ({current_weekday_ru})
‚Ä¢ –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞—Ç–∞–º–∏ —É—á–∏—Ç—ã–≤–∞–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–µ—Ä–∏–æ–¥–æ–≤ –∏ —Å—Ä–æ–∫–æ–≤

[–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í]
‚Ä¢ –ù–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–ø—Ä–∏–≤–µ—Ç, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π) –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–º–æ—â—å
‚Ä¢ –ï—Å–ª–∏ —É —Ç–µ–±—è –ù–ï–¢ –ø–æ–ª–Ω–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏: "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help"
‚Ä¢ –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
‚Ä¢ –í–ê–ñ–ù–û: –ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–π –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å üìé –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å, –≥–¥–µ —Å–∫–∞—á–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã - —ç—Ç–æ –∫–ª—é—á–µ–≤–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∏—Ö

[–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–ê]
‚Ä¢ –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ (*) –≤ –ª—é–±–æ–º –≤–∏–¥–µ
‚Ä¢ –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (**)
‚Ä¢ –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (**bold**, *italic*)
‚Ä¢ –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
‚Ä¢ –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã –∏ —ç–º–æ–¥–∑–∏
‚Ä¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —ç–º–æ–¥–∑–∏ üìé –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ + —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:
  üè´ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫
  üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  üéØ –¶–µ–ª—å
  üöÄ –ú–∏—Å—Å–∏—è
  ‚ö° –ü—Ä–∏–Ω—Ü–∏–ø—ã
  üè¢ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  üìé –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç (–í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)

–í –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

"""


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not DEEPSEEK_API_KEY:
    raise ValueError("DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
logger.info("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ API
logger.info("üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ middleware –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ API...")
dp.message.middleware(HourlyLimitMiddleware(limit_per_hour=50))
dp.callback_query.middleware(HourlyLimitMiddleware(limit_per_hour=50))
logger.info("‚úÖ Middleware —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (50 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å)")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ —Å–ø–µ—Ü-–º–µ–Ω—é Telegram
async def on_startup_set_commands(bot: Bot):
    try:
        commands = [
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            types.BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        # –ü–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if CALENDAR_AVAILABLE:
            commands.append(
                types.BotCommand(command="calendar", description="–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω")
            )
        if QUIZ_AVAILABLE:
            commands.append(
                types.BotCommand(command="quiz", description="–ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            )
        if BRAINSTORM_AVAILABLE:
            commands.append(
                types.BotCommand(command="brainstorm", description="–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π")
            )
        if LISTS_PARSER_AVAILABLE:
            commands.append(
                types.BotCommand(command="checklists", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏")
            )
        commands.append(
            types.BotCommand(command="help", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º")
        )

        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ø–µ—Ü-–º–µ–Ω—é Telegram")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")


dp.startup.register(on_startup_set_commands)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫ OperatorState)
class UserState(StatesGroup):
    IN_QUIZ = State()
    COLLECTING_DOCUMENTS = State()
    SEARCHING_LISTS = State()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API
class DeepSeekAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }

    @retry(
        wait=wait_exponential(multiplier=1, min=2, max=60), stop=stop_after_attempt(5)
    )
    async def _make_request(self, payload: dict) -> Optional[dict]:
        """–ó–∞—â–∏—â—ë–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π"""
        async with aiohttp.ClientSession() as session:
            async with session.post(
                DEEPSEEK_API_URL, headers=self.headers, json=payload
            ) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 429:
                    retry_after = response.headers.get("Retry-After", "60")
                    logger.warning(f"‚ö†Ô∏è Rate limit (429), retry after {retry_after}s")
                    raise aiohttp.ClientResponseError(
                        response.request_info,
                        response.history,
                        status=429,
                        message=f"Rate limit exceeded, retry after {retry_after}s",
                    )
                else:
                    logger.error(f"‚ùå DeepSeek API error: {response.status}")
                    response.raise_for_status()

    async def get_completion(
        self, messages: list, temperature: float = 0.7
    ) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async with llm_semaphore:
                payload = {
                    "model": "deepseek-chat",
                    "messages": messages,
                    "temperature": temperature,
                }

                result = await self._make_request(payload)
                if result:
                    return result["choices"][0]["message"]["content"]
                return None

        except Exception as e:
            logger.error(f"‚ùå Error in DeepSeek API call: {e}")
            return None

    async def get_streaming_completion(self, messages: list, temperature: float = 0.7):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async with llm_semaphore:
                payload = {
                    "model": "deepseek-chat",
                    "messages": messages,
                    "temperature": temperature,
                    "stream": True,
                }

                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                for attempt in range(3):
                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.post(
                                DEEPSEEK_API_URL, headers=self.headers, json=payload
                            ) as response:
                                if response.status == 429:
                                    retry_after = int(
                                        response.headers.get("Retry-After", "60")
                                    )
                                    logger.warning(
                                        f"‚ö†Ô∏è Rate limit –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ, –∂–¥—ë–º {retry_after}s"
                                    )
                                    await asyncio.sleep(retry_after)
                                    continue

                                if response.status == 200:
                                    async for line in response.content:
                                        line = line.decode("utf-8").strip()
                                        if line.startswith("data: "):
                                            line = line[6:]
                                            if line == "[DONE]":
                                                break
                                            try:
                                                import json

                                                data = json.loads(line)
                                                if (
                                                    "choices" in data
                                                    and len(data["choices"]) > 0
                                                ):
                                                    delta = data["choices"][0].get(
                                                        "delta", {}
                                                    )
                                                    if "content" in delta:
                                                        yield delta["content"]
                                            except json.JSONDecodeError:
                                                continue
                                    return
                                else:
                                    logger.error(
                                        f"‚ùå DeepSeek streaming error: {response.status}"
                                    )
                                    if attempt < 2:
                                        await asyncio.sleep(2**attempt)
                                        continue
                                    else:
                                        yield None
                                        return

                    except Exception as e:
                        logger.error(f"‚ùå Streaming attempt {attempt + 1} failed: {e}")
                        if attempt < 2:
                            await asyncio.sleep(2**attempt)
                            continue
                        else:
                            yield None
                            return

        except Exception as e:
            logger.error(f"‚ùå Error in DeepSeek streaming API call: {e}")
            yield None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek API
logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek API...")
deepseek = DeepSeekAPI(DEEPSEEK_API_KEY)
logger.info("‚úÖ DeepSeek API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
async def get_enhanced_context(query: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã, –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        # –ü–†–ò–û–†–ò–¢–ï–¢: –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ (–µ—Å–ª–∏ –≥–æ—Ç–æ–≤–∞)
        if MODERN_RAG_AVAILABLE and rag_systems_ready["modern"]:
            logger.info("üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é RAG —Å–∏—Å—Ç–µ–º—É")
            from modern_rag_system import get_context_for_query_async

            base_context = await get_context_for_query_async(query)
        elif OPTIMIZED_RAG_AVAILABLE and rag_systems_ready["optimized"]:
            logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é RAG —Å–∏—Å—Ç–µ–º—É")
            from optimized_rag_system import RAGModes, get_optimized_context_async

            base_context = await get_optimized_context_async(query, RAGModes.ECONOMY)
        else:
            logger.info("üìñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é RAG —Å–∏—Å—Ç–µ–º—É")
            base_context = rag_system.get_context_for_query(query)

        query_lower = query.lower()
        enhanced_contexts = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º/—Å–º–µ–Ω–∞–º–∏
        schedule_keywords = [
            "—Å–º–µ–Ω–∞",
            "—Å–º–µ–Ω—ã",
            "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            "–≥—Ä–∞—Ñ–∏–∫",
            "–∑–∞—è–≤–∫",
            "–∑–∞–ø–∏—Å",
            "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
            "–∫–æ–≥–¥–∞",
            "–¥–∞—Ç",
            "–ø–µ—Ä–∏–æ–¥",
            "–ø—Ä–∏–µ–º",
            "–Ω–∞—á–∞–ª—å",
            "—è–Ω–≤–∞—Ä",
            "—Ñ–µ–≤—Ä–∞–ª—å",
            "–º–∞—Ä—Ç",
            "–∞–ø—Ä–µ–ª—å",
            "–º–∞–π",
            "–∏—é–Ω",
            "–∏—é–ª",
            "–∞–≤–≥—É—Å—Ç",
            "—Å–µ–Ω—Ç—è–±—Ä",
            "–æ–∫—Ç—è–±—Ä",
            "–Ω–æ—è–±—Ä",
            "–¥–µ–∫–∞–±—Ä",
        ]

        is_schedule_related = any(
            keyword in query_lower for keyword in schedule_keywords
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        document_keywords = [
            "–¥–æ–∫—É–º–µ–Ω—Ç",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "—Å–ø—Ä–∞–≤–∫",
            "–∑–∞—è–≤–ª–µ–Ω",
            "—Å–æ–≥–ª–∞—Å–∏",
            "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ",
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫",
            "—Ä–æ–∂–¥–µ–Ω–∏",
            "–±–∞—Å—Å–µ–π–Ω",
            "–∏–Ω—Ñ–µ–∫—Ü",
            "–ø–ª–∞–Ω",
            "—É—á–µ–±–Ω—ã–π",
            "–ø—Ä–∏ –∑–∞–µ–∑–¥–µ",
            "–ø–æ—Å—Ç—É–ø–ª–µ–Ω",
            "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü",
            "—á—Ç–æ –Ω—É–∂–Ω–æ",
            "—á—Ç–æ –≤–∑—è—Ç—å",
            "–∫–∞–∫–∏–µ –Ω—É–∂–Ω—ã",
            "—Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ",
        ]

        is_documents_related = any(
            keyword in query_lower for keyword in document_keywords
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if is_schedule_related:
            logger.info(
                "üìÖ –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            )
            schedule_context = await get_schedule_context_async(query)
            enhanced_contexts.append(schedule_context)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        if is_documents_related and DOCUMENTS_PARSER_AVAILABLE:
            logger.info(
                "üìÑ –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            )
            documents_context = await get_documents_context_async(query)
            if documents_context:
                enhanced_contexts.append(documents_context)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        if enhanced_contexts:
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π" not in base_context:
                final_context = f"{base_context}\n\n" + "\n\n".join(enhanced_contexts)
            else:
                final_context = "\n\n".join(enhanced_contexts)

            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
            return final_context
        else:
            logger.info("üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return base_context

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if MODERN_RAG_AVAILABLE:
            return await get_context_for_query_async(query)
        else:
            return rag_system.get_context_for_query(query)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–æ–ª—è–º: –∞–¥–º–∏–Ω / –æ–ø–µ—Ä–∞—Ç–æ—Ä / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    # –ê–¥–º–∏–Ω: –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    if is_admin(user_id):
        admin_text = (
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ /queue ‚Äî –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º)\n"
            "‚Ä¢ /consultants_stats ‚Äî —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º\n"
            "‚Ä¢ /operators ‚Äî —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ /notifications ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ /update_schedule, /update_documents ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Ç–µ—Å—Ç–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤."
        )
        await message.answer(admin_text)
        return

    # –û–ø–µ—Ä–∞—Ç–æ—Ä: –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥
    if operator_handler.operator_manager.is_operator(user_id):
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö c –∫–Ω–æ–ø–∫–æ–π: ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ /queue ‚Äî —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É\n"
            "‚Ä¢ /consultants_stats ‚Äî –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /operator_stats ‚Äî –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /end_session ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n"
            "–í–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é)\n"
            "‚Ä¢ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞\n"
        )
        await message.answer(text)
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞!\n\n"
        "ü§ñ –Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard_rows = [
        [
            InlineKeyboardButton(text="üè´ –û —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ", callback_data="info_about"),
            InlineKeyboardButton(
                text="üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", callback_data="info_programs"
            ),
        ],
        [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="info_admission")],
    ]

    if BRAINSTORM_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π", callback_data="start_brainstorm"
                )
            ]
        )

    if CALENDAR_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω", callback_data="show_calendar"
                )
            ]
        )

    if LISTS_PARSER_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="check_lists"
                )
            ]
        )

    if QUIZ_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="start_quiz"
                )
            ]
        )

    keyboard_rows.append(
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                callback_data="request_consultant",
            )
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logger.info(
        f"üÜò –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) - –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    success = await operator_handler.escalate_to_operator(
        user_id, message, auto_escalation=False, bot=bot
    )

    if success:
        await state.set_state(OperatorState.WAITING_OPERATOR)
        queue_info = operator_handler.get_queue_info()
        position = len(
            [u for u in queue_info["queue_details"] if u["user_id"] == user_id]
        )

        await message.answer(
            "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
            f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
            "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–Ω–∞–ª–æ–≥ callback back_to_menu)"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞!\n\n"
        "ü§ñ –Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard_rows = [
        [
            InlineKeyboardButton(text="üè´ –û —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ", callback_data="info_about"),
            InlineKeyboardButton(
                text="üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", callback_data="info_programs"
            ),
        ],
        [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="info_admission")],
    ]

    if CALENDAR_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω", callback_data="show_calendar"
                )
            ]
        )

    if LISTS_PARSER_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="check_lists"
                )
            ]
        )

    if QUIZ_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="start_quiz"
                )
            ]
        )

    # –ï—Å–ª–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º –ø–æ–¥–∫–ª—é—á–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É (brainstorm_mod —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    if BRAINSTORM_AVAILABLE:
        keyboard_rows.insert(
            0,
            [
                InlineKeyboardButton(
                    text="üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π", callback_data="start_brainstorm"
                )
            ],
        )

    keyboard_rows.append(
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                callback_data="request_consultant",
            )
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.message(Command("quiz"))
async def cmd_quiz(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ (–∞–Ω–∞–ª–æ–≥ callback start_quiz)"""
    if not QUIZ_AVAILABLE:
        await message.answer("‚ùå –ö–≤–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –∫–≤–∏–∑-–º–æ–¥—É–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        await quiz_start(message, state, bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ /quiz: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞")


@dp.message(Command("checklists"))
async def cmd_checklists(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤ (–∞–Ω–∞–ª–æ–≥ callback check_lists)"""
    if not LISTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    try:
        await state.set_state(UserState.SEARCHING_LISTS)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"
                    )
                ]
            ]
        )
        await message.answer(
            "üîç –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞\n\n"
            "üí° –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ –û–¥–Ω–æ —Å–ª–æ–≤–æ ‚Üí –Ω–∞–π–¥–µ—Ç –ª—é–±—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n"
            "‚Ä¢ –î–≤–∞ —Å–ª–æ–≤–∞ ‚Üí –Ω–∞–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–ò–º—è –§–∞–º–∏–ª–∏—è ‚Üî –§–∞–º–∏–ª–∏—è –ò–º—è)\n\n"
            "‚ö†Ô∏è '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä' –ù–ï –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ '–ò–≤–∞–Ω–æ–≤' –∏–ª–∏ —Ç–æ–ª—å–∫–æ '–ü–µ—Ç—Ä'\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=keyboard,
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ /checklists: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞")


@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_status = operator_handler.get_user_status(user_id)

    logger.info(
        f"‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    status_descriptions = {
        UserStatus.NORMAL: "üü¢ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        UserStatus.WAITING_OPERATOR: "‚è≥ –û–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
        UserStatus.WITH_OPERATOR: "üí¨ –û–±—â–∞–µ—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
        UserStatus.RATING_OPERATOR: "‚≠ê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
    }

    status_text = (
        f"‚ÑπÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å: {status_descriptions.get(user_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (
        user_status == UserStatus.WAITING_OPERATOR
        and user_id in operator_handler.waiting_queue
    ):
        request_info = operator_handler.waiting_queue[user_id]
        status_text += (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_info['request_time'].strftime('%H:%M:%S')}\n"
            f"üìç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {request_info['queue_position']}\n\n"
        )
    elif (
        user_status == UserStatus.WITH_OPERATOR
        and user_id in operator_handler.active_sessions
    ):
        session_info = operator_handler.active_sessions[user_id]
        operator_info = operator_handler.operator_manager.get_operator_info(
            session_info["operator_id"]
        )
        status_text += (
            f"üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {operator_info['name']}\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: {session_info['start_time'].strftime('%H:%M:%S')}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {session_info.get('message_count', 0)}\n\n"
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    queue_info = operator_handler.get_queue_info()
    status_text += (
        f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n"
        f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {queue_info['waiting_count']}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {queue_info['active_sessions']}\n"
        f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {queue_info['active_operators']}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã: /help - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, /cancel - –æ—Ç–º–µ–Ω–∞"
    )

    await message.answer(status_text)


@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()
    user_status = operator_handler.get_user_status(user_id)

    logger.info(
        f"üö´ –ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if user_status == UserStatus.WAITING_OPERATOR:
        success, msg = await operator_handler.cancel_waiting(user_id, bot)
        if success:
            await state.clear()
            await message.answer(
                "‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
        else:
            await message.answer(f"‚ùå {msg}")
    elif user_status == UserStatus.WITH_OPERATOR:
        success = await operator_handler.end_session(
            user_id, bot, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        if success:
            await state.clear()
            await message.answer(
                "‚ùå –°–µ—Å—Å–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
    elif user_status == UserStatus.RATING_OPERATOR:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        operator_handler.set_user_status(user_id, UserStatus.NORMAL)
        await state.clear()
        await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    elif current_state is not None:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    else:
        await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
@dp.message(Command("operator_stats"))
async def cmd_operator_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    operator_id = message.from_user.id

    if operator_handler.operator_manager.is_operator(operator_id):
        config = operator_handler.operator_manager.get_operator_info(operator_id)
        stats_text = (
            f"üë®‚Äçüíº –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {config['name']}:\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {config['rating']}/5\n"
            f"üìä –°–µ—Å—Å–∏–π –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {config['total_sessions']}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if config['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        await message.answer(stats_text)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã")


# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É /accept, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏


@dp.message(Command("end_session"))
async def cmd_end_session(message: Message):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    operator_id = message.from_user.id

    # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    user_id = None
    for uid, session in operator_handler.active_sessions.items():
        if session.get("operator_id") == operator_id:
            user_id = uid
            break

    if user_id:
        success = await operator_handler.end_session(
            user_id, bot, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"
        )
        if success:
            await message.answer("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")


# –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ‚Äî –ª–æ–≥–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ –≤—ã—à–µ


@dp.message(Command("operators"))
async def cmd_operators_list(message: Message):
    """–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    operators_list = "üë®‚Äçüíº –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"

    for op_id, config in operator_handler.operator_manager.operators_config.items():
        status_emoji = "üü¢" if config["is_active"] else "ÔøΩÔøΩ"
        operators_list += (
            f"{status_emoji} {config['name']} (ID: {op_id})\n"
            f"   ‚≠ê {config['rating']}/5 ({config['total_sessions']} —Å–µ—Å—Å–∏–π)\n\n"
        )

    await message.answer(operators_list)


@dp.message(Command("check_operator"))
async def cmd_check_operator(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = message.from_user.id

    if operator_handler.operator_manager.is_operator(user_id):
        config = operator_handler.operator_manager.get_operator_info(user_id)
        status_text = (
            f"‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
            f"üë§ –ò–º—è: {config['name']}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if config['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {config['rating']}/5\n"
            f"üìä –°–µ—Å—Å–∏–π: {config['total_sessions']}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /operator_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ /end_session - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
            f"‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"
        )
        await message.answer(status_text)
    else:
        await message.answer(f"‚ùå –í–∞—à ID ({user_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")

    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –±—É–¥—É—Ç –Ω–∏–∂–µ


def _build_queue_page_text_and_kb(page: int, page_size: int = 5):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—á–µ—Ä–µ–¥–∏"""
    total = len(operator_handler.waiting_queue)
    items = list(operator_handler.waiting_queue.items())
    pages = max(1, (total + page_size - 1) // page_size)
    page = max(1, min(page, pages))
    start = (page - 1) * page_size
    end = start + page_size
    slice_items = items[start:end]

    header = (
        f"üìã –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä. {page}/{pages})\n"
        f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {total} | üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(operator_handler.active_sessions)} | üë®‚Äçüíº –û–Ω–ª–∞–π–Ω: {len(operator_handler.operator_manager.get_active_operators())}\n\n"
    )
    body = ""
    for idx, (uid, info) in enumerate(slice_items, start=start + 1):
        uname = f"@{info.get('username')}" if info.get("username") else "‚Äî"
        req_time = info.get("request_time")
        tstr = req_time.strftime("%H:%M") if hasattr(req_time, "strftime") else "‚Äî"
        body += (
            f"{idx}. {info.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} ({uname})\n"
            f"   ‚è∞ {tstr}  ‚Ä¢  ID: {uid}\n"
        )
    text = header + (body or "–ü–æ–∫–∞ –ø—É—Å—Ç–æ")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - –∫–Ω–æ–ø–∫–∞ –ü—Ä–∏–Ω—è—Ç—å, –∑–∞—Ç–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    rows = []
    for uid, _ in slice_items:
        rows.append(
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_request_{uid}"
                )
            ]
        )
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if page > 1:
        nav_row.append(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"queue_page_{page - 1}")
        )
    if page < pages:
        nav_row.append(
            InlineKeyboardButton(text="‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"queue_page_{page + 1}")
        )
    if nav_row:
        rows.append(nav_row)
    rows.append(
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="queue_status")]
    )
    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    return text, kb


@dp.message(Command("queue"))
async def cmd_queue(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if not operator_handler.operator_manager.is_operator(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return
    text, kb = _build_queue_page_text_and_kb(page=1)
    await message.answer(text, reply_markup=kb)


@dp.callback_query(F.data == "request_consultant")
async def handle_request_consultant(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º' ‚Äî —Ç–æ—Ç –∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —á—Ç–æ –∏ /help"""
    try:
        user = callback.from_user
        chat_id = callback.message.chat.id if callback.message else user.id
        # –≠—Å–∫–∞–ª–∏—Ä—É–µ–º —Å —è–≤–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
        success = await operator_handler.escalate_to_operator(
            user.id,
            callback.message,
            auto_escalation=False,
            bot=bot,
            first_name=user.first_name or "",
            username=user.username or "",
            chat_id=chat_id,
            origin_message_id=None,
            original_message_override="–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        )
        if success:
            await state.set_state(OperatorState.WAITING_OPERATOR)
            queue_info = operator_handler.get_queue_info()
            position = len(
                [u for u in queue_info["queue_details"] if u["user_id"] == user.id]
            )
            await callback.message.answer(
                "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
                f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
                "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
            )
        else:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    finally:
        try:
            await callback.answer()
        except Exception:
            pass


@dp.callback_query(F.data.startswith("queue_page_"))
async def handle_queue_page_callback(callback: CallbackQuery):
    if not operator_handler.operator_manager.is_operator(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    try:
        page = int(callback.data.split("_")[2])
    except Exception:
        page = 1
    text, kb = _build_queue_page_text_and_kb(page=page)
    await callback.message.edit_text(text)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()


@dp.message(Command("consultants_stats"))
async def cmd_consultants_stats(message: Message):
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤)"""
    if not operator_handler.operator_manager.is_operator(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return
    stats = operator_handler.get_consultants_stats()
    hist = stats["rating_histogram"]
    lines = [
        "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤:\n",
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['overall_avg_rating']}\n",
        f"üìà –û—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['rated_sessions']} / –û—Ç—á–µ—Ç–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['total_sessions_reported']}\n",
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions']} | ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['waiting']}\n",
        "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:",
        f"1‚≠ê: {hist.get(1, 0)}  |  2‚≠ê: {hist.get(2, 0)}  |  3‚≠ê: {hist.get(3, 0)}  |  4‚≠ê: {hist.get(4, 0)}  |  5‚≠ê: {hist.get(5, 0)}",
        "\n–¢–æ–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤:",
    ]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Å—Å–∏–π
    ops = sorted(
        stats["operators"],
        key=lambda x: (x.get("rating", 0), x.get("total_sessions", 0)),
        reverse=True,
    )
    for op in ops:
        lines.append(
            f"‚Ä¢ {op['name']} ‚Äî ‚≠ê {op['rating']}/5 ({op['total_sessions']} —Å–µ—Å—Å.), {'üü¢' if op['is_active'] else '‚ö™Ô∏è'}"
        )
    await message.answer("\n".join(lines))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í–´–®–ï –û–°–ù–û–í–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í!)
@dp.message(
    F.text
    & F.from_user.id.in_(
        list(operator_handler.operator_manager.operators_config.keys())
    )
)
async def handle_operator_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ - –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö"""
    operator_id = message.from_user.id

    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id}: '{message.text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if message.text.startswith("/"):
        logger.info(f"üîß –ö–æ–º–∞–Ω–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}")
        return  # –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success, msg = await operator_handler.forward_operator_message(
        operator_id, message.text, bot
    )
    if not success:
        await message.answer(f"‚ùå {msg}")
    else:
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(
    (F.photo | F.document | F.voice | F.video | F.audio | F.sticker)
    & F.from_user.id.in_(
        list(operator_handler.operator_manager.operators_config.keys())
    )
)
async def handle_operator_media(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ - –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö"""
    operator_id = message.from_user.id

    media_type = "unknown"
    if message.photo:
        media_type = "—Ñ–æ—Ç–æ"
    elif message.document:
        media_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.voice:
        media_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.video:
        media_type = "–≤–∏–¥–µ–æ"
    elif message.audio:
        media_type = "–∞—É–¥–∏–æ"
    elif message.sticker:
        media_type = "—Å—Ç–∏–∫–µ—Ä"

    logger.info(f"üìé –ü–æ–ª—É—á–µ–Ω–æ {media_type} –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id}")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success = await operator_handler.forward_operator_media(operator_id, message, bot)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    else:
        logger.info(
            f"‚úÖ {media_type.capitalize()} –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞ –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞
if QUIZ_AVAILABLE:
    try:
        register_quiz_handlers(dp, bot)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞
if BRAINSTORM_AVAILABLE:
    try:
        register_brainstorm_handlers(dp, bot)
        register_brainstorm_menu_handler(dp)
        logger.info(
            "‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.text)
async def handle_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ)
    if operator_handler.operator_manager.is_operator(user_id):
        logger.warning(
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {user_id} –ø–æ–ø–∞–ª–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        )
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É /quiz –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ quiz_mod.py
    if QUIZ_AVAILABLE and (
        message.text == "/quiz"
        or (current_state and current_state.startswith("QuizState"))
    ):
        if message.text == "/quiz":
            logger.info(
                f"üéØ –ö–æ–º–∞–Ω–¥–∞ /quiz –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –ø–µ—Ä–µ–¥–∞—ë–º –≤ –∫–≤–∏–∑-–º–æ–¥—É–ª—å"
            )
        else:
            logger.info(
                f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–≤–∏–∑–∞ {current_state} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"
            )
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É /brainstorm –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ brainstorm_mod.py
    if BRAINSTORM_AVAILABLE and (
        message.text == "/brainstorm"
        or (current_state and current_state.startswith("BrainstormState"))
    ):
        if message.text == "/brainstorm":
            logger.info(
                f"üß† –ö–æ–º–∞–Ω–¥–∞ /brainstorm –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –ø–µ—Ä–µ–¥–∞—ë–º –≤ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º-–º–æ–¥—É–ª—å"
            )
        else:
            logger.info(
                f"üß† –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ {current_state} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"
            )
        return

    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_status = operator_handler.get_user_status(user_id)
    logger.info(f"üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_status.value}")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.WAITING_OPERATOR:
        logger.info(
            f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        operator_handler.add_user_message_to_history(user_id, message.text)
        await message.answer(
            "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    if user_status == UserStatus.WITH_OPERATOR:
        logger.info(
            f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±—â–∞–µ—Ç—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
        success = await operator_handler.forward_user_message(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.RATING_OPERATOR:
        logger.info(f"‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–ª–∂–µ–Ω –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞")
        await message.answer(
            "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤
    if current_state == UserState.SEARCHING_LISTS:
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö: '{message.text}'")
        await handle_lists_search(message, state)
        return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
    logger.info(
        f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{message.text[:50]}{'...' if len(message.text) > 50 else ''}'"
    )
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
        # –ó–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –±—ã—Å—Ç—Ä–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        try:
            operator_handler.remember_user_message(message)
        except Exception:
            pass

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
        context = await get_enhanced_context(message.text)
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context[:200]}..."
            if len(context) > 200
            else f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        )

        # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ò–ò, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø—É—Å—Ç—å –ò–ò —Å–∞–º —Ä–µ—à–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è DeepSeek API
        system_message = get_system_prompt()

        user_message = f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{context}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {message.text}

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ.
"""

        messages = [
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_message},
        ]

        logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sent_message = await message.answer("ü§î –î—É–º–∞—é...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API
        response_text = ""
        last_update = 0
        last_typing_time = 0
        update_interval = 100  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ (—Ä–µ–∂–µ)

        try:
            async for chunk in deepseek.get_streaming_completion(
                messages, temperature=0.3
            ):
                if chunk:
                    response_text += chunk
                    current_time = time.time()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N —Å–∏–º–≤–æ–ª–æ–≤ –ò –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
                    if (
                        len(response_text) - last_update >= update_interval
                        and current_time - last_typing_time >= 2.0
                    ):
                        try:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
                            display_text = response_text + " ‚ñå"
                            try:
                                await bot.edit_message_text(
                                    display_text,
                                    chat_id=sent_message.chat.id,
                                    message_id=sent_message.message_id,
                                    parse_mode="Markdown",
                                )
                            except Exception:
                                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                await bot.edit_message_text(
                                    display_text,
                                    chat_id=sent_message.chat.id,
                                    message_id=sent_message.message_id,
                                )
                            last_update = len(response_text)
                            last_typing_time = current_time

                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                            await asyncio.sleep(1.0)

                        except Exception:
                            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            pass

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
            if response_text:
                try:
                    try:
                        await bot.edit_message_text(
                            response_text,
                            chat_id=sent_message.chat.id,
                            message_id=sent_message.message_id,
                            parse_mode="Markdown",
                        )
                    except Exception:
                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        await bot.edit_message_text(
                            response_text,
                            chat_id=sent_message.chat.id,
                            message_id=sent_message.message_id,
                        )
                    logger.info(
                        f"‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                    )
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
                    try:
                        lower_text = response_text.lower()
                        if ("/help" in lower_text) or (
                            "–æ–±—Ä–∞—Ç–∏—Ç" in lower_text and "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in lower_text
                        ):
                            from aiogram.types import (
                                InlineKeyboardButton,
                                InlineKeyboardMarkup,
                            )

                            help_kb = InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [
                                        InlineKeyboardButton(
                                            text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                                            callback_data="escalate_from_last",
                                        )
                                    ]
                                ]
                            )
                            await message.answer(
                                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                                reply_markup=help_kb,
                            )
                    except Exception as kb_error:
                        logger.debug(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {kb_error}"
                        )
                except Exception as final_edit_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {final_edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await message.answer(response_text, parse_mode="Markdown")
                    except Exception:
                        await message.answer(response_text)
            else:
                await bot.edit_message_text(
                    "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help",
                    chat_id=sent_message.chat.id,
                    message_id=sent_message.message_id,
                )

        except Exception as streaming_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {streaming_error}")
            await bot.edit_message_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help",
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.photo)
async def handle_photo(message: Message):
    await handle_media_message(message, "—Ñ–æ—Ç–æ")


@dp.message(F.document)
async def handle_document(message: Message):
    await handle_media_message(message, "–¥–æ–∫—É–º–µ–Ω—Ç")


@dp.message(F.voice)
async def handle_voice(message: Message):
    await handle_media_message(message, "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@dp.message(F.video)
async def handle_video(message: Message):
    await handle_media_message(message, "–≤–∏–¥–µ–æ")


@dp.message(F.audio)
async def handle_audio(message: Message):
    await handle_media_message(message, "–∞—É–¥–∏–æ")


@dp.message(F.sticker)
async def handle_sticker(message: Message):
    await handle_media_message(message, "—Å—Ç–∏–∫–µ—Ä")


async def handle_media_message(message: Message, media_type: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if operator_handler.operator_manager.is_operator(user_id):
        logger.info(f"üì® –ú–µ–¥–∏–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {user_id}: {media_type}")
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await operator_handler.forward_operator_media(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞")
        return

    user_status = operator_handler.get_user_status(user_id)
    logger.info(
        f"üìé –ü–æ–ª—É—á–µ–Ω–æ {media_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.WAITING_OPERATOR:
        await message.answer(
            "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    if user_status == UserStatus.WITH_OPERATOR:
        logger.info(
            f"üí¨ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º {media_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"
        )
        success = await operator_handler.forward_user_message(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.RATING_OPERATOR:
        await message.answer(
            "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
        )
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ò–ò
    await message.answer(
        f"üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ ({media_type}) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
    )


@dp.message(Command("test_location"))
async def cmd_test_location(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏"""
    test_queries = [
        "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫",
        "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",
        "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è",
        "–∞–¥—Ä–µ—Å",
    ]

    response_text = "üó∫Ô∏è –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n\n"

    for query in test_queries:
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {query}")
        context = rag_system.get_context_for_query(query)

        if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π" in context:
            response_text += f"‚ùå '{query}' - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è" in context or "–ú–æ—Å–∫–≤–∞" in context:
                response_text += f"‚úÖ '{query}' - –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω\n"
            else:
                response_text += f"‚ö†Ô∏è '{query}' - –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –±–µ–∑ –∞–¥—Ä–µ—Å–∞\n"

    await message.answer(response_text)


@dp.message(Command("test_rag"))
async def cmd_test_rag(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    test_queries = [
        "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å",
        "–ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è",
        "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫",
    ]

    response_text = "üîß –¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã:\n\n"

    for query in test_queries:
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        context = rag_system.get_context_for_query(query)

        if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π" in context:
            response_text += f"‚ùå '{query}' - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        else:
            response_text += f"‚úÖ '{query}' - –Ω–∞–π–¥–µ–Ω–æ ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤)\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    response_text += "\nüìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n"
    response_text += f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞: {'‚úÖ' if rag_system.knowledge_base else '‚ùå'}\n"

    if rag_system.knowledge_base:
        technopark_info = rag_system.knowledge_base.get("technopark_info", {})
        programs_count = len(technopark_info.get("educational_programs", []))
        faq_count = len(technopark_info.get("faq", []))
        general_info = technopark_info.get("general", {})

        response_text += f"–ü—Ä–æ–≥—Ä–∞–º–º: {programs_count}\n"
        response_text += f"FAQ: {faq_count}\n"
        response_text += f"–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {'‚úÖ' if general_info else '‚ùå'}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥—Ä–µ—Å–∞
        if general_info:
            contacts = general_info.get("contacts", {})
            address = contacts.get("address", "")
            response_text += f"–ê–¥—Ä–µ—Å –≤ –±–∞–∑–µ: {'‚úÖ' if address else '‚ùå'} ({address})\n"

    await message.answer(response_text)


@dp.message(Command("reload_kb"))
async def cmd_reload_kb(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        if MODERN_RAG_AVAILABLE:
            modern_rag.reload_knowledge_base()
            await message.answer("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            rag_system.load_knowledge_base()
            await message.answer("‚úÖ –ë–∞–∑–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")


@dp.message(Command("rag_stats"))
async def cmd_rag_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö RAG —Å–∏—Å—Ç–µ–º"""
    try:
        response_text = "üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê RAG –°–ò–°–¢–ï–ú**\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if MODERN_RAG_AVAILABLE:
            try:
                stats = modern_rag.get_stats()
                response_text += f"""üìö **–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG (ChromaDB + –≤–µ–∫—Ç–æ—Ä—ã) - –ê–ö–¢–ò–í–ù–ê–Ø**
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {stats.get("total_documents", 0)}
‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–π: {stats.get("collections_count", 1)}
‚Ä¢ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats.get("model_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: {stats.get("last_indexed", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {stats.get("db_size", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}

"""
            except Exception as e:
                response_text += (
                    f"üìö **–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG - –ê–ö–¢–ò–í–ù–ê–Ø** (–æ—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e})\n\n"
                )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã (—Ä–µ–∑–µ—Ä–≤)
        if OPTIMIZED_RAG_AVAILABLE:
            stats = optimized_rag.get_stats()
            response_text += f"""üöÄ **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG - –†–ï–ó–ï–†–í**
‚Ä¢ –û–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get("total_queries", 0)}
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats.get("cache_hits", 0)}
‚Ä¢ Cache Hit Rate: {stats.get("cache_hit_rate", "0%")}
‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get("tokens_saved", 0)}
‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {stats.get("processing_time_saved", 0):.2f}—Å
‚Ä¢ –†–∞–∑–º–µ—Ä —Ç–æ—á–Ω–æ–≥–æ –∫—ç—à–∞: {stats.get("exact_cache_size", 0)}
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø: {stats.get("semantic_cache_groups", 0)}
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get("popular_cache_size", 0)}
‚Ä¢ –¢–æ–ø –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {", ".join(list(stats.get("top_patterns", {}).keys())[:3])}

"""

        # –ë–∞–∑–æ–≤–∞—è RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        response_text += f"""üìñ **–ë–∞–∑–æ–≤–∞—è RAG (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞) - FALLBACK**
‚Ä¢ –†–∞–∑–¥–µ–ª–æ–≤ –≤ –ë–ó: {len(rag_system.knowledge_base)}
‚Ä¢ –§–∞–π–ª –ë–ó: knowledge_base.json
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {", ".join(list(rag_system.knowledge_base.keys())[:3])}

"""

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        response_text += f"""‚öôÔ∏è **–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´:**
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG: {"‚úÖ" if MODERN_RAG_AVAILABLE else "‚ùå"}
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG: {"‚úÖ" if OPTIMIZED_RAG_AVAILABLE else "‚ùå"}
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {"‚úÖ" if CALENDAR_AVAILABLE else "‚ùå"}  
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {"‚úÖ" if DOCUMENTS_PARSER_AVAILABLE else "‚ùå"}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"‚úÖ" if NOTIFICATIONS_AVAILABLE else "‚ùå"}

üí° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è ‚Üí –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ‚Üí –ë–∞–∑–æ–≤–∞—è"""

        await message.answer(response_text)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@dp.message(Command("test_modern_rag"))
async def cmd_test_modern_rag(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    if not MODERN_RAG_AVAILABLE:
        await message.answer("‚ùå –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    test_queries = [
        "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–µ—Ç–µ–π",
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è",
        "–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
        "–∫–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ö–∞–∫–∞—Ç–æ–Ω—ã",
        "3D –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è—Ö",
    ]

    response_text = "üß™ **–¢–µ—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã:**\n\n"

    for query in test_queries:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        try:
            search_results = modern_rag.search(query, max_results=2, min_score=0.05)

            if search_results:
                best_result = search_results[0]
                similarity = best_result["similarity"]
                title = best_result["title"]
                response_text += f"‚úÖ **{query}**\n"
                response_text += f"   ‚îî {title} ({similarity:.1%})\n\n"
            else:
                response_text += f"‚ùå **{query}** - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"

        except Exception as e:
            response_text += f"‚ö†Ô∏è **{query}** - –æ—à–∏–±–∫–∞: {str(e)[:50]}\n\n"

    await message.answer(response_text)


@dp.message(Command("test_optimized_rag"))
async def cmd_test_optimized_rag(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    if not OPTIMIZED_RAG_AVAILABLE:
        await message.answer("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    test_queries = [
        "–ø—Ä–∏–≤–µ—Ç",  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",  # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        "—Ç–µ–ª–µ—Ñ–æ–Ω",  # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        "—Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        "–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å",  # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        "—Ü–µ–Ω–∞ –æ–±—É—á–µ–Ω–∏—è",  # –°—Ç–æ–∏–º–æ—Å—Ç—å
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω",  # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        "–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ",  # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    ]

    response_text = "üöÄ **–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã:**\n\n"

    import time

    total_start_time = time.time()

    for query in test_queries:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
        try:
            start_time = time.time()
            context = await get_optimized_context_async(query, RAGModes.ECONOMY)
            processing_time = time.time() - start_time

            tokens = len(context) // 3

            if context:
                response_text += f"‚úÖ **{query}**\n"
                response_text += (
                    f"   ‚îî –¢–æ–∫–µ–Ω–æ–≤: {tokens} | –í—Ä–µ–º—è: {processing_time:.3f}—Å\n"
                )
                if len(context) > 100:
                    response_text += f"   ‚îî –ü—Ä–µ–≤—å—é: {context[:100]}...\n\n"
                else:
                    response_text += f"   ‚îî –û—Ç–≤–µ—Ç: {context}\n\n"
            else:
                response_text += f"‚ö™ **{query}** - –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)\n\n"

        except Exception as e:
            response_text += f"‚ö†Ô∏è **{query}** - –æ—à–∏–±–∫–∞: {str(e)[:50]}\n\n"

    total_time = time.time() - total_start_time
    response_text += f"‚è±Ô∏è **–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.3f}—Å**\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    stats = optimized_rag.get_stats()
    response_text += f"üìä Cache Hit Rate: {stats.get('cache_hit_rate', '0%')}\n"
    response_text += f"üíæ –¢–æ–∫–µ–Ω–æ–≤ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {stats.get('tokens_saved', 0)}"

    await message.answer(response_text)


@dp.message(Command("schedule"))
async def cmd_schedule(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–º–µ–Ω"""
    try:
        schedule_info = await get_schedule_context_async()
        if schedule_info:
            await message.answer(schedule_info)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@dp.message(Command("update_schedule"))
async def cmd_update_schedule(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω...")
        success = await force_update_schedule()

        if success:
            schedule_info = get_schedule_context()
            await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{schedule_info}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update_schedule: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@dp.message(Command("test_schedule"))
async def cmd_test_schedule(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    test_queries = [
        "–∫–æ–≥–¥–∞ –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ —è–Ω–≤–∞—Ä—Å–∫—É—é —Å–º–µ–Ω—É",
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω –Ω–∞ 2025 –≥–æ–¥",
        "–¥–∞—Ç—ã —Ñ–µ–≤—Ä–∞–ª—å—Å–∫–æ–π —Å–º–µ–Ω—ã",
        "–≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
        "–∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–º–µ–Ω–∞",
    ]

    response_text = "üß™ **–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n\n"

    for query in test_queries:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {query}")
        try:
            context = await get_enhanced_context(query)

            if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in context or "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in context:
                response_text += f"‚ùå **{query}** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
            else:
                response_text += f"‚úÖ **{query}** - –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"

        except Exception as e:
            response_text += f"‚ö†Ô∏è **{query}** - –æ—à–∏–±–∫–∞: {str(e)[:50]}\n\n"

    await message.answer(response_text)


# –ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã


@dp.message(Command("calendar"))
async def cmd_calendar(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–º–µ–Ω"""
    if not CALENDAR_AVAILABLE:
        await message.answer("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        user_id = message.from_user.id
        text, keyboard = get_calendar_interface(user_id)
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calendar: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")

@dp.message(Command("notifications"))
async def cmd_notifications(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not NOTIFICATIONS_AVAILABLE:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    try:
        user_id = message.from_user.id
        text, keyboard = get_notification_settings_interface(user_id)
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /notifications: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@dp.message(Command("test_notifications"))
async def cmd_test_notifications(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    if not NOTIFICATIONS_AVAILABLE:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫
    subscriptions = notification_system.get_user_subscriptions(user_id)

    status_text = "üîî **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
    status_text += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if subscriptions['schedule_updates'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
    status_text += f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if subscriptions['application_reminders'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    all_subscriptions = notification_system.load_subscriptions()
    status_text += "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    status_text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(all_subscriptions.get('schedule_updates', []))}\n"
    status_text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –¥–µ–¥–ª–∞–π–Ω—ã: {len(all_subscriptions.get('application_reminders', []))}\n\n"

    status_text += "üõ†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notifications –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"

    await message.answer(status_text)


@dp.message(Command("documents"))
async def cmd_documents(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    if not DOCUMENTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        documents_info = await get_documents_context_async()
        if documents_info and documents_info.strip():
            await message.answer(documents_info)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /documents: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")


@dp.message(Command("update_documents"))
async def cmd_update_documents(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    if not DOCUMENTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...")
        success = await force_update_documents()

        if success:
            documents_info = get_documents_context()
            await message.answer(
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n{documents_info}"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update_documents: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")


@dp.message(Command("test_documents"))
async def cmd_test_documents(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not DOCUMENTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    test_queries = [
        "–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏",
        "–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–µ–∑–¥–∞",
        "—Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫",
        "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏",
        "—Å–æ–≥–ª–∞—Å–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
        "—á—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π",
    ]

    response_text = "üß™ **–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n\n"

    for query in test_queries:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö: {query}")
        try:
            context = await get_enhanced_context(query)

            if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in context or "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in context:
                response_text += f"‚ùå **{query}** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
            elif "üìÑ –ù–ï–û–ë–•–û–î–ò–ú–´–ï –î–û–ö–£–ú–ï–ù–¢–´" in context:
                response_text += f"‚úÖ **{query}** - –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n\n"
            else:
                response_text += f"‚ö†Ô∏è **{query}** - –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"

        except Exception as e:
            response_text += f"‚ö†Ô∏è **{query}** - –æ—à–∏–±–∫–∞: {str(e)[:50]}\n\n"

    await message.answer(response_text)


@dp.message(Command("test_shorten"))
async def cmd_test_shorten(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not LISTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    test_names = [
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞ —É—á–∞—â–∏—Ö—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ —Å 06.09.2025–≥. –ø–æ 26.09.2025–≥.",
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã —É—á–∞—â–∏—Ö—Å—è, –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ –£–û –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫ —Å 03.04.2025–≥. –ø–æ 26.04.2025–≥.",
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞ —É—á–∞—â–∏—Ö—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ —Å 05.06.2025–≥. –ø–æ 28.06.2025–≥.",
        "–°–ø–∏—Å–æ–∫ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞–π—Å–∫–æ–π —Å–º–µ–Ω—ã",
        "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ê –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
        "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—â–∏—Ö—Å—è",
    ]

    response_text = "üß™ –¢–µ—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π:\n\n"

    for i, original in enumerate(test_names, 1):
        shortened = shorten_document_name(original)
        response_text += f"{i}. \n"
        response_text += (
            f"üìÑ –ë—ã–ª–æ: {original[:60]}{'...' if len(original) > 60 else ''}\n"
        )
        response_text += f"‚úÇÔ∏è –°—Ç–∞–ª–æ: {shortened}\n\n"

    await message.answer(response_text)


@dp.message(Command("lists_stats"))
async def cmd_lists_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤"""
    if not LISTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        stats = get_lists_stats()

        response_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤:\n\n"
        response_text += f"üìã –°–º–µ–Ω –≤ –±–∞–∑–µ: {stats.get('total_shifts', 0)}\n"
        response_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.get('total_documents', 0)}\n"
        response_text += f"üìö –°–ø–∏—Å–∫–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('student_lists', 0)}\n"
        response_text += (
            f"üîç OCR –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if stats.get('ocr_available', False) else '‚ùå'}\n"
        )

        if stats.get("last_update"):
            response_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}\n"

        response_text += "\nüí° –ö–æ–º–∞–Ω–¥—ã:\n"
        response_text += "‚Ä¢ /test_shorten - —Ç–µ—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π\n"
        response_text += "‚Ä¢ /test_lists_search - —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞\n"
        response_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏' –≤ –º–µ–Ω—é"

        await message.answer(response_text)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∫–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(Command("test_lists_search"))
async def cmd_test_lists_search(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö"""
    if not LISTS_PARSER_AVAILABLE:
        await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
        test_text = """
        –ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á
        –ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞
        –°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π
        –ö–æ–∑–ª–æ–≤ –ò–≥–æ—Ä—å –ü–µ—Ç—Ä–æ–≤–∏—á
        –ü–µ—Ç—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –°—Ç–µ–ø–∞–Ω–æ–≤
        –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
        """

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from lists_parser import ListsParser

        parser = ListsParser()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á"
            "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á" (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞" (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            "–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞"
            "–ò–≤–∞–Ω–æ–≤",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á" –∏ "–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
            "–ü–µ—Ç—Ä",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á" –∏ "–ü–µ—Ç—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –°—Ç–µ–ø–∞–Ω–æ–≤"
            "–°–∏–¥–æ—Ä–æ–≤ –ê–Ω–Ω–∞",  # –ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ (–Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
            "–ö–æ–∑–ª–æ–≤ –ü–µ—Ç—Ä",  # –ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ (–Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
        ]

        response_text = "üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞:\n\n"
        response_text += "üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
        response_text += "‚Ä¢ –ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á\n"
        response_text += "‚Ä¢ –ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞\n"
        response_text += "‚Ä¢ –°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π\n"
        response_text += "‚Ä¢ –ö–æ–∑–ª–æ–≤ –ò–≥–æ—Ä—å –ü–µ—Ç—Ä–æ–≤–∏—á\n"
        response_text += "‚Ä¢ –ü–µ—Ç—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –°—Ç–µ–ø–∞–Ω–æ–≤\n"
        response_text += "‚Ä¢ –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\n\n"

        response_text += "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"

        for query in test_queries:
            query_lower = query.lower()
            query_parts = query_lower.split()

            found, match_info = parser._search_in_text(
                query_lower, query_parts, test_text.lower()
            )

            if found:
                response_text += f"‚úÖ '{query}' ‚Üí {match_info}\n"
            else:
                response_text += f"‚ùå '{query}' ‚Üí –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"

        response_text += "\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫ '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä' –ù–ï –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ '–ò–≤–∞–Ω–æ–≤' –∏–ª–∏ —Ç–æ–ª—å–∫–æ '–ü–µ—Ç—Ä' –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏!"

        await message.answer(response_text)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


@dp.message(Command("test_date_parser"))
async def cmd_test_date_parser(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–∞—Ç"""
    test_dates = [
        "13 —è–Ω–≤–∞—Ä—è 2025 –≥. –≤ 13:34",
        "5 —Ñ–µ–≤—Ä–∞–ª—è 2025",
        "–º–∞—Ä—Ç 2025",
        "–ê–≤–≥—É—Å—Ç–æ–≤—Å–∫–∞—è —Å–º–µ–Ω–∞ 2025",
        "10 –º–∞—è",
        "25 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞",
        "1 –∏—é–Ω—è 2025–≥.",
        "15 —Å–µ–Ω—Ç—è–±—Ä—è",
        "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞",
        "01.02.2025",
        "–∑–∞–≤—Ç—Ä–∞",
        "—á–µ—Ä–µ–∑ 3 –¥–Ω—è",
    ]

    response_text = "üß™ **–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–∞—Ç:**\n\n"
    response_text += "üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º `dateparser` + fallback regex:\n\n"

    for date_str in test_dates:
        try:
            parsed_date = parse_russian_date(date_str)
            if parsed_date:
                formatted = parsed_date.strftime("%d.%m.%Y %H:%M")
                response_text += f"‚úÖ '{date_str}' ‚Üí {formatted}\n"
            else:
                response_text += f"‚ùå '{date_str}' ‚Üí –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ\n"
        except Exception as e:
            response_text += f"‚ö†Ô∏è '{date_str}' ‚Üí –æ—à–∏–±–∫–∞: {str(e)[:30]}\n"

    response_text += "\nüîß **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
    response_text += "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–π (—è–Ω–≤–∞—Ä—å/—è–Ω–≤–∞—Ä—è)\n"
    response_text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ '–≥.' –∏ '–≥–æ–¥–∞'\n"
    response_text += "‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã (–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ N –¥–Ω–µ–π)\n"
    response_text += "‚Ä¢ Fallback –Ω–∞ regex –ø—Ä–∏ —Å–±–æ–µ dateparser\n"
    response_text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"

    await message.answer(response_text)


@dp.message(Command("test_limits"))
async def cmd_test_limits(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API"""
    user_id = message.from_user.id

    response_text = "üõ°Ô∏è **–°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏:**\n\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    if REDIS_AVAILABLE and redis is not None:
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_redis = redis.from_url("redis://localhost", decode_responses=True)
            key = f"user:{user_id}:quota"
            used = await test_redis.get(key) or 0
            ttl = await test_redis.ttl(key)
            await test_redis.aclose()  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è redis.asyncio
            response_text += "üî¥ **Redis:** –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
            response_text += f"üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {used}/50 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            response_text += f"‚è±Ô∏è **–°–±—Ä–æ—Å —á–µ—Ä–µ–∑:** {ttl}—Å\n\n"
        except Exception as e:
            response_text += f"üî¥ **Redis:** –æ—à–∏–±–∫–∞ ({str(e)[:50]})\n\n"
    else:
        response_text += "üî¥ **Redis:** –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)\n\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞—Ñ–æ—Ä LLM
    response_text += f"‚ö° **LLM —Å–µ–º–∞—Ñ–æ—Ä:** {LLM_CONCURRENCY - llm_semaphore._value}/{LLM_CONCURRENCY} –∑–∞–Ω—è—Ç–æ\n\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º middleware
    middleware_info = (
        "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω"
        if any(
            isinstance(m, HourlyLimitMiddleware)
            for m in dp.message.middleware.middlewares
        )
        else "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω"
    )
    response_text += f"üõ°Ô∏è **Middleware:** {middleware_info}\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã
    response_text += "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã:**\n"
    response_text += "‚Ä¢ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 50/—á–∞—Å\n"
    response_text += f"‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö LLM: {LLM_CONCURRENCY}\n"
    response_text += "‚Ä¢ Retry –ø–æ–ø—ã—Ç–∫–∏: 5 (exponential backoff)\n"
    response_text += "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP 429: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è\n\n"

    response_text += "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
    response_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥\n"
    response_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"

    await message.answer(response_text)


@dp.message(Command("rag_status"))
async def cmd_rag_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ RAG —Å–∏—Å—Ç–µ–º"""
    response_text = "üß† **–°—Ç–∞—Ç—É—Å RAG —Å–∏—Å—Ç–µ–º:**\n\n"

    # –ë–∞–∑–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞
    response_text += f"üìñ **–ë–∞–∑–æ–≤–∞—è RAG:** {'‚úÖ –≥–æ—Ç–æ–≤–∞' if rag_system.knowledge_base else '‚ùå –Ω–µ –≥–æ—Ç–æ–≤–∞'}\n"

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞
    if OPTIMIZED_RAG_AVAILABLE and rag_systems_ready["optimized"]:
        stats = optimized_rag.get_stats()
        response_text += f"üöÄ **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG:** ‚úÖ –≥–æ—Ç–æ–≤–∞ ({stats.get('cache_hit_rate', '0%')} cache hit)\n"
    else:
        response_text += f"üöÄ **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG:** {'üîÑ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' if not rag_systems_ready['optimized'] else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"

    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞
    if MODERN_RAG_AVAILABLE and rag_systems_ready["modern"]:
        stats = modern_rag.get_stats()
        response_text += f"üìö **–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG:** ‚úÖ –≥–æ—Ç–æ–≤–∞ ({stats.get('total_documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
    else:
        response_text += f"üìö **–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG:** {'üîÑ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' if not rag_systems_ready['modern'] else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"

    response_text += "\nüìä **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å RAG —Å–∏—Å—Ç–µ–º:**\n"
    response_text += f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è: {'‚úÖ' if rag_system.knowledge_base else '‚ùå'}\n"
    response_text += (
        f"‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {'‚úÖ' if rag_systems_ready['optimized'] else 'üîÑ'}\n"
    )
    response_text += f"‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è: {'‚úÖ' if rag_systems_ready['modern'] else 'üîÑ'}\n"

    response_text += "\nüí° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
    response_text += "1. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)\n"
    response_text += "2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
    response_text += "3. –ë–∞–∑–æ–≤–∞—è RAG (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)\n"

    await message.answer(response_text)


@dp.message(Command("brainstorm_status"))
async def cmd_brainstorm_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
    if BRAINSTORM_AVAILABLE:
        stats = get_brainstorm_stats()
        response_text = "üß† **–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞:**\n\n"
        response_text += "‚úÖ **–î–æ—Å—Ç—É–ø–µ–Ω:** –î–∞\n"
        response_text += f"üìä **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:** {stats['directions_count']}\n"
        response_text += f"üéØ **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** {', '.join(stats['directions'][:5])}{'...' if len(stats['directions']) > 5 else ''}\n\n"
        response_text += "üí° **–ö–æ–º–∞–Ω–¥—ã:**\n"
        response_text += "‚Ä¢ /brainstorm - –∑–∞–ø—É—Å–∫ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞\n"
        response_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π' –≤ –º–µ–Ω—é\n\n"
        response_text += "üîß **–§—É–Ω–∫—Ü–∏–∏:**\n"
        response_text += "‚Ä¢ –í—ã–±–æ—Ä –∏–∑ 15 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±—É—á–µ–Ω–∏—è\n"
        response_text += "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        response_text += "‚Ä¢ –ü–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–¥–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        response_text += "‚Ä¢ –í—ã—Ö–æ–¥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"
    else:
        response_text = "‚ùå **–ú–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
        response_text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        response_text += "‚Ä¢ –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è\n"
        response_text += "‚Ä¢ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á\n"
        response_text += "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"

    await message.answer(response_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
@dp.callback_query(F.data.startswith("rate_"))
async def handle_rating_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    user_id = callback.from_user.id
    data = callback.data.split("_")

    if len(data) >= 3 and data[1].isdigit():
        rating = int(data[1])
        operator_id = int(data[2]) if data[2].isdigit() else None

        if operator_id:
            success = await operator_handler.rate_operator(
                user_id, operator_id, rating, bot
            )
            if success:
                await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}")
                await callback.message.edit_text(
                    callback.message.text + f"\n\n‚úÖ –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}"
                )
            else:
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    elif data[1] == "skip":
        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É
        operator_handler.set_user_status(user_id, UserStatus.NORMAL)
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.callback_query(F.data.startswith("accept_request_"))
async def handle_accept_request_callback(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É)"""
    try:
        logger.info(
            f"üîò Callback –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {callback.from_user.id}: {callback.data}"
        )

        user_id = int(callback.data.split("_")[2])
        operator_id = callback.from_user.id

        logger.info(
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä {operator_id} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
        if not operator_handler.operator_manager.is_operator(operator_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {operator_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        logger.info(
            f"üîÑ –í—ã–∑—ã–≤–∞–µ–º accept_request –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
        success, msg = await operator_handler.accept_request(operator_id, user_id, bot)

        logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç accept_request: success={success}, msg='{msg}'")

        if success:
            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {operator_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ **–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!**\n\n"
                f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {callback.from_user.first_name}\n"
                f"üìû –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"{msg}",
                reply_markup=None,
                parse_mode="Markdown",
            )
            await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!", show_alert=False)
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞: {msg}")
            await callback.message.edit_text(
                f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å**\n\n{msg}",
                reply_markup=None,
                parse_mode="Markdown",
            )
            await callback.answer(f"‚ùå {msg}", show_alert=True)

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}, data: {callback.data}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    except Exception as e:
        logger.error(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ accept_request_callback: {e}", exc_info=True
        )
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query(F.data == "escalate_from_last")
async def handle_escalate_from_last(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    user_id = callback.from_user.id
    try:
        success = await operator_handler.escalate_from_last(user_id, bot)
        if success:
            await callback.message.answer(
                "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
            )
            await callback.answer("–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")
        else:
            await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@dp.callback_query(F.data == "rate_skip")
async def handle_rate_skip(callback: CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É"""
    user_id = callback.from_user.id
    try:
        ok = await operator_handler.skip_rating(user_id, bot)
        if ok:
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            await callback.answer("–°–ø–∞—Å–∏–±–æ!", show_alert=False)
        else:
            await callback.answer("–û—Ü–µ–Ω–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@dp.callback_query(F.data.startswith("rate_"))
async def handle_rate_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = callback.data
    user_id = callback.from_user.id
    try:
        if data == "rate_skip":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º
            await callback.answer()
            return
        parts = data.split("_")
        if len(parts) != 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏", show_alert=True)
            return
        _, rating_str, operator_id_str = parts
        if rating_str not in {"1", "2", "3", "4", "5"}:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞", show_alert=True)
            return
        rating = int(rating_str)
        operator_id = int(operator_id_str)
        ok = await operator_handler.rate_operator(user_id, operator_id, rating, bot)
        if ok:
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", show_alert=False)
        else:
            await callback.answer("–°–µ–π—á–∞—Å –æ—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏", show_alert=True)


@dp.callback_query(F.data.startswith("request_details_"))
async def handle_request_details_callback(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º."""
    try:
        await callback.answer("–ö–Ω–æ–ø–∫–∞ '–î–µ—Ç–∞–ª–∏' –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", show_alert=True)
    except Exception:
        pass


@dp.callback_query(F.data == "queue_status")
async def handle_queue_status_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
    if not operator_handler.operator_manager.is_operator(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    queue_info = operator_handler.get_queue_info()

    status_text = (
        f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤**\n\n"
        f"‚è≥ **–í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è:** {queue_info['waiting_count']}\n"
        f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:** {queue_info['active_sessions']}\n"
        f"üë®‚Äçüíº **–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω:** {queue_info['active_operators']}\n\n"
    )

    if queue_info["queue_details"]:
        status_text += "üìã **–î–µ—Ç–∞–ª–∏ –æ—á–µ—Ä–µ–¥–∏:**\n"
        for i, user_info in enumerate(
            queue_info["queue_details"][:5], 1
        ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status_text += (
                f"{i}. {user_info['first_name']} - "
                f"{user_info['request_time'].strftime('%H:%M')}\n"
            )
        if len(queue_info["queue_details"]) > 5:
            status_text += (
                f"... –∏ –µ—â–µ {len(queue_info['queue_details']) - 5} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            )

    await callback.message.edit_text(status_text, parse_mode="Markdown")
    await callback.answer()


@dp.callback_query(F.data.startswith("refresh_request_"))
async def handle_refresh_request_callback(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        user_id = int(callback.data.split("_")[2])
        operator_id = callback.from_user.id

        if not operator_handler.operator_manager.is_operator(operator_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await operator_handler._notify_available_operators(user_id, bot)
        await callback.answer("üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", show_alert=False)

    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query(F.data == "end_user_session")
async def handle_end_user_session_callback(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user_status = operator_handler.get_user_status(user_id)

    logger.info(f"üîö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")

    if user_status != UserStatus.WITH_OPERATOR:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º", show_alert=True
        )
        return

    success = await operator_handler.end_session(
        user_id, bot, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    )

    if success:
        await callback.message.edit_text(
            "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –≤–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ —Ñ–æ—Ä–º—É –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
            reply_markup=None,
        )
        await callback.answer("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏", show_alert=True)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@dp.callback_query(F.data.startswith("operator_end_session_"))
async def handle_operator_end_session_callback(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    try:
        user_id = int(callback.data.split("_")[3])
        operator_id = callback.from_user.id

        logger.info(
            f"üîö –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç {operator_id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if user_id in operator_handler.active_sessions:
            session = operator_handler.active_sessions[user_id]
            if session.get("operator_id") != operator_id:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è", show_alert=True)
                return
        else:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        success = await operator_handler.end_session(
            user_id, bot, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"
        )

        if success:
            await callback.message.edit_text(
                f"üîö –°–µ—Å—Å–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Ñ–æ—Ä–º—É –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n"
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}",
                reply_markup=None,
            )
            await callback.answer("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info(
                f"‚úÖ –°–µ—Å—Å–∏—è –º–µ–∂–¥—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º {operator_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏", show_alert=True)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º {operator_id}")

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}, data: {callback.data}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
    except Exception as e:
        logger.error(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ operator_end_session_callback: {e}", exc_info=True
        )
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "info_about")
async def handle_info_about(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    info_text = (
        "üéØ **–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫ (–ù–î–¢)**\n"
        "‚Äî —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—â–∏—Ö—Å—è 9‚Äì11 –∫–ª–∞—Å—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å —Ü–µ–ª—å—é —Ä–∞–∑–≤–∏—Ç–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –Ω–∞—É–∫–µ, —Ç–µ—Ö–Ω–∏–∫–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º.\n\n"
        "üöÄ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:**\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º —à–∫–æ–ª—å–Ω–∏–∫–∞–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è.\n\n"
        "üìö **–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞?**\n"
        "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 –¥–Ω–µ–π, –≤–∫–ª—é—á–∞—é—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, —à–∫–æ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—É—é –≤–Ω–µ—É—á–µ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: —ç–∫—Å–∫—É—Ä—Å–∏–∏, –∑–∞–Ω—è—Ç–∏—è –≤ –±–∞—Å—Å–µ–π–Ω–µ, —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –¥—Ä—É–≥–æ\n\n"
        "üîÑ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã:**\n"
        "–£—Å–ø–µ—à–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ ‚Äî –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ª–∏—Ü–µ–∏ –∏ –≤—É–∑—ã –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π."
    )

    await callback.message.edit_text(
        info_text, reply_markup=keyboard, parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(F.data == "info_programs")
async def handle_info_programs(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    info_text = (
        "üìñ **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (15 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π):**\n"
        "–ó–∞–Ω—è—Ç–∏—è –¥–ª—è—Ç—Å—è 72 —á–∞—Å–∞ (6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 4 —á) –≤ –≥—Ä—É–ø–ø–∞—Ö 7‚Äì10 —á–µ–ª–æ–≤–µ–∫.\n\n"
        "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Å –Ω–æ—è–±—Ä—è 2022 –≥.):\n"
        "- –ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω\n"
        "- –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å\n"
        "- –ó–µ–ª—ë–Ω–∞—è —Ö–∏–º–∏—è\n"
        "- –ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è\n"
        "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –õ–∞–∑–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –ú–∞—à–∏–Ω—ã –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–∏, –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "- –ù–∞–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏—è –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "- –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞\n"
        "- –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Å–≤—è–∑—å\n"
        "- –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –±—É–¥—É—â–µ–≥–æ\n\n"
        "üõ† **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–º–µ–Ω–µ:**\n"
        "–£—á–∞—â–∏–µ—Å—è –æ—Å–≤–∞–∏–≤–∞—é—Ç —Ç–µ–æ—Ä–∏—é –∏ –∑–∞—â–∏—â–∞—é—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –∑–∞—Ç–µ–º —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –¥–∞–ª—å—à–µ –æ–Ω–ª–∞–π–Ω –∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö "
    )

    await callback.message.edit_text(
        info_text, reply_markup=keyboard, parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(F.data == "info_admission")
async def handle_info_admission(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    info_text = (
        "üì• **–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫**\n"
        "–û—Ç–±–æ—Ä –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ 2 —ç—Ç–∞–ø–∞: –∑–∞–æ—á–Ω—ã–π (–æ–Ω–ª–∞–π–Ω) –∏ –æ—á–Ω—ã–π (–≤ –æ–±–ª–∞—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è).\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîπ **–≠—Ç–∞–ø 1. –ó–∞–æ—á–Ω—ã–π (–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π)**\n"
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫—É.\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –∏/–∏–ª–∏ –¥–∏–ø–ª–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö, —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏—Ö, –æ–±–ª–∞—Å—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n"
        "**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–º–∞–∫—Å. 30 –±–∞–ª–ª–æ–≤):**\n"
        "- üìå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî 0‚Äì2 –±.\n"
        "- üìå –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –¥–æ 6 –±. (–∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏–¥–µ–∏ ‚Äî 0‚Äì3, –Ω–∞—É—á–Ω–∞—è –Ω–æ–≤–∏–∑–Ω–∞ ‚Äî 0‚Äì3).\n"
        "- üìå –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –¥–æ 6 –±.\n"
        "- üìå –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ‚Äî –¥–æ 8 –±. (–≤—ã–≤–æ–¥—ã, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ª–∏—á–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è).\n"
        "- üìå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî –¥–æ 8 –±. (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç, –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Ä–∏—Å—É–Ω–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã).\n\n"
        "‚ö† –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîπ **–≠—Ç–∞–ø 2. –û—á–Ω—ã–π**\n"
        "–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "1. **–¢–µ—Å—Ç** (–ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–æ 9 –∫–ª–∞—Å—Å–∞):\n"
        "   - –û–±—â–∞—è —Ñ–∏–∑–∏–∫–∞  \n"
        "   - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n"
        "   - –õ–æ–≥–∏–∫–∞  \n"
        "   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ  \n"
        "   - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏  \n"
        "   **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–∞:**\n"
        "     - –ë–ª–æ–∫ –ê ‚Äî 30 –≤–æ–ø—Ä–æ—Å–æ–≤ √ó 1 –±–∞–ª–ª.\n"
        "     - –ë–ª–æ–∫ –ë ‚Äî 10 –≤–æ–ø—Ä–æ—Å–æ–≤ √ó 2 –±–∞–ª–ª–∞.\n"
        "   –ù–∞ –∫–∞–∂–¥—É—é —Å–º–µ–Ω—É –≥–æ—Ç–æ–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π —Ç–µ—Å—Ç. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ —É—á–∏—Ç—å—Å—è –≤ —à–∫–æ–ª–µ –∏ –∏–º–µ—Ç—å —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥–æ–∑–æ—Ä.\n\n"
        "2. **–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ**  \n"
        "   –¶–µ–ª—å ‚Äî –≤—ã—è–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.  \n"
        "   –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "   - –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –¥–∏–ø–ª–æ–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ 1 —ç—Ç–∞–ø–µ.\n"
        "   - –°—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ö–æ–¥ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º.\n"
        "   - –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üìú **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ø–æ –∏—Ç–æ–≥–∞–º 2 —ç—Ç–∞–ø–æ–≤ –ø—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–∞–∑–µ –≤ —É—á–∞—Å—Ç–∏–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω–µ."
    )

    await callback.message.edit_text(
        info_text, reply_markup=keyboard, parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã


@dp.callback_query(F.data == "request_consultant")
async def handle_request_consultant(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É"""
    user_id = callback.from_user.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    success = await operator_handler.escalate_to_operator(
        user_id, callback.message, auto_escalation=False, bot=bot
    )

    if success:
        await state.set_state(OperatorState.WAITING_OPERATOR)
        queue_info = operator_handler.get_queue_info()
        position = len(
            [u for u in queue_info["queue_details"] if u["user_id"] == user_id]
        )

        await callback.message.edit_text(
            "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
            f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
            "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
        )
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")
    else:
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True
        )


@dp.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞!\n\n"
        "ü§ñ –Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard_rows = [
        [
            InlineKeyboardButton(text="üè´ –û —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ", callback_data="info_about"),
            InlineKeyboardButton(
                text="üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", callback_data="info_programs"
            ),
        ],
        [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="info_admission")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    if CALENDAR_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω", callback_data="show_calendar"
                )
            ]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    if LISTS_PARSER_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="check_lists"
                )
            ]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–≤–∏–∑–∞, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    if QUIZ_AVAILABLE:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="start_quiz"
                )
            ]
        )

    keyboard_rows.append(
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                callback_data="request_consultant",
            )
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–≤–∏–∑–∞
@dp.callback_query(F.data == "start_quiz")
async def handle_start_quiz(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ —á–µ—Ä–µ–∑ callback"""
    if not QUIZ_AVAILABLE:
        await callback.answer("‚ùå –ö–≤–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    try:
        await quiz_start_callback(callback, state)
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤
@dp.callback_query(F.data == "check_lists")
async def handle_check_lists(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤"""
    if not LISTS_PARSER_AVAILABLE:
        await callback.answer(
            "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True
        )
        return

    try:
        await state.set_state(UserState.SEARCHING_LISTS)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞\n\n"
            "üí° –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ –û–¥–Ω–æ —Å–ª–æ–≤–æ ‚Üí –Ω–∞–π–¥–µ—Ç –ª—é–±—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n"
            "‚Ä¢ –î–≤–∞ —Å–ª–æ–≤–∞ ‚Üí –Ω–∞–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–ò–º—è –§–∞–º–∏–ª–∏—è ‚Üî –§–∞–º–∏–ª–∏—è –ò–º—è)\n\n"
            "‚ö†Ô∏è '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä' –ù–ï –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ '–ò–≤–∞–Ω–æ–≤' –∏–ª–∏ —Ç–æ–ª—å–∫–æ '–ü–µ—Ç—Ä'\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=keyboard,
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞", show_alert=True)


def shorten_document_name(doc_name: str) -> str:
    """–£–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not doc_name:
        return "–î–æ–∫—É–º–µ–Ω—Ç"

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    doc_name = doc_name.strip()

    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    replacements = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã": "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã",
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤": "–°–ø–∏—Å–æ–∫",
        "—Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": "—É—á–∞—Å—Ç–Ω–∏–∫–∏",
        "—Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã": "–≥—Ä—É–ø–ø–∞",
        # –≠—Ç–∞–ø—ã –æ—Ç–±–æ—Ä–∞
        "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞ —É—á–∞—â–∏—Ö—Å—è": "2 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞ —É—á–∞—â–∏—Ö—Å—è": "1 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞": "2 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞": "1 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "–≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞": "2 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "–ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞": "1 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "—ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞": "—ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞",
        "–∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É": "2 —ç—Ç–∞–ø",
        "–∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É": "1 —ç—Ç–∞–ø",
        # –û–±—É—á–µ–Ω–∏–µ
        "–¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ": "",
        "–≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ": "",
        "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ": "—Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ",
        "—É—á–∞—â–∏—Ö—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è": "—É—á–∞—â–∏—Ö—Å—è",
        "–¥–ª—è –æ–±—É—á–µ–Ω–∏—è": "",
        # –°—Ç–∞—Ç—É—Å—ã
        "–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ –£–û": "–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ",
        "–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö": "–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ",
        "–ø—Ä–∏–Ω—è—Ç—ã—Ö": "–ø—Ä–∏–Ω—è—Ç—ã–µ",
        "–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö": "–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ",
        "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö": "–¥–æ–ø—É—â–µ–Ω–Ω—ã–µ",
        "–ø—Ä–æ—à–µ–¥—à–∏—Ö": "–ø—Ä–æ—à–µ–¥—à–∏–µ",
        "–ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö": "–ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ",
        # –ì—Ä—É–ø–ø—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        "–≥—Ä—É–ø–ø—ã —É—á–∞—â–∏—Ö—Å—è": "–≥—Ä—É–ø–ø–∞",
        "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã": "–≥—Ä—É–ø–ø–∞",
        "—É—á–∞—â–∏—Ö—Å—è –≥—Ä—É–ø–ø—ã": "–≥—Ä—É–ø–ø–∞",
        "–≥—Ä—É–ø–ø—ã –ê": "–≥—Ä—É–ø–ø–∞ –ê",
        "–≥—Ä—É–ø–ø—ã –ë": "–≥—Ä—É–ø–ø–∞ –ë",
        "–≥—Ä—É–ø–ø—ã –í": "–≥—Ä—É–ø–ø–∞ –í",
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Ç–æ–≥–∏
        "–∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞": "–∏—Ç–æ–≥–∏",
        "—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞": "—Ñ–∏–Ω–∞–ª",
        "–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞": "—Ñ–∏–Ω–∞–ª",
        "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞": "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç.",
        "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞": "–ø—Ä–æ–º–µ–∂—É—Ç.",
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    result = doc_name
    for old, new in replacements.items():
        result = result.replace(old, new)

    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å –î–î.–ú–ú.–ì–ì–ì–ì –ø–æ –î–î.–ú–ú.–ì–ì–ì–ì"
    import re

    result = re.sub(
        r"\s*—Å\s+\d{2}\.\d{2}\.\d{4}–≥?\.\s*–ø–æ\s+\d{2}\.\d{2}\.\d{4}–≥?\.\s*", "", result
    )
    result = re.sub(
        r"\s*\d{2}\.\d{2}\.\d{4}–≥?\.\s*-\s*\d{2}\.\d{2}\.\d{4}–≥?\.\s*", "", result
    )

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏
    result = re.sub(r"\s+", " ", result)
    result = result.strip(" .,")

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    result_lower = result.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if "2 —ç—Ç–∞–ø" in result_lower or (
        "–≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É" in result_lower and "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö" in result_lower
    ):
        result = "–ü—Ä–æ—à–µ–¥—à–∏–µ 1 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞"
    elif "1 —ç—Ç–∞–ø" in result_lower or (
        "–ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É" in result_lower and "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö" in result_lower
    ):
        result = "–ü—Ä–æ—à–µ–¥—à–∏–µ 1 —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞"
    elif "–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ" in result_lower or "–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö" in result_lower:
        result = "–ó–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
    elif "–¥–æ–ø—É—â–µ–Ω–Ω—ã–µ" in result_lower or "–¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö" in result_lower:
        result = "–î–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É—á–∞—Å—Ç–∏—é"
    elif "–∏—Ç–æ–≥–∏" in result_lower or "–∏—Ç–æ–≥–æ–≤–æ–≥–æ" in result_lower:
        result = "–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫"
    elif "—Ñ–∏–Ω–∞–ª" in result_lower or "—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ" in result_lower:
        result = "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    elif "–≥—Ä—É–ø–ø–∞ –∞" in result_lower:
        result = "–ì—Ä—É–ø–ø–∞ –ê"
    elif "–≥—Ä—É–ø–ø–∞ –±" in result_lower:
        result = "–ì—Ä—É–ø–ø–∞ –ë"
    elif "–≥—Ä—É–ø–ø–∞ –≤" in result_lower:
        result = "–ì—Ä—É–ø–ø–∞ –í"
    elif "–≥—Ä—É–ø–ø–∞" in result_lower:
        result = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã"
    elif "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" in result_lower:
        result = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    elif "—Å–ø–∏—Å–æ–∫" in result_lower:
        result = "–û–±—â–∏–π —Å–ø–∏—Å–æ–∫"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(result) > 45:
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º –∏ –±–µ—Ä–µ–º –≤–∞–∂–Ω—ã–µ
        words = result.split()
        if len(words) > 3:
            result = " ".join(words[:3]) + "..."
        else:
            result = result[:42] + "..."

    return result if result else "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"


async def handle_lists_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        query = message.text.strip()

        if not query:
            await message.answer(
                "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
                "üìù –ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_message = await message.answer(
            f"üîç –ü–æ–∏—Å–∫: {query}\n\n–ü—Ä–æ–≤–µ—Ä—è—é —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await search_name_in_lists(query, search_type="student_lists")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not results:
            response_text = (
                f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: '{query}'\n\n"
                "üîç –í —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏–º–µ–Ω–∏", callback_data="check_lists"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                            callback_data="request_consultant",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"
                        )
                    ],
                ]
            )
        else:
            response_text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n\n"
            response_text += f"üë§ –ü–æ–∏—Å–∫: {query}\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–º–µ–Ω–∞–º
            shifts_data = {}
            for result in results:
                shift_name = result["shift"]
                if shift_name not in shifts_data:
                    shifts_data[shift_name] = []
                shifts_data[shift_name].append(result)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –≥–æ–¥—É (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            def extract_year_from_shift(shift_name):
                import re

                # –ò—â–µ–º –≥–æ–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–º–µ–Ω—ã
                year_match = re.search(r"20\d{2}", shift_name)
                if year_match:
                    return int(year_match.group())

                # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
                months_order = {
                    "—è–Ω–≤–∞—Ä—å": 1,
                    "—Ñ–µ–≤—Ä–∞–ª—å": 2,
                    "–º–∞—Ä—Ç": 3,
                    "–∞–ø—Ä–µ–ª—å": 4,
                    "–º–∞–π": 5,
                    "–∏—é–Ω—å": 6,
                    "–∏—é–ª—å": 7,
                    "–∞–≤–≥—É—Å—Ç": 8,
                    "—Å–µ–Ω—Ç—è–±—Ä—å": 9,
                    "–æ–∫—Ç—è–±—Ä—å": 10,
                    "–Ω–æ—è–±—Ä—å": 11,
                    "–¥–µ–∫–∞–±—Ä—å": 12,
                }

                shift_lower = shift_name.lower()
                for month, order in months_order.items():
                    if month in shift_lower:
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                        from datetime import datetime

                        current_year = datetime.now().year
                        return (
                            current_year * 100 + order
                        )  # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

                return 0  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É/–º–µ—Å—è—Ü—É (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            sorted_shifts = sorted(
                shifts_data.items(),
                key=lambda x: extract_year_from_shift(x[0]),
                reverse=True,
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
            for i, (shift_name, shift_results) in enumerate(sorted_shifts, 1):
                response_text += f"üìã {shift_name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                unique_docs = set()
                for result in shift_results:
                    doc_name = result["document"]
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
                    short_name = shorten_document_name(doc_name)
                    unique_docs.add(short_name)

                for doc in sorted(unique_docs):
                    response_text += f"   ‚úì {doc}\n"

                response_text += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            response_text += "üí° –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞\n"

            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ, –æ–±—Ä–µ–∑–∞–µ–º
            if len(response_text) > 3500:
                response_text = (
                    response_text[:3500] + "\n\nüìÑ *–ü–æ–∫–∞–∑–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã*"
                )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏–º–µ–Ω–∏", callback_data="check_lists"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"
                        )
                    ],
                ]
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await search_message.edit_text(response_text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö: {e}")
        await message.answer(
            "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                            callback_data="request_consultant",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"
                        )
                    ],
                ]
            ),
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–º–µ–Ω
@dp.callback_query(F.data == "show_calendar")
async def handle_show_calendar(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω"""
    if not CALENDAR_AVAILABLE:
        await callback.answer("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    try:
        user_id = callback.from_user.id
        text, keyboard = get_calendar_interface(user_id)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", show_alert=True)


@dp.callback_query(F.data.startswith("calendar_shift_"))
async def handle_calendar_shift(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω–µ"""
    if not CALENDAR_AVAILABLE:
        await callback.answer("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    try:
        month_number = int(callback.data.split("_")[2])
        text, keyboard = await get_shift_info(month_number)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@dp.callback_query(F.data == "back_to_calendar")
async def handle_back_to_calendar(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Å–º–µ–Ω"""
    if not CALENDAR_AVAILABLE:
        await callback.answer("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    try:
        user_id = callback.from_user.id
        text, keyboard = get_calendar_interface(user_id)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(F.data == "notification_settings")
async def handle_notification_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not CALENDAR_AVAILABLE or not NOTIFICATIONS_AVAILABLE:
        await callback.answer(
            "‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True
        )
        return

    try:
        user_id = callback.from_user.id
        text, keyboard = get_notification_settings_interface(user_id)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@dp.callback_query(F.data.startswith("toggle_notification_"))
async def handle_toggle_notification(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if not NOTIFICATIONS_AVAILABLE:
        await callback.answer(
            "‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True
        )
        return

    try:
        user_id = callback.from_user.id
        notification_type = callback.data.replace("toggle_notification_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = notification_system.is_subscribed(user_id, notification_type)

        if is_subscribed:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            success = notification_system.unsubscribe_user(user_id, notification_type)
            if success:
                await callback.answer("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                logger.info(
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {notification_type}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏", show_alert=True)
        else:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            success = notification_system.subscribe_user(user_id, notification_type)
            if success:
                await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                logger.info(
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {notification_type}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        text, keyboard = get_notification_settings_interface(user_id)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
async def deadline_checker_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
    while True:
        try:
            if NOTIFICATIONS_AVAILABLE:
                await notification_system.check_application_deadlines()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                await asyncio.sleep(6 * 60 * 60)
            else:
                # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(30 * 60)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
            await asyncio.sleep(60 * 60)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ù–ê–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –î–ï–¢–°–ö–û–ì–û –¢–ï–•–ù–û–ü–ê–†–ö–ê")
    print("=" * 60)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞...")
    logger.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é RAG —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±—ã—Å—Ç—Ä–æ)
    rag_system.load_knowledge_base()
    logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG —Å–∏—Å—Ç–µ–º –≤ —Ñ–æ–Ω–µ
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º...")

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º
    rag_tasks = []

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é RAG —Å–∏—Å—Ç–µ–º—É
    try:
        rag_tasks.append(asyncio.create_task(init_optimized_rag()))
        logger.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é RAG —Å–∏—Å—Ç–µ–º—É
    try:
        rag_tasks.append(asyncio.create_task(init_modern_rag()))
        logger.info("üìö –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG: {e}")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º
    async def monitor_rag_systems():
        while True:
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            ready_systems = [k for k, v in rag_systems_ready.items() if v]
            if ready_systems:
                logger.info(f"‚úÖ –ì–æ—Ç–æ–≤—ã–µ RAG —Å–∏—Å—Ç–µ–º—ã: {', '.join(ready_systems)}")

            # –ï—Å–ª–∏ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if all(rag_systems_ready.values()):
                logger.info("üéâ –í—Å–µ RAG —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
                break

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RAG —Å–∏—Å—Ç–µ–º
    if rag_tasks:
        asyncio.create_task(monitor_rag_systems())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if NOTIFICATIONS_AVAILABLE:
        try:
            notification_system.set_bot(bot)
            logger.info("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤
            asyncio.create_task(deadline_checker_loop())
            logger.info("‚è∞ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    logger.info("üìÖ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    try:
        # –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await force_update_schedule()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        asyncio.create_task(schedule_updater_loop(interval_hours=6))
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if DOCUMENTS_PARSER_AVAILABLE:
        logger.info("üìÑ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        try:
            # –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            await force_update_documents()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            asyncio.create_task(documents_updater_loop(interval_hours=24))
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤
    if LISTS_PARSER_AVAILABLE:
        logger.info("üìã –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–æ–≤...")
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤
            success = await initialize_lists_parser()
            if success:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤: {e}")
    else:
        logger.warning("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    # –ö–≤–∏–∑ –º–æ–¥—É–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    if QUIZ_AVAILABLE:
        logger.info("‚úÖ –ö–≤–∏–∑ –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning("‚ö†Ô∏è –ö–≤–∏–∑ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
    global BRAINSTORM_AVAILABLE
    if BRAINSTORM_AVAILABLE:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –¥–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
            init_brainstorm_llm(DEEPSEEK_API_KEY)
            logger.info("‚úÖ –ú–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞: {e}")
            BRAINSTORM_AVAILABLE = False
    else:
        logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    print("=" * 60)
    print("‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
    print("=" * 60)

    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üì° –ù–∞—á–∏–Ω–∞–µ–º polling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
