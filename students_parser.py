import aiohttp
import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from bs4 import BeautifulSoup
import os
import re

logger = logging.getLogger(__name__)

class StudentsParser:
    """–ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞"""
    
    # 15 –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ù–î–¢–ü
    EDUCATIONAL_DIRECTIONS = [
        "–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω", 
        "–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
        "–ó–µ–ª—ë–Ω–∞—è —Ö–∏–º–∏—è",
        "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–õ–∞–∑–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–ú–∞—à–∏–Ω—ã –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–∏. –ê–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ",
        "–ù–∞–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏—è –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
        "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
        "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Å–≤—è–∑—å",
        "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –±—É–¥—É—â–µ–≥–æ"
    ]
    
    def __init__(self):
        self.url = "https://ndtp.by/schedule/"
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        self.students_file = "students_list.json"
        self.last_update_file = "last_students_update.txt"
        self.base_url = "https://ndtp.by"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —É—á–∞—â–∏—Ö—Å—è
        self.additional_urls = [
            "https://ndtp.by/for_incoming_students/",
            "https://ndtp.by/educational-shifts/",
            "https://ndtp.by/students/"
        ]
        
    async def fetch_page(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—â–∏—Ö—Å—è"""
        try:
            logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ {self.url}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url, headers=self.headers, timeout=30) as response:
                    if response.status == 200:
                        content = await response.text()
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—á–∞—â–∏—Ö—Å—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        return content
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—â–∏—Ö—Å—è: HTTP {response.status}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—â–∏—Ö—Å—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—â–∏—Ö—Å—è: {e}")
        
        return None
    
    def parse_students_list(self, html_content: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            
            students_info = {
                "title": "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ù–î–¢–ü",
                "students": [],
                "total_count": 0,
                "last_updated": datetime.now().isoformat(),
                "source_url": self.url
            }
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ —É—á–∞—â–∏—Ö—Å—è
            tables = soup.find_all('table')
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            for table_idx, table in enumerate(tables):
                try:
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    table_title = self._get_table_title(table)
                    
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    rows = table.find_all('tr')
                    logger.info(f"üìã –¢–∞–±–ª–∏—Ü–∞ {table_idx + 1}: {len(rows)} —Å—Ç—Ä–æ–∫")
                    
                    table_students = []
                    
                    for row_idx, row in enumerate(rows):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        if row_idx == 0 and self._is_header_row(row):
                            continue
                        
                        student_data = self._parse_student_row(row, table_title)
                        if student_data:
                            table_students.append(student_data)
                    
                    if table_students:
                        students_info["students"].extend(table_students)
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —É—á–∞—â–∏—Ö—Å—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_idx + 1}: {len(table_students)}")
                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_idx + 1}: {e}")
                    continue
            
            # –¢–∞–∫–∂–µ –∏—â–µ–º —Å–ø–∏—Å–∫–∏ —É—á–∞—â–∏—Ö—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            self._parse_students_from_lists(soup, students_info)
            
            # –ò—â–µ–º —É—á–∞—â–∏—Ö—Å—è –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö –∏ div'–∞—Ö
            self._parse_students_from_text(soup, students_info)
            
            students_info["total_count"] = len(students_info["students"])
            logger.info(f"üéØ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—á–∞—â–∏—Ö—Å—è: {students_info['total_count']}")
            
            return students_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è: {e}")
            return {
                "title": "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ù–î–¢–ü", 
                "students": [],
                "total_count": 0,
                "last_updated": datetime.now().isoformat(),
                "source_url": self.url,
                "error": str(e)
            }
    
    def _get_table_title(self, table) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
        prev_sibling = table.find_previous_sibling(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
        if prev_sibling:
            title = prev_sibling.get_text(strip=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in title.lower():
                return title
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 15 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ù–î–¢–ü
            for direction in self.EDUCATIONAL_DIRECTIONS:
                if direction.lower() in title.lower():
                    return f'–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ¬´{direction}¬ª'
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã
        caption = table.find('caption')
        if caption:
            caption_text = caption.get_text(strip=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã
            for direction in self.EDUCATIONAL_DIRECTIONS:
                if direction.lower() in caption_text.lower():
                    return f'–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ¬´{direction}¬ª'
            return caption_text
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        parent = table.find_parent(['div', 'section'])
        if parent:
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            headers = parent.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
            for header in headers:
                title = header.get_text(strip=True)
                if '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in title.lower():
                    return title
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                for direction in self.EDUCATIONAL_DIRECTIONS:
                    if direction.lower() in title.lower():
                        return f'–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ¬´{direction}¬ª'
        
        return "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è"
    
    def _is_header_row(self, row) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–∞–±–ª–∏—Ü—ã"""
        cells = row.find_all(['th', 'td'])
        for cell in cells:
            text = cell.get_text(strip=True).lower()
            if any(keyword in text for keyword in ['‚Ññ', '–Ω–æ–º–µ—Ä', '—Ñ–∞–º–∏–ª–∏—è', '–∏–º—è', '–æ—Ç—á–µ—Å—Ç–≤–æ', '–≥—Ä—É–ø–ø–∞', '–∫–ª–∞—Å—Å']):
                return True
        return False
    
    def _parse_student_row(self, row, table_title: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—â–µ–≥–æ—Å—è"""
        try:
            cells = row.find_all(['td', 'th'])
            if len(cells) < 2:  # –ú–∏–Ω–∏–º—É–º –Ω–æ–º–µ—Ä –∏ —Ñ–∞–º–∏–ª–∏—è
                return None
            
            student_data = {
                "table_title": table_title,
                "row_number": None,
                "full_name": "",
                "group": "",
                "class": "",
                "additional_info": ""
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è—á–µ–π–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ù–î–¢–ü
            for i, cell in enumerate(cells):
                cell_text = cell.get_text(strip=True)
                if not cell_text:
                    continue
                
                if i == 0:  # –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ - –Ω–æ–º–µ—Ä –ø/–ø
                    try:
                        student_data["row_number"] = int(cell_text)
                    except ValueError:
                        student_data["row_number"] = cell_text
                
                elif i == 1:  # –í—Ç–æ—Ä–∞—è —è—á–µ–π–∫–∞ - –§–ò–û
                    student_data["full_name"] = cell_text
                
                elif i == 2:  # –¢—Ä–µ—Ç—å—è —è—á–µ–π–∫–∞ - –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                    student_data["additional_info"] = cell_text
                
                else:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏
                    if not student_data["additional_info"]:
                        student_data["additional_info"] = cell_text
                    else:
                        student_data["additional_info"] += f" {cell_text}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∏–º—è
            if not student_data["full_name"]:
                return None
            
            return student_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —É—á–∞—â–µ–≥–æ—Å—è: {e}")
            return None
    
    def _parse_students_from_lists(self, soup, students_info: Dict):
        """–ü–∞—Ä—Å–∏—Ç —É—á–∞—â–∏—Ö—Å—è –∏–∑ —Å–ø–∏—Å–∫–æ–≤ (ul, ol)"""
        try:
            lists = soup.find_all(['ul', 'ol'])
            
            for list_elem in lists:
                # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
                list_title = self._get_list_title(list_elem)
                
                for li in list_elem.find_all('li', recursive=False):
                    student_text = li.get_text(strip=True)
                    if len(student_text) < 3:
                        continue
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—â–µ–º—Å—è
                    student_data = self._extract_student_from_text(student_text, list_title)
                    if student_data:
                        students_info["students"].append(student_data)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–∞—â–∏—Ö—Å—è –∏–∑ —Å–ø–∏—Å–∫–æ–≤: {e}")
    
    def _get_list_title(self, list_elem) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞"""
        prev_sibling = list_elem.find_previous_sibling(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
        if prev_sibling:
            return prev_sibling.get_text(strip=True)
        return "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è"
    
    def _parse_students_from_text(self, soup, students_info: Dict):
        """–ü–∞—Ä—Å–∏—Ç —É—á–∞—â–∏—Ö—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤"""
        try:
            # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –∏–º–µ–Ω–∞–º–∏ —É—á–∞—â–∏—Ö—Å—è
            paragraphs = soup.find_all('p')
            
            for p in paragraphs:
                text = p.get_text(strip=True)
                if len(text) < 5:
                    continue
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                lines = [line.strip() for line in text.split('\n') if line.strip()]
                
                for line in lines:
                    if len(line) < 3:
                        continue
                    
                    student_data = self._extract_student_from_text(line, "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è")
                    if student_data:
                        students_info["students"].append(student_data)
            
            # –ò—â–µ–º —É—á–∞—â–∏—Ö—Å—è –≤ div'–∞—Ö —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
            student_divs = soup.find_all('div', class_=lambda x: x and any(keyword in x.lower() for keyword in ['student', '—É—á–∞—â–∏–π—Å—è', '—Å–ø–∏—Å–æ–∫', 'list']))
            
            for div in student_divs:
                text = div.get_text(strip=True)
                if len(text) < 5:
                    continue
                
                lines = [line.strip() for line in text.split('\n') if line.strip()]
                
                for line in lines:
                    if len(line) < 3:
                        continue
                    
                    student_data = self._extract_student_from_text(line, "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è")
                    if student_data:
                        students_info["students"].append(student_data)
            
            # –ò—â–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            headers = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
            current_direction = "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è"
            
            for header in headers:
                title = header.get_text(strip=True)
                if '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in title.lower():
                    current_direction = title
                    logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {title}")
                    
                    # –ò—â–µ–º —É—á–∞—â–∏—Ö—Å—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    next_elements = header.find_all_next(['p', 'div', 'table'])
                    for element in next_elements[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
                        if element.name == 'table':
                            break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                        
                        text = element.get_text(strip=True)
                        if len(text) < 5:
                            continue
                        
                        lines = [line.strip() for line in text.split('\n') if line.strip()]
                        
                        for line in lines:
                            if len(line) < 3:
                                continue
                            
                            student_data = self._extract_student_from_text(line, current_direction)
                            if student_data:
                                students_info["students"].append(student_data)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–∞—â–∏—Ö—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
    
    def _extract_student_from_text(self, text: str, source: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—â–µ–º—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            text = re.sub(r'^\d+\.?\s*', '', text.strip())
            
            if len(text) < 3:
                return None
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –º–µ–Ω—é
            exclude_keywords = [
                '–æ–Ω–ª–∞–π–Ω –∑–∞—è–≤–∫–∞', '–Ω–∞—É—á–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ', '–ª—å–≥–æ—Ç—ã –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤',
                '–∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã', '–ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞',
                '–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç', '—Å–º–∏ –æ –Ω–∞—Å', '–æ–¥–Ω–æ –æ–∫–Ω–æ',
                '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–æ—Ç–¥–µ–ª—ã', '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–∏—Å—Ç–æ—Ä–∏—è –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏', '–ø—Ä–æ—Ñ—Å–æ—é–∑',
                '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã', '–æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–º–µ–Ω–∞—Ö', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                '–∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–º–µ–Ω', '–¥–ª—è –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö',
                '–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–ø—É–ª –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', '—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
                '–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º', '—Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã', '–Ω–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                '–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–≤—ã—Å—Ç–∞–≤–æ—á–Ω–∞—è –∏ —ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                '–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏ —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'juniorskills',
                '–∏—Ü–∞—ç', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Å–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø —É—á–∞—â–∏—Ö—Å—è',
                '–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', '–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫',
                '–æ–±—É—á–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã'
            ]
            
            text_lower = text.lower()
            for keyword in exclude_keywords:
                if keyword in text_lower:
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –±—É–∫–≤—ã)
            if not re.search(r'[–∞-—è—ë]', text, re.IGNORECASE):
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
            if len(text) > 150:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in text_lower:
                return None
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
            parts = text.split()
            if len(parts) < 2:
                return None
            
            student_data = {
                "table_title": source,
                "row_number": None,
                "full_name": text,
                "group": "",
                "class": "",
                "additional_info": ""
            }
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä
            if re.match(r'^\d+', text):
                match = re.match(r'^(\d+)\.?\s*(.+)', text)
                if match:
                    try:
                        student_data["row_number"] = int(match.group(1))
                        student_data["full_name"] = match.group(2)
                    except ValueError:
                        pass
            
            return student_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—á–∞—â–µ–≥–æ—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def save_students_cache(self, students_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –≤ –∫—ç—à"""
        try:
            with open(self.students_file, 'w', encoding='utf-8') as f:
                json.dump(students_data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            with open(self.last_update_file, 'w', encoding='utf-8') as f:
                f.write(datetime.now().isoformat())
            
            logger.info(f"üíæ –°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à ({len(students_data.get('students', []))} –∑–∞–ø–∏—Å–µ–π)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —É—á–∞—â–∏—Ö—Å—è: {e}")
            return False
    
    def load_students_cache(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –∏–∑ –∫—ç—à–∞"""
        try:
            if os.path.exists(self.students_file):
                with open(self.students_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —É—á–∞—â–∏—Ö—Å—è: {e}")
        
        return None
    
    def get_last_update_time(self) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if os.path.exists(self.last_update_file):
                with open(self.last_update_file, 'r', encoding='utf-8') as f:
                    timestamp = f.read().strip()
                    return datetime.fromisoformat(timestamp)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        return None
    
    def should_update(self, hours_threshold: int = 24) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        last_update = self.get_last_update_time()
        if not last_update:
            return True
        
        time_diff = datetime.now() - last_update
        return time_diff.total_seconds() > hours_threshold * 3600
    
    async def update_students(self, force: bool = False) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è"""
        try:
            if not force and not self.should_update():
                logger.info("üìã –ö—ç—à —É—á–∞—â–∏—Ö—Å—è –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return True
            
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è...")
            
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            html_content = await self.fetch_page()
            if html_content:
                students_data = self.parse_students_list(html_content)
            else:
                students_data = {
                    "title": "–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ù–î–¢–ü",
                    "students": [],
                    "total_count": 0,
                    "last_updated": datetime.now().isoformat(),
                    "source_url": self.url
                }
            
            # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for url in self.additional_urls:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ —É—á–∞—â–∏—Ö—Å—è –Ω–∞ {url}")
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, headers=self.headers, timeout=10) as response:
                            if response.status == 200:
                                content = await response.text()
                                additional_data = self.parse_students_list(content)
                                if additional_data and additional_data.get('students'):
                                    students_data['students'].extend(additional_data['students'])
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(additional_data['students'])} —É—á–∞—â–∏—Ö—Å—è –Ω–∞ {url}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
                    continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            students_data["total_count"] = len(students_data["students"])
            students_data["last_updated"] = datetime.now().isoformat()
            
            if students_data["total_count"] == 0:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—â–∏—Ö—Å—è –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
                return False
            
            success = self.save_students_cache(students_data)
            if success:
                logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ({students_data.get('total_count', 0)} –∑–∞–ø–∏—Å–µ–π)")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è: {e}")
            return False
    
    def get_students_context(self, query: str = "") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Å–ø–∏—Å–∫–µ —É—á–∞—â–∏—Ö—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            students_data = self.load_students_cache()
            if not students_data:
                return "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–ø–∏—Å–∫–µ —É—á–∞—â–∏—Ö—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
            
            students = students_data.get('students', [])
            total_count = students_data.get('total_count', 0)
            last_updated = students_data.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            if not students:
                return "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìã **–°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ù–î–¢–ü**\n\n"
            response += f"–í—Å–µ–≥–æ —É—á–∞—â–∏—Ö—Å—è: {total_count}\n"
            response += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}\n\n"
            
            if query:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
                filtered_students = []
                query_lower = query.lower()
                
                for student in students:
                    full_name = student.get('full_name', '').lower()
                    group = student.get('group', '').lower()
                    
                    if query_lower in full_name or query_lower in group:
                        filtered_students.append(student)
                
                if filtered_students:
                    response += f"–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {len(filtered_students)}\n\n"
                    for i, student in enumerate(filtered_students[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        response += self._format_student_info(student, i)
                    
                    if len(filtered_students) > 20:
                        response += f"\n... –∏ –µ—â–µ {len(filtered_students) - 20} –∑–∞–ø–∏—Å–µ–π"
                else:
                    response += f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —É—á–∞—â–∏—Ö—Å—è
                response += "–ü–µ—Ä–≤—ã–µ 20 —É—á–∞—â–∏—Ö—Å—è:\n\n"
                for i, student in enumerate(students[:20], 1):
                    response += self._format_student_info(student, i)
                
                if len(students) > 20:
                    response += f"\n... –∏ –µ—â–µ {len(students) - 20} —É—á–∞—â–∏—Ö—Å—è"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—á–∞—â–∏—Ö—Å—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è."
    
    def _format_student_info(self, student: Dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—â–µ–º—Å—è"""
        row_num = student.get('row_number', '')
        name = student.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        group = student.get('group', '')
        class_info = student.get('class', '')
        
        line = f"{index}. "
        if row_num:
            line += f"[{row_num}] "
        
        line += f"**{name}**"
        
        if group:
            line += f" - {group}"
        
        if class_info:
            line += f" ({class_info})"
        
        return line + "\n"
    
    def get_students_summary(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ —Å–ø–∏—Å–∫–µ —É—á–∞—â–∏—Ö—Å—è"""
        try:
            students_data = self.load_students_cache()
            if not students_data:
                return "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–ø–∏—Å–∫–µ —É—á–∞—â–∏—Ö—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
            total_count = students_data.get('total_count', 0)
            last_updated = students_data.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            return f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ù–î–¢–ü: {total_count} –∑–∞–ø–∏—Å–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated})"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —É—á–∞—â–∏—Ö—Å—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–∏—Å–∫–µ —É—á–∞—â–∏—Ö—Å—è"
    
    def get_educational_directions_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –ù–î–¢–ü"""
        info = "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–î–¢–ü:\n\n"
        
        for i, direction in enumerate(self.EDUCATIONAL_DIRECTIONS, 1):
            info += f"{i}. {direction}\n"
        
        info += f"\nüìö –í—Å–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(self.EDUCATIONAL_DIRECTIONS)}"
        info += "\n\nüí° –£—á–µ–±–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ 72 —á–∞—Å–∞."
        info += "\nüìÖ –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è 6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 4 —á–∞—Å–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø–æ 7-10 —á–µ–ª–æ–≤–µ–∫."
        
        return info


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def get_students_context_async(query: str = "") -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—á–∞—â–∏—Ö—Å—è"""
    parser = StudentsParser()
    return parser.get_students_context(query)


def get_students_context(query: str = "") -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—á–∞—â–∏—Ö—Å—è"""
    parser = StudentsParser()
    return parser.get_students_context(query)


async def force_update_students() -> bool:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è"""
    parser = StudentsParser()
    return await parser.update_students(force=True)


async def students_updater_loop(interval_hours: int = 24):
    """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è"""
    parser = StudentsParser()
    
    while True:
        try:
            await parser.update_students()
            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è —á–µ—Ä–µ–∑ {interval_hours} —á–∞—Å–æ–≤")
            await asyncio.sleep(interval_hours * 3600)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—â–∏—Ö—Å—è: {e}")
            await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_students_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —É—á–∞—â–∏—Ö—Å—è"""
    parser = StudentsParser()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —É—á–∞—â–∏—Ö—Å—è –ù–î–¢–ü...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    success = await parser.update_students(force=True)
    if success:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—á–∞—â–∏—Ö—Å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = parser.get_students_context()
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(context)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—â–∏—Ö—Å—è")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_students_parser()) 