#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–º–µ–Ω
"""

import asyncio
import logging
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

from schedule_parser import ScheduleParser, get_schedule_context_async, get_schedule_context

async def test_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø –°–ú–ï–ù")
    print("=" * 50)
    
    parser = ScheduleParser()
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    html_content = await parser.fetch_page()
    
    if html_content:
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω–∏–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open("test_page.html", "w", encoding="utf-8") as f:
            f.write(html_content)
        print("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_page.html")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö...")
    shifts = parser.parse_shifts(html_content)
    
    if shifts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω: {len(shifts)}")
        for i, shift in enumerate(shifts, 1):
            print(f"   {i}. {shift['name']}: {shift['start_date']} - {shift['end_date']}")
            print(f"      –ó–∞—è–≤–∫–∏: {shift['application_period']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open("test_shifts.json", "w", encoding="utf-8") as f:
            json.dump(shifts, f, ensure_ascii=False, indent=2)
        print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_shifts.json")
    else:
        print("‚ùå –°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    if parser.save_shifts(shifts):
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        loaded_data = parser.load_shifts()
        if loaded_data:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {loaded_data['total_shifts']} —Å–º–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    general_info = parser.get_current_shifts_info()
    print("üìÖ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–∞—Ö:")
    print(general_info[:300] + "..." if len(general_info) > 300 else general_info)
    
    # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    test_queries = [
        "—è–Ω–≤–∞—Ä—Å–∫–∞—è —Å–º–µ–Ω–∞",
        "–∫–æ–≥–¥–∞ –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫",
        "—Ñ–µ–≤—Ä–∞–ª—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    ]
    
    for query in test_queries:
        query_info = parser.get_shifts_for_query(query)
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
        print(query_info[:200] + "..." if len(query_info) > 200 else query_info)
    
    # –¢–µ—Å—Ç 5: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    async_context = await get_schedule_context_async("—è–Ω–≤–∞—Ä—å")
    print("üìÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
    print(async_context[:300] + "..." if len(async_context) > 300 else async_context)
    
    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 50)

def test_sync_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\nüîÑ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("-" * 30)
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    sync_context = get_schedule_context("–º–∞—Ä—Ç")
    print("üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
    print(sync_context[:300] + "..." if len(sync_context) > 300 else sync_context)

def test_regex_patterns():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    print("\nüîç –¢–ï–°–¢ –†–ï–ì–£–õ–Ø–†–ù–´–• –í–´–†–ê–ñ–ï–ù–ò–ô")
    print("-" * 30)
    
    parser = ScheduleParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    test_strings = [
        "–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å 23.09.2024 –ø–æ 7.10.2024–≥.",
        "–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å 23.09 –ø–æ 7.10.2024–≥.",
        "–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å 21.10 –ø–æ 4.11.2024–≥.",
        "–°–ø–∏—Å–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–±–æ—Ä–∞ —É—á–∞—â–∏—Ö—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ —Å 08.01.2025–≥. –ø–æ 31.01.2025–≥.",
        "—Å 06.02.2025–≥. –ø–æ 01.03.2025–≥."
    ]
    
    import re
    
    for test_str in test_strings:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{test_str}'")
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
        app_match = re.search(parser.app_period_pattern, test_str)
        if app_match:
            print(f"‚úÖ –ó–∞—è–≤–∫–∏: {app_match.group(1)} - {app_match.group(2)}")
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è —Å–º–µ–Ω
        shift_match = re.search(parser.shift_period_pattern, test_str)
        if shift_match:
            print(f"‚úÖ –°–º–µ–Ω–∞: {shift_match.group(1)} - {shift_match.group(2)}")
        
        if not app_match and not shift_match:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–ê–†–°–ï–†–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    test_regex_patterns()
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    test_sync_functions()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    asyncio.run(test_parser())
    
    print(f"\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 