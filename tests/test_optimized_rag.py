#!/usr/bin/env python3
"""
üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import time
from optimized_rag_system import (
    get_optimized_rag, 
    RAGModes,
    get_optimized_context,
    get_optimized_context_async
)

async def demo_optimized_rag():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_queries = [
        ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "–ø—Ä–∏–≤–µ—Ç"),
        ("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫"),
        ("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "—Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏"),
        ("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "—Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"),
        ("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫"),
        ("–°—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"),
        ("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ"),
        ("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à)", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫"),  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
        ("–ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à)", "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞"),
    ]
    
    total_start_time = time.time()
    results = []
    
    print("\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ó–ê–ü–†–û–°–û–í:")
    print("-" * 60)
    
    for query_type, query in test_queries:
        print(f"\nüîç –¢–∏–ø: {query_type}")
        print(f"‚ùì –ó–∞–ø—Ä–æ—Å: '{query}'")
        
        start_time = time.time()
        context = await get_optimized_context_async(query, RAGModes.ECONOMY)
        processing_time = time.time() - start_time
        
        tokens = len(context) // 3
        results.append({
            'type': query_type,
            'query': query,
            'tokens': tokens,
            'time': processing_time,
            'context': context
        })
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {processing_time:.3f}—Å")
        print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
        
        if context:
            preview = context[:150] + "..." if len(context) > 150 else context
            print(f"üí¨ –û—Ç–≤–µ—Ç: {preview}")
        else:
            print("üí¨ –û—Ç–≤–µ—Ç: (–ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)")
    
    total_time = time.time() - total_start_time
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    print("\n" + "=" * 60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:")
    print("-" * 60)
    
    rag = get_optimized_rag(RAGModes.ECONOMY)
    stats = rag.get_stats()
    
    print(f"üöÄ –û–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_queries', 0)}")
    print(f"‚ö° –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats.get('cache_hits', 0)}")
    print(f"üìà Cache Hit Rate: {stats.get('cache_hit_rate', '0%')}")
    print(f"üíæ –¢–æ–∫–µ–Ω–æ–≤ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {stats.get('tokens_saved', 0)}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º–µ–Ω–∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {stats.get('processing_time_saved', 0):.2f}—Å")
    print(f"üóÉÔ∏è  –†–∞–∑–º–µ—Ä —Ç–æ—á–Ω–æ–≥–æ –∫—ç—à–∞: {stats.get('exact_cache_size', 0)}")
    print(f"üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø: {stats.get('semantic_cache_groups', 0)}")
    print(f"üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('popular_cache_size', 0)}")
    
    top_patterns = stats.get('top_patterns', {})
    if top_patterns:
        print(f"üìã –¢–æ–ø –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(list(top_patterns.keys())[:3])}")
    
    print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.3f}—Å")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n" + "=" * 60)
    print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("-" * 60)
    
    cache_hits = sum(1 for r in results if r['time'] < 0.01)  # –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã = –∫—ç—à
    avg_tokens = sum(r['tokens'] for r in results) / len(results)
    avg_time = sum(r['time'] for r in results) / len(results)
    
    print(f"üéØ –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_tokens:.1f}")
    print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_time:.3f}—Å")
    print(f"üöÄ –ö—ç—à-—Ö–∏—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {cache_hits}")
    print(f"üí° –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {100 - (avg_tokens/10)*100:.1f}% (vs 1000 —Ç–æ–∫–µ–Ω–æ–≤ –±–∞–∑–æ–≤—ã–π)")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    print("\n" + "=" * 60)
    print("üéõÔ∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–ù–´–• –†–ï–ñ–ò–ú–û–í:")
    print("-" * 60)
    
    test_query = "–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ"
    modes = [
        ("ULTRA_ECONOMY", RAGModes.ULTRA_ECONOMY),
        ("ECONOMY", RAGModes.ECONOMY),
        ("BALANCED", RAGModes.BALANCED),
        ("DETAILED", RAGModes.DETAILED)
    ]
    
    for mode_name, mode_value in modes:
        context = await get_optimized_context_async(test_query, mode_value)
        tokens = len(context) // 3
        print(f"üìä {mode_name}: {tokens} —Ç–æ–∫–µ–Ω–æ–≤ (–ª–∏–º–∏—Ç: {mode_value})")
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

def demo_cache_efficiency():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("üóÉÔ∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
    queries = [
        "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",
        "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫",  # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–π
        "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π - —Ç–æ—á–Ω—ã–π –∫—ç—à
        "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",  # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–π
        "–∞–¥—Ä–µ—Å",  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫—ç—à–∞...")
    
    for i, query in enumerate(queries, 1):
        start_time = time.time()
        get_optimized_context(query, RAGModes.ECONOMY)
        processing_time = time.time() - start_time
        
        cache_indicator = "‚ö° –ö–≠–®" if processing_time < 0.01 else "üîÑ –û–ë–†–ê–ë–û–¢–ö–ê"
        print(f"{i}. '{query}' - {cache_indicator} ({processing_time:.4f}—Å)")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(demo_optimized_rag())
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    demo_cache_efficiency() 