#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /quiz
"""
import asyncio
import logging
from unittest.mock import Mock, AsyncMock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def test_quiz_command_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /quiz"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /quiz...")
    
    try:
        from quiz_mod import QuizState
        
        # –°–æ–∑–¥–∞—ë–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        mock_message = Mock()
        mock_message.text = "/quiz"
        mock_message.from_user.id = 12345
        mock_message.from_user.username = "test_user"
        
        mock_state = AsyncMock()
        mock_state.get_state.return_value = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞
        states = [state for state in QuizState.__states__]
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞: {states}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /quiz –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        
        # –°–æ–∑–¥–∞—ë–º –º–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        mock_message_quiz = Mock()
        mock_message_quiz.text = "/quiz"
        mock_message_quiz.from_user.id = 12345
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ handle_text
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /quiz –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def test_quiz_state_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–≤–∏–∑–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–≤–∏–∑–∞...")
    
    try:
        
        # –°–æ–∑–¥–∞—ë–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞
        mock_message = Mock()
        mock_message.text = "–¥–µ–ª–∞–ª–∞ –±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        mock_message.from_user.id = 12345
        
        mock_state = AsyncMock()
        mock_state.get_state.return_value = "QuizState:Q1"
        
        Mock()
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–≤–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–≤–∏–∑–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
    command_ok = await test_quiz_command_handling()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state_ok = await test_quiz_state_handling()
    
    if command_ok and state_ok:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /quiz –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ")
        print("‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        print("‚úÖ DeepSeek API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1

if __name__ == "__main__":
    asyncio.run(main()) 