#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–≤–∏–∑–∞
"""
import asyncio
import logging
from unittest.mock import Mock, AsyncMock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def test_quiz_keyboards():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∫–≤–∏–∑–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–≤–∏–∑–∞...")
    
    try:
        from quiz_mod import create_quiz_keyboard, create_finish_keyboard
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        quiz_kb = create_quiz_keyboard()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {len(quiz_kb.inline_keyboard)} –∫–Ω–æ–ø–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        exit_button = quiz_kb.inline_keyboard[0][0]
        if exit_button.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∫–≤–∏–∑–∞" and exit_button.callback_data == "quiz_exit":
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return False
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        finish_kb = create_finish_keyboard()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {len(finish_kb.inline_keyboard)} –∫–Ω–æ–ø–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ
        finish_button = finish_kb.inline_keyboard[0][0]
        if finish_button.text == "‚úÖ –ì–æ—Ç–æ–≤–æ" and finish_button.callback_data == "quiz_finish":
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("‚ùå –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

async def test_quiz_callbacks():
    """–¢–µ—Å—Ç callback-—Ñ—É–Ω–∫—Ü–∏–π –∫–≤–∏–∑–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é callback-—Ñ—É–Ω–∫—Ü–∏–∏ –∫–≤–∏–∑–∞...")
    
    try:
        from quiz_mod import quiz_exit_callback, quiz_finish_callback
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        mock_callback = Mock()
        mock_callback.message.edit_text = AsyncMock()
        
        mock_state = AsyncMock()
        mock_state.clear = AsyncMock()
        
        # –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–≤–∏–∑–∞
        await quiz_exit_callback(mock_callback, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
        mock_state.clear.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        
        print("‚úÖ Callback –≤—ã—Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏
        mock_callback.message.edit_text.reset_mock()
        mock_state.clear.reset_mock()
        
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
        await quiz_finish_callback(mock_callback, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
        mock_state.clear.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        
        print("‚úÖ Callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è callback: {e}")
        return False

async def test_quiz_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–≤–∏–∑-–º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∏–º–ø–æ—Ä—Ç –∫–≤–∏–∑-–º–æ–¥—É–ª—è...")
    
    try:
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–≤–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–≤–∏–∑–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–≤–∏–∑–∞...")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    import_success = await test_quiz_import()
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    keyboards_success = await test_quiz_keyboards()
    
    # –¢–µ—Å—Ç callback-—Ñ—É–Ω–∫—Ü–∏–π
    callbacks_success = await test_quiz_callbacks()
    
    if import_success and keyboards_success and callbacks_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∫–≤–∏–∑–∞ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    asyncio.run(main()) 