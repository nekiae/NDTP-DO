"""
NDTP Bot - –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫
"""
import asyncio
import logging
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

from src.core.config import config
from src.core.constants import PROJECT_NAME, VERSION, AUTHOR
from src.core.middleware import (
    HourlyLimitMiddleware, 
    LoggingMiddleware, 
    AdminCheckMiddleware
)
from src.handlers.basic_commands import register_basic_commands
from src.handlers.message_handlers import register_message_handlers
from src.handlers.dev_commands import register_dev_commands
from src.services.context_service import initialize_rag_systems

logger = logging.getLogger(__name__)


class NDTPBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –±–æ—Ç–∞
    """
    
    def __init__(self):
        self.bot: Bot = None
        self.dp: Dispatcher = None
        self.is_running = False
        self._setup_signal_handlers()
        
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
    def _signal_handler(self, signum, frame) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.is_running = False
        
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {PROJECT_NAME} v{VERSION} by {AUTHOR}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.bot = Bot(token=config.bot_token)
            storage = MemoryStorage()
            self.dp = Dispatcher(storage=storage)
            
            logger.info("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
            await self._setup_middleware()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self._register_handlers()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º
            logger.info("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º...")
            await initialize_rag_systems()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await self._initialize_modules()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            await self._setup_bot_commands()
            
            logger.info(f"‚úÖ {PROJECT_NAME} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
            return False
    
    async def _setup_middleware(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        logger.info("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware...")
        
        #Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.dp.message.middleware(LoggingMiddleware())
        self.dp.callback_query.middleware(LoggingMiddleware())
        
        #Middleware –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ API
        #limit_middleware = HourlyLimitMiddleware()
        #self.dp.message.middleware(limit_middleware)
        #self.dp.callback_query.middleware(limit_middleware)
        
        #Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.dp.message.middleware(AdminCheckMiddleware())
        
        logger.info(f"‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ª–∏–º–∏—Ç: {config.hourly_request_limit} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å)")
    
    async def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        register_basic_commands(self.dp, self.bot)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º–∏
        self.register_operator_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        self.register_module_handlers()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
        register_message_handlers(self.dp, self.bot)
        
        # DEV –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
        #register_dev_commands(self.dp, self.bot)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def register_operator_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        
        from src.handlers.operator_handler import register_operator_handlers
        register_operator_handlers(self.dp, self.bot)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    
    def register_module_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª–µ–π"""
        # –ö–≤–∏–∑ –º–æ–¥—É–ª—å
        if config.enable_quiz:
            try:
                from src.modules.quiz_mod import register_quiz_handlers
                register_quiz_handlers(self.dp, self.bot)
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {e}")
        
        # –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –º–æ–¥—É–ª—å
        if config.enable_brainstorm:
            try:
                from src.modules.brainstorm_mod import (
                    register_brainstorm_handlers,
                    register_brainstorm_menu_handler
                )
                register_brainstorm_handlers(self.dp, self.bot)
                register_brainstorm_menu_handler(self.dp)
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞: {e}")
        if config.enable_brainstorm:
            try:
                from src.modules.calendar_module import register_calendar_hadler
                register_calendar_hadler(self.dp)
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
    
    async def _initialize_modules(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
        if config.enable_brainstorm:
            try:
                from src.modules.brainstorm_mod import init_brainstorm_llm
                await init_brainstorm_llm()
                logger.info("‚úÖ –ú–æ–¥—É–ª—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤
        if config.enable_lists:
            try:
                from src.services.parsers.lists_parser import initialize_lists_parser
                await initialize_lists_parser()
                logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤: {e}")
    
    async def _setup_bot_commands(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
        try:
            commands = [
                types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                types.BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                types.BotCommand(command="help", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"),
                types.BotCommand(command="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"),
                types.BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if config.enable_calendar:
                commands.append(
                    types.BotCommand(command="calendar", description="–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω")
                )
            if config.enable_quiz:
                commands.append(
                    types.BotCommand(command="quiz", description="–ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                )
            if config.enable_brainstorm:
                commands.append(
                    types.BotCommand(command="brainstorm", description="–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π")
                )
            if config.enable_lists:
                commands.append(
                    types.BotCommand(command="checklists", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏")
                )
            
            await self.bot.set_my_commands(commands)
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –º–µ–Ω—é Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")
    
    async def start_polling(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {PROJECT_NAME} –≤ —Ä–µ–∂–∏–º–µ polling...")
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self._start_background_tasks()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
            await self.dp.start_polling(self.bot, skip_updates=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
        finally:
            await self.shutdown()
    
    async def _start_background_tasks(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if config.enable_documents:
            try:
                from src.services.parsers.schedule_parser import schedule_updater_loop
                asyncio.create_task(schedule_updater_loop())
                logger.info("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if config.enable_documents:
            try:
                from src.services.parsers.documents_parser import documents_updater_loop
                asyncio.create_task(documents_updater_loop())
                logger.info("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    async def shutdown(self) -> None:
        """Graceful shutdown –±–æ—Ç–∞"""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        
        try:
            if self.bot:
                await self.bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await self._cleanup_resources()
            
            logger.info(f"‚úÖ {PROJECT_NAME} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    async def _cleanup_resources(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ RAG —Å–∏—Å—Ç–µ–º
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ RAG —Å–∏—Å—Ç–µ–º...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_instance = NDTPBot()
    
    if not await bot_instance.initialize():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await bot_instance.start_polling()
    except KeyboardInterrupt:
        logger.info("üîë –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
