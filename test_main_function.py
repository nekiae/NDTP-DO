#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ main() –∏–∑ bot.py
"""
import asyncio
import sys
import traceback

async def test_main_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ main() –ø–æ —á–∞—Å—Ç—è–º"""
    print("üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ main() –∏–∑ bot.py")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        print("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        import bot
        print("‚úÖ –ú–æ–¥—É–ª—å bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
        print(f"BOT_TOKEN: {'‚úÖ –µ—Å—Ç—å' if bot.BOT_TOKEN else '‚ùå –Ω–µ—Ç'}")
        print(f"DEEPSEEK_API_KEY: {'‚úÖ –µ—Å—Ç—å' if bot.DEEPSEEK_API_KEY else '‚ùå –Ω–µ—Ç'}")
        print(f"REDIS_AVAILABLE: {bot.REDIS_AVAILABLE}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞...")
        test_bot = bot.Bot(token=bot.BOT_TOKEN)
        print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
        test_dp = bot.Dispatcher(storage=bot.storage)
        print("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG —Å–∏—Å—Ç–µ–º
        print("üß† –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é RAG —Å–∏—Å—Ç–µ–º—É
        print("üìñ –ë–∞–∑–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞...")
        bot.rag_system.load_knowledge_base()
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG
        print("üöÄ –¢–µ—Å—Ç init_optimized_rag...")
        try:
            await bot.init_optimized_rag()
            print("‚úÖ init_optimized_rag –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è init_optimized_rag –æ—à–∏–±–∫–∞: {e}")
        
        print("üìö –¢–µ—Å—Ç init_modern_rag...")
        try:
            await bot.init_modern_rag()
            print("‚úÖ init_modern_rag –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è init_modern_rag –æ—à–∏–±–∫–∞: {e}")
        
        await test_bot.session.close()
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(test_main_function())
    
    if result:
        print("\nüéâ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ main() –ø—Ä–æ–π–¥–µ–Ω!")
    else:
        print("\nüí• –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ main() –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!") 