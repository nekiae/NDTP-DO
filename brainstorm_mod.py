import logging
from datetime import datetime
from typing import Dict, List
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è LLM
brainstorm_llm = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
class BrainstormState(StatesGroup):
    PICK_DIRECTION = State()    # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    ACTIVE = State()           # –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ù–î–¢ (–≤–∑—è—Ç–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ https://ndtp.by/educational_directions/)
DIRECTIONS = {
    "aerospace": {
        "id": "aerospace",
        "name": "–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "emoji": "üöÄ",
        "tags": ["–∞–≤–∏–∞—Ü–∏—è", "–∫–æ—Å–º–æ—Å", "–¥—Ä–æ–Ω—ã", "—Å–ø—É—Ç–Ω–∏–∫–∏", "–ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã"],
        "description": "–ò–∑—É—á–µ–Ω–∏–µ –∞–≤–∏–∞—Ü–∏–∏ –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    },
    "architecture": {
        "id": "architecture",
        "name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω",
        "emoji": "üèóÔ∏è",
        "tags": ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–¥–∏–∑–∞–π–Ω", "–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"],
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–∏–∑–∞–π–Ω-—Ä–µ—à–µ–Ω–∏–π"
    },
    "biotechnology": {
        "id": "biotechnology",
        "name": "–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "emoji": "üß¨",
        "tags": ["–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–≥–µ–Ω–µ—Ç–∏–∫–∞", "–±–∏–æ–ª–æ–≥–∏—è"],
        "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –±–∏–æ–ª–æ–≥–∏–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω—ã"
    },
    "vr_ar": {
        "id": "vr_ar",
        "name": "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
        "emoji": "ü•Ω",
        "tags": ["VR", "AR", "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å", "3D"],
        "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ VR/AR –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    },
    "green_chemistry": {
        "id": "green_chemistry",
        "name": "–ó–µ–ª—ë–Ω–∞—è —Ö–∏–º–∏—è",
        "emoji": "üåø",
        "tags": ["—ç–∫–æ–ª–æ–≥–∏—è", "—Ö–∏–º–∏—è", "—É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "–∑–µ–ª–µ–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
        "description": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
    },
    "environmental": {
        "id": "environmental",
        "name": "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è",
        "emoji": "üå±",
        "tags": ["—ç–∫–æ–ª–æ–≥–∏—è", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–æ—á–∏—Å—Ç–∫–∞", "—É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"],
        "description": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –æ—Ö—Ä–∞–Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã"
    },
    "infosecurity": {
        "id": "infosecurity",
        "name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "emoji": "üîí",
        "tags": ["–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", "—Å–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
        "description": "–ó–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"
    },
    "ict": {
        "id": "ict",
        "name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "emoji": "üíª",
        "tags": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–≤–µ–±", "–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"],
        "description": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"
    },
    "laser": {
        "id": "laser",
        "name": "–õ–∞–∑–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "emoji": "‚ö°",
        "tags": ["–ª–∞–∑–µ—Ä", "–æ–ø—Ç–∏–∫–∞", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "—Ç–æ—á–Ω–æ—Å—Ç—å"],
        "description": "–ò–∑—É—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∞–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    },
    "automotive": {
        "id": "automotive",
        "name": "–ú–∞—à–∏–Ω—ã –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–∏. –ê–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ",
        "emoji": "üöó",
        "tags": ["–∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "–¥–≤–∏–≥–∞—Ç–µ–ª–∏", "–º–µ—Ö–∞–Ω–∏–∫–∞", "–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        "description": "–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π"
    },
    "nano": {
        "id": "nano",
        "name": "–ù–∞–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏—è –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "emoji": "üî¨",
        "tags": ["–Ω–∞–Ω–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—è", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "–º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"],
        "description": "–ò–∑—É—á–µ–Ω–∏–µ –Ω–∞–Ω–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    },
    "natural_resources": {
        "id": "natural_resources",
        "name": "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
        "emoji": "üåç",
        "tags": ["–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", "–≥–µ–æ–ª–æ–≥–∏—è", "—ç–∫–æ–ª–æ–≥–∏—è", "—É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"],
        "description": "–ò–∑—É—á–µ–Ω–∏–µ –∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
    },
    "robotics": {
        "id": "robotics",
        "name": "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
        "emoji": "ü§ñ",
        "tags": ["–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å–µ–Ω—Å–æ—Ä—ã", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–º–µ—Ö–∞–Ω–∏–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"],
        "description": "–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–±–æ—Ç–æ–≤"
    },
    "electronics": {
        "id": "electronics",
        "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Å–≤—è–∑—å",
        "emoji": "üì°",
        "tags": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "—Å–≤—è–∑—å", "—Ä–∞–¥–∏–æ", "–º–∏–∫—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"],
        "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–∏—Å—Ç–µ–º —Å–≤—è–∑–∏"
    },
    "energy_future": {
        "id": "energy_future",
        "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –±—É–¥—É—â–µ–≥–æ",
        "emoji": "‚ö°",
        "tags": ["–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–±–∞—Ç–∞—Ä–µ–∏", "–∑–µ–ª–µ–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è"],
        "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ"
    }
}

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä–∞ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
def get_brainstorm_system_prompt(direction: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    return f"""–¢—ã ‚Äî —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞. –ü–æ–º–æ–≥–∞–µ—à—å —à–∫–æ–ª—å–Ω–∏–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {direction['name']} {direction['emoji']}.

–¢–≤–æ—è —Ä–æ–ª—å: –∑–∞–¥–∞–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ, –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –°–ê–ú —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞.

–ü–†–ê–í–ò–õ–ê:
‚Ä¢ –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –≥–æ—Ç–æ–≤—ã–µ –∏–¥–µ–∏, —Ä–µ—à–µ–Ω–∏—è, –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ—à–∞–≥–æ–≤—ã–µ –ø–ª–∞–Ω—ã
‚Ä¢ –ù–ï –¥–µ–ª–∞–π –≤—ã–≤–æ–¥–æ–≤, –Ω–µ –ø–æ–¥–≤–æ–¥–∏ –∏—Ç–æ–≥
‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±–µ—Å–µ–¥—É
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—é, —Ä–µ—Å—É—Ä—Å—ã —É—á–µ–Ω–∏–∫–∞
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—à—å assistant_control:"stop" ‚Äî –≤–µ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∞–π —Å–µ—Å—Å–∏—é
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—à—å assistant_control:"done" ‚Äî –ø–æ–∑–¥—Ä–∞–≤—å –∏ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é

–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: {direction['name']}
–û–ü–ò–°–ê–ù–ò–ï: {direction['description']}
–¢–ï–ì–ò: {', '.join(direction['tags'])}

–ù–∞—á–Ω–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–æ–º, —á—Ç–æ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–∂–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏–ª–∏ –≤–∞–∂–Ω—ã–º."""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
def make_directions_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ 3 –≤ —Ä—è–¥
    directions_list = list(DIRECTIONS.items())
    for i in range(0, len(directions_list), 3):
        row = []
        for j in range(3):
            if i + j < len(directions_list):
                dir_id, dir_info = directions_list[i + j]
                text = f"{dir_info['emoji']} {dir_info['name']}"
                row.append(InlineKeyboardButton(text=text, callback_data=f"dir_{dir_id}"))
        builder.row(*row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    builder.row(InlineKeyboardButton(text="‚èπ –í—ã–π—Ç–∏", callback_data="brainstorm_exit"))
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
def make_brainstorm_actions_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –Ø –ø—Ä–∏–¥—É–º–∞–ª(–∞) –∏–¥–µ—é", callback_data="brainstorm_done"),
            InlineKeyboardButton(text="‚èπ –í—ã–π—Ç–∏", callback_data="brainstorm_exit")
        ]
    ])

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤ bot.py)
class BrainstormLLM:
    def __init__(self, api_key: str, api_url: str = "https://api.deepseek.com/v1/chat/completions"):
        self.api_key = api_key
        self.api_url = api_url
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
    
    async def generate_question(self, direction: Dict, history: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            import aiohttp
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": get_brainstorm_system_prompt(direction)}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ user –∏ assistant —Å–æ–æ–±—â–µ–Ω–∏—è)
            for msg in history:
                if msg["role"] in ["user", "assistant"]:
                    messages.append(msg)
                elif msg["role"] == "assistant_control":
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if msg["content"] == "stop":
                        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å —Å –∏–¥–µ—è–º–∏."
                    elif msg["content"] == "done":
                        return "–û—Ç–ª–∏—á–Ω–æ! –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π —Å–≤–æ—é –∏–¥–µ—é, –ø–æ–∫–∞ –æ–Ω–∞ —Å–≤–µ–∂–∞. –ñ–µ–ª–∞—é —É—Å–ø–µ—Ö–æ–≤ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
            
            logger.info(f"üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            async with aiohttp.ClientSession() as session:
                payload = {
                    "model": "deepseek-chat",
                    "messages": messages,
                    "temperature": 0.7,
                    "max_tokens": 200
                }
                
                logger.info(f"üß† Payload: {payload}")
                
                async with session.post(
                    self.api_url,
                    headers=self.headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result["choices"][0]["message"]["content"]
                        logger.info(f"üß† –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {content[:50]}...")
                        return content
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º."

def init_brainstorm_llm(api_key: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
    global brainstorm_llm
    try:
        brainstorm_llm = BrainstormLLM(api_key)
        logger.info("‚úÖ LLM –¥–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM –¥–ª—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞: {e}")
        brainstorm_llm = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def register_brainstorm_handlers(router: Router, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
    
    @router.message(Command("brainstorm"))
    async def cmd_brainstorm(message: Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
        user_id = message.from_user.id
        username = message.from_user.username or "–±–µ–∑ username"
        logger.info(f"üß† –ö–æ–º–∞–Ω–¥–∞ /brainstorm –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        if not brainstorm_llm:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        await message.answer(
            "üß† **–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n\n"
            "üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "‚Ä¢ –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö\n"
            "‚Ä¢ –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å, –∞ —è –∑–∞–¥–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª –∏–¥–µ—é\n"
            "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ –º—ã—Å–ª–∏!",
            reply_markup=make_directions_keyboard()
        )
        await state.set_state(BrainstormState.PICK_DIRECTION)
    
    @router.callback_query(BrainstormState.PICK_DIRECTION, F.data.startswith("dir_"))
    async def handle_direction_pick(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = callback.from_user.id
        direction_id = callback.data.replace("dir_", "")
        
        if direction_id not in DIRECTIONS:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", show_alert=True)
            return
        
        direction = DIRECTIONS[direction_id]
        logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction['name']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        await state.update_data(
            direction=direction,
            history=[],
            rounds=0,
            start_time=datetime.now().isoformat()
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º
        await callback.message.edit_text(
            f"üéØ **{direction['name']} {direction['emoji']}**\n\n"
            f"–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ {direction['name'].lower()}.\n"
            f"–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–¥–µ—é!"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(BrainstormState.ACTIVE)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await ask_next_question(callback.message, state)
        await callback.answer()
    
    @router.callback_query(BrainstormState.PICK_DIRECTION, F.data == "brainstorm_exit")
    async def handle_brainstorm_exit_from_pick(callback: CallbackQuery, state: FSMContext):
        """–í—ã—Ö–æ–¥ –∏–∑ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        await callback.message.edit_text(
            "üëã –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞!"
        )
        await state.clear()
        await callback.answer()
    
    @router.message(BrainstormState.ACTIVE)
    async def handle_user_answer(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        data = await state.get_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_message = {"role": "user", "content": message.text}
        data["history"].append(user_message)
        data["rounds"] = data.get("rounds", 0) + 1
        
        await state.update_data(history=data["history"], rounds=data["rounds"])
        
        logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª (—Ä–∞—É–Ω–¥ {data['rounds']}): {message.text[:50]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await ask_next_question(message, state)
    
    @router.callback_query(BrainstormState.ACTIVE, F.data.in_(["brainstorm_done", "brainstorm_exit"]))
    async def handle_brainstorm_control(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–æ–º"""
        user_id = callback.from_user.id
        data = await state.get_data()
        
        if callback.data == "brainstorm_done":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–¥—É–º–∞–ª –∏–¥–µ—é
            logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º —Å –∏–¥–µ–µ–π (—Ä–∞—É–Ω–¥–æ–≤: {data.get('rounds', 0)})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            data["history"].append({"role": "assistant_control", "content": "done"})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = await brainstorm_llm.generate_question(data["direction"], data["history"])
            
            await callback.message.answer(
                final_message,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º", callback_data="brainstorm_restart")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç
            logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ (—Ä–∞—É–Ω–¥–æ–≤: {data.get('rounds', 0)})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            data["history"].append({"role": "assistant_control", "content": "stop"})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            exit_message = await brainstorm_llm.generate_question(data["direction"], data["history"])
            
            await callback.message.answer(
                exit_message,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º", callback_data="brainstorm_restart")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.answer()
    
    @router.callback_query(F.data == "brainstorm_restart")
    async def handle_brainstorm_restart(callback: CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
        await callback.message.edit_text(
            "üß† **–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞:",
            reply_markup=make_directions_keyboard()
        )
        await state.set_state(BrainstormState.PICK_DIRECTION)
        await callback.answer()

async def ask_next_question(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    
    if not brainstorm_llm:
        logger.error("‚ùå LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        logger.info(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data['direction']['name']}")
        logger.info(f"üß† –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(data['history'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        question = await brainstorm_llm.generate_question(data["direction"], data["history"])
        
        if not question or question.strip() == "":
            logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="brainstorm_restart")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        assistant_message = {"role": "assistant", "content": question}
        data["history"].append(assistant_message)
        await state.update_data(history=data["history"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await message.answer(
            question,
            reply_markup=make_brainstorm_actions_keyboard()
        )
        
        logger.info(f"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å (—Ä–∞—É–Ω–¥ {data.get('rounds', 0) + 1}): {question[:50]}...")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="brainstorm_restart")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞
def get_brainstorm_stats() -> Dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞"""
    return {
        "available": brainstorm_llm is not None,
        "directions_count": len(DIRECTIONS),
        "directions": list(DIRECTIONS.keys())
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def add_brainstorm_to_menu_keyboard(keyboard_rows: List[List[InlineKeyboardButton]]) -> List[List[InlineKeyboardButton]]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤ –Ω–∞—á–∞–ª–æ
    keyboard_rows.insert(0, [
        InlineKeyboardButton(text="üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π", callback_data="start_brainstorm")
    ])
    return keyboard_rows

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
def register_brainstorm_menu_handler(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    
    @router.callback_query(F.data == "start_brainstorm")
    async def handle_start_brainstorm_from_menu(callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if not brainstorm_llm:
            await callback.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üß† **–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n\n"
            "üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "‚Ä¢ –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö\n"
            "‚Ä¢ –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å, –∞ —è –∑–∞–¥–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª –∏–¥–µ—é\n"
            "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ –º—ã—Å–ª–∏!",
            reply_markup=make_directions_keyboard()
        )
        await state.set_state(BrainstormState.PICK_DIRECTION)
        await callback.answer() 