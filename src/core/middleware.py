"""
Middleware –¥–ª—è NDTP Bot
"""
import logging
import time
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.types import Message

from .config import config

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Redis —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
try:
    import redis.asyncio as redis
    REDIS_AVAILABLE = True
    logger.info("‚úÖ redis.asyncio —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    REDIS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ª–∏–º–∏—Ç–æ–≤")
    redis = None
except Exception as e:
    REDIS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ redis: {e}")
    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ª–∏–º–∏—Ç–æ–≤")
    redis = None


class HourlyLimitMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
    """
    
    def __init__(self, limit_per_hour: int = None):
        self.limit = limit_per_hour or config.hourly_request_limit
        self.fallback_cache: Dict[int, Dict[str, Any]] = {}  # Fallback –¥–ª—è —Å–ª—É—á–∞—è –±–µ–∑ Redis
        self._redis_client = None

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ middleware"""
        
        if hasattr(event, "text") and event.text:
            if len(event.text) < 10 and event.text.startswith("/"):
                return await handler(event, data)
        if not hasattr(event, "from_user") or not event.from_user:
            
            return await handler(event, data)

        user_id = event.from_user.id

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if REDIS_AVAILABLE and redis is not None:
            try:
                return await self._handle_with_redis(handler, event, data, user_id)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ Redis
                self._redis_client = None

        # Fallback: –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        return await self._handle_with_local_cache(handler, event, data, user_id)

    async def _handle_with_redis(
        self, 
        handler: Callable, 
        event: Message, 
        data: Dict[str, Any], 
        user_id: int
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis"""
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if self._redis_client is None:
            self._redis_client = redis.from_url(
                config.redis_url, decode_responses=True
            )

        key = f"user:{user_id}:quota"
        used = await self._redis_client.incr(key)
        
        if used == 1:
            await self._redis_client.expire(key, 3600)  # TTL 1 —á–∞—Å

        if used > self.limit:
            ttl = await self._redis_client.ttl(key)
            await event.answer(
                "‚åõ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {ttl if ttl > 0 else 3600} —Å–µ–∫—É–Ω–¥."
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ –∫ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å—ã
        if used > self.limit * 0.8:
            logger.warning(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É: {used}/{self.limit}"
            )
        
        
        return await handler(event, data)

    async def _handle_with_local_cache(
        self, 
        handler: Callable, 
        event: Message, 
        data: Dict[str, Any], 
        user_id: int
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º"""
        current_time = time.time()
        current_hour = int(current_time // 3600)

        if user_id not in self.fallback_cache:
            self.fallback_cache[user_id] = {"hour": current_hour, "count": 0}

        user_data = self.fallback_cache[user_id]

        # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
        if user_data["hour"] != current_hour:
            user_data["hour"] = current_hour
            user_data["count"] = 0

        user_data["count"] += 1

        if user_data["count"] > self.limit:
            await event.answer(
                "‚åõ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å."
            )
            return
        
        return await handler(event, data)


class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if hasattr(event, "from_user") and event.from_user:
            user_id = event.from_user.id
            username = event.from_user.username or "–±–µ–∑ username"
            fsm = data.get("state")

            if fsm is not None:
                # –ø—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = await fsm.get_state()
                print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
            message_text = ""
            if hasattr(event, "text") and event.text:
                message_text = event.text[:100] + ("..." if len(event.text) > 100 else "")
            
            logger.info(
                f"üì® –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): '{message_text}'"
            )
        
        return await handler(event, data)


class AdminCheckMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤"""
    
    def __init__(self, admin_only_commands: set = None):
        self.admin_only_commands = admin_only_commands or {
            "operators", "consultants_stats", "queue", 
            "update_schedule", "update_documents",
            # DEV ONLY –∫–æ–º–∞–Ω–¥—ã
            "test_rag", "test_location", "reload_kb", "rag_stats"
        }
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        if (hasattr(event, "text") and event.text and 
            event.text.startswith("/") and hasattr(event, "from_user")):
            
            command = event.text[1:].split()[0]  # –£–±–∏—Ä–∞–µ–º '/' –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            
            if command in self.admin_only_commands:
                user_id = event.from_user.id
                
                if not config.is_admin(user_id):
                    await event.answer(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    logger.warning(
                        f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ /{command} "
                        f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                    )
                    return
        
        return await handler(event, data)
