import asyncio
import logging
import os
from datetime import datetime
from typing import Any, Dict, Optional

import aiohttp
from aiogram import Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from tenacity import retry, stop_after_attempt, wait_exponential

from src.core.config import config

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç DeepSeek API - —Å–æ–∑–¥–∞—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ bot.py


DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

class DeepSeekAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

    @retry(
        wait=wait_exponential(multiplier=1, min=2, max=60),
        stop=stop_after_attempt(5)
    )
    async def _make_request(self, payload: dict) -> Optional[dict]:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                DEEPSEEK_API_URL,
                headers=self.headers,
                json=payload
            ) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 429:
                    retry_after = response.headers.get('Retry-After', '60')
                    wait_time = int(retry_after)
                    logger.warning(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time} seconds")
                    await asyncio.sleep(wait_time)
                    raise Exception("Rate limit exceeded")
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå DeepSeek API error {response.status}: {error_text}")
                    raise Exception(f"API error: {response.status}")

    async def get_response(self, messages: list, temperature: float = 0.7) -> str:
        payload = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": temperature,
            "max_tokens": 2000,
            "stream": False
        }
        
        try:
            response = await self._make_request(payload)
            return response['choices'][0]['message']['content']
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}")
            raise

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DeepSeek API
if DEEPSEEK_API_KEY:
    deepseek = DeepSeekAPI(DEEPSEEK_API_KEY)
    DEEPSEEK_AVAILABLE = True
    logger.info("‚úÖ DeepSeek API –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∫–≤–∏–∑–∞")
else:
    deepseek = None
    DEEPSEEK_AVAILABLE = False
    logger.warning("‚ö†Ô∏è DeepSeek API key –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –°–æ–∑–¥–∞—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
llm_semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–≤–∏–∑–∞
class QuizState(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    DONE = State()

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∫–≤–∏–∑–æ–≤
QUIZ_SEMAPHORE = asyncio.Semaphore(3)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–≤–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
user_quiz_quota = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
def load_system_prompt() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–≤–∏–∑–∞"""
    try:
        with open(config.prompts_dir / "quiz_system_prompt.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error("‚ùå –§–∞–π–ª quiz_system_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return ""

SYSTEM_PROMPT = load_system_prompt()

async def check_user_quota(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–≤–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (2 –∫–≤–∏–∑–∞ –≤ –¥–µ–Ω—å)"""
    today = datetime.now().date()
    user_key = f"quiz_runs:{user_id}"
    
    if user_key not in user_quiz_quota:
        user_quiz_quota[user_key] = {"date": today, "count": 0}
    
    user_data = user_quiz_quota[user_key]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if user_data["date"] != today:
        user_data["date"] = today
        user_data["count"] = 0
    
    return user_data["count"] < 2

async def increment_user_quota(user_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∫–≤–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    today = datetime.now().date()
    user_key = f"quiz_runs:{user_id}"
    
    if user_key not in user_quiz_quota:
        user_quiz_quota[user_key] = {"date": today, "count": 0}
    
    user_quiz_quota[user_key]["count"] += 1

async def ask_llm(history: list) -> Optional[str]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    if not DEEPSEEK_AVAILABLE or not deepseek:
        return "‚ùå –°–µ—Ä–≤–∏—Å –∫–≤–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async with llm_semaphore:
            messages = [{"role": "system", "content": SYSTEM_PROMPT}] + history
            response = await deepseek.get_response(messages, temperature=0.7)
            return response if response else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

# --- Helper functions to avoid premature recommendations/analysis before 5th answer ---

def contains_early_recommendations(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    keywords = [
        "üéØ",  # –º–∞—Ä–∫–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
        "–∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏",
        "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "–≥–ª–∞–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
        "üìö",  # –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        "üí°"
    ]
    lowered = text.lower()
    return any(k.lower() in lowered for k in keywords)


def strip_recommendations(text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    delimiters = [
        "üéØ",
        "üìö",
        "üí°",
        "–∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏",
        "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    ]
    lowered = text.lower()
    cut_idx = len(text)
    for d in delimiters:
        idx = lowered.find(d.lower())
        if idx != -1 and idx < cut_idx:
            cut_idx = idx
    return text[:cut_idx].strip()

# ------------------------------------------------------------------------------

def create_quiz_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–≤–∏–∑–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –∫–≤–∏–∑–∞", callback_data="quiz_exit"))
    return builder.as_markup()

def create_finish_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="quiz_finish"))
    return builder.as_markup()

async def quiz_exit_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–≤–∏–∑–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ö–≤–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz\n"
        "üìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö: /help"
    )

async def quiz_finish_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚úÖ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz\n"
        "üìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö: /help"
    )

async def quiz_start(message: Message, state: FSMContext, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
    if not await check_user_quota(user_id):
        await message.answer(
            "üö´ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (2 –∫–≤–∏–∑–∞ –≤ –¥–µ–Ω—å).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üìÖ"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞—Ñ–æ—Ä
    if QUIZ_SEMAPHORE.locked():
        await message.answer(
            "‚è≥ –°–µ–π—á–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–≤–∏–∑.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        return
    
    async with QUIZ_SEMAPHORE:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–≤–æ—Ç—É
        await increment_user_quota(user_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        first_question = await ask_llm(history)
        if not first_question:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        await message.answer(
            f"üéØ **–ö–≤–∏–∑ –ø–æ –ø–æ–¥–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ù–î–¢–ü**\n\n"
            f"–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
            f"{first_question}",
            parse_mode="Markdown",
            reply_markup=create_quiz_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        history.append({"role": "assistant", "content": first_question})
        await state.update_data(history=history)
        await state.set_state(QuizState.Q1)

async def quiz_start_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑ —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
    if not await check_user_quota(user_id):
        await callback.message.edit_text(
            "üö´ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (2 –∫–≤–∏–∑–∞ –≤ –¥–µ–Ω—å).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üìÖ"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞—Ñ–æ—Ä
    if QUIZ_SEMAPHORE.locked():
        await callback.message.edit_text(
            "‚è≥ –°–µ–π—á–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–≤–∏–∑.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        return
    
    async with QUIZ_SEMAPHORE:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–≤–æ—Ç—É
        await increment_user_quota(user_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        first_question = await ask_llm(history)
        if not first_question:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        await callback.message.edit_text(
            f"üéØ **–ö–≤–∏–∑ –ø–æ –ø–æ–¥–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ù–î–¢–ü**\n\n"
            f"–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
            f"{first_question}",
            parse_mode="Markdown",
            reply_markup=create_quiz_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        history.append({"role": "assistant", "content": first_question})
        await state.update_data(history=history)
        await state.set_state(QuizState.Q1)

async def handle_quiz_question(message: Message, state: FSMContext, bot: Bot, current_state: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
    async with QUIZ_SEMAPHORE:
        data = await state.get_data()
        history = data.get("history", [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history.append({"role": "user", "content": message.text})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_mapping = {
            "Q1": QuizState.Q2,
            "Q2": QuizState.Q3,
            "Q3": QuizState.Q4,
            "Q4": QuizState.Q5,
            "Q5": QuizState.DONE
        }
        
        next_state = state_mapping.get(current_state)
        
        if current_state == "Q5":
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            history.append({"role": "user", "content": "–í—Å–µ 5 –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ—Ä–∞ –ø–æ–¥—ã—Ç–æ–∂–∏—Ç—å."})
            
            response = await ask_llm(history)
            if response:
                await message.answer(
                    response, 
                    parse_mode="Markdown",
                    reply_markup=create_finish_keyboard()
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            await state.clear()
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            response = await ask_llm(history)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
            if current_state != "Q5" and response and contains_early_recommendations(response):
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –ª–∏—à–Ω—é—é —á–∞—Å—Ç—å
                cleaned = strip_recommendations(response)
                if cleaned and len(cleaned) > 3:
                    response = cleaned
                else:
                    # –ï—Å–ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
                    history.append({"role": "assistant", "content": response})
                    history.append({"role": "user", "content": "–¢—ã –¥–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."})
                    response = await ask_llm(history)

            if response:
                await message.answer(
                    response,
                    parse_mode="Markdown",
                    reply_markup=create_quiz_keyboard()
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                history.append({"role": "assistant", "content": response})
                await state.update_data(history=history)
                await state.set_state(next_state)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

async def handle_quiz_q1(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"""
    await handle_quiz_question(message, state, bot, "Q1")

async def handle_quiz_q2(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å"""
    await handle_quiz_question(message, state, bot, "Q2")

async def handle_quiz_q3(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å"""
    await handle_quiz_question(message, state, bot, "Q3")

async def handle_quiz_q4(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å"""
    await handle_quiz_question(message, state, bot, "Q4")

async def handle_quiz_q5(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π)"""
    await handle_quiz_question(message, state, bot, "Q5")

async def handle_quiz_off_topic(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–≤–∏–∑–∞"""
    await message.answer(
        "üìù –°–µ–π—á–∞—Å –∏–¥—ë—Ç –∫–≤–∏–∑ –ø–æ –ø–æ–¥–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–≤–∏–∑–∞."
    )

def get_quiz_stats() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–∏–∑–∞"""
    total_users = len(user_quiz_quota)
    today_users = sum(1 for data in user_quiz_quota.values() 
                     if data["date"] == datetime.now().date())
    
    return {
        "total_users": total_users,
        "today_users": today_users,
        "active_quizzes": QUIZ_SEMAPHORE._value if hasattr(QUIZ_SEMAPHORE, '_value') else 0,
        "deepseek_available": DEEPSEEK_AVAILABLE
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
def register_quiz_handlers(dp, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞
    @dp.message(F.text == "/quiz")
    async def quiz_command(message: Message, state: FSMContext):
        await quiz_start(message, state, bot)

    @dp.callback_query(F.data == "start_quiz")
    async def quiz_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
        await callback.answer()
        await quiz_start(callback.message, state, bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–≤–∏–∑–∞
    @dp.message(QuizState.Q1)
    async def quiz_q1_handler(message: Message, state: FSMContext):
        await handle_quiz_q1(message, state, bot)
    
    @dp.message(QuizState.Q2)
    async def quiz_q2_handler(message: Message, state: FSMContext):
        await handle_quiz_q2(message, state, bot)
    
    @dp.message(QuizState.Q3)
    async def quiz_q3_handler(message: Message, state: FSMContext):
        await handle_quiz_q3(message, state, bot)
    
    @dp.message(QuizState.Q4)
    async def quiz_q4_handler(message: Message, state: FSMContext):
        await handle_quiz_q4(message, state, bot)
    
    @dp.message(QuizState.Q5)
    async def quiz_q5_handler(message: Message, state: FSMContext):
        await handle_quiz_q5(message, state, bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    @dp.callback_query(F.data == "quiz_exit")
    async def quiz_exit_handler(callback: CallbackQuery, state: FSMContext):
        await quiz_exit_callback(callback, state)
    
    @dp.callback_query(F.data == "quiz_finish")
    async def quiz_finish_handler(callback: CallbackQuery, state: FSMContext):
        await quiz_finish_callback(callback, state)
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–∞
    @dp.message(F.text == "/quiz_stats")
    async def quiz_stats_command(message: Message):
        stats = get_quiz_stats()
        await message.answer(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–∞:**\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–∏: {stats['today_users']}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–∏–∑–æ–≤: {3 - stats['active_quizzes']}/3\n"
            f"üß† DeepSeek –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if stats['deepseek_available'] else '‚ùå'}"
        )
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã") 