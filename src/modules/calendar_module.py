import json
import logging
from datetime import datetime
from typing import List, Dict, Optional
import aiohttp
from bs4 import BeautifulSoup
import re

from src.core.config import config

from aiogram import F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

logger = logging.getLogger(__name__)

class CalendarModule:
    """–ú–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–º–µ–Ω —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.shifts_file = config.data_dir/"parsers"/"current_shifts.json"
        self.base_url = "https://ndtp.by"
        self.schedule_url = "https://ndtp.by/educational-shifts/schedule/"
        
    def load_shifts_data(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–∞—Ö"""
        try:
            with open(self.shifts_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö: {e}")
            return None
    
    def create_shifts_calendar(self, user_id: int = None) -> tuple[str, InlineKeyboardMarkup]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        shifts_data = self.load_shifts_data()
        
        if not shifts_data or not shifts_data.get('shifts'):
            return (
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                InlineKeyboardMarkup(inline_keyboard=[])
            )
        
        text = (
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
            "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–º–µ–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞—Ç—ã, —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω
        keyboard_rows = []
        shifts = shifts_data['shifts']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –º–µ—Å—è—Ü–∞
        shifts_sorted = sorted(shifts, key=lambda x: x.get('month_number', 0))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        for i in range(0, len(shifts_sorted), 2):
            row = []
            
            # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
            shift1 = shifts_sorted[i]
            row.append(InlineKeyboardButton(
                text=f"üéì {shift1['name']}",
                callback_data=f"calendar_shift_{shift1['month_number']}"
            ))
            
            # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i + 1 < len(shifts_sorted):
                shift2 = shifts_sorted[i + 1]
                row.append(InlineKeyboardButton(
                    text=f"üéì {shift2['name']}",
                    callback_data=f"calendar_shift_{shift2['month_number']}"
                ))
            
            keyboard_rows.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                callback_data="notification_settings"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        return text, keyboard
    
    async def get_shift_details(self, month_number: int) -> tuple[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ"""
        shifts_data = self.load_shifts_data()
        
        if not shifts_data:
            return (
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ.",
                InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar")]
                ])
            )
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—É –ø–æ –Ω–æ–º–µ—Ä—É –º–µ—Å—è—Ü–∞
        shift = None
        for s in shifts_data['shifts']:
            if s.get('month_number') == month_number:
                shift = s
                break
        
        if not shift:
            return (
                "‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar")]
                ])
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ
        text_parts = [
            f"üìö {shift['name']}",
            f"üìÖ –ü–µ—Ä–∏–æ–¥ —Å–º–µ–Ω—ã: {shift['start_date']} - {shift['end_date']}"
        ]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–µ–º–µ –∑–∞—è–≤–æ–∫
        if shift.get('application_start_date') and shift.get('application_end_date'):
            app_start = shift['application_start_date']
            app_end = shift['application_end_date']
            text_parts.append(f"üìù –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫: —Å {app_start} –ø–æ {app_end}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫
            try:
                app_start_date = datetime.strptime(app_start, '%d.%m.%Y').date()
                app_end_date = datetime.strptime(app_end, '%d.%m.%Y').date()
                current_date = datetime.now().date()
                
                if current_date < app_start_date:
                    status = f"‚è≥ –ü—Ä–∏–µ–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è {app_start}"
                elif app_start_date <= current_date <= app_end_date:
                    status = "üü¢ –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –æ—Ç–∫—Ä—ã—Ç!"
                else:
                    status = "üî¥ –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç"
                
                text_parts.append(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            except Exception:
                text_parts.append(f"üìä –°—Ç–∞—Ç—É—Å: {shift.get('raw_status', '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è')}")
        else:
            text_parts.append(f"üìä –°—Ç–∞—Ç—É—Å: {shift.get('raw_status', '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç–∞')}")
        
        text_parts.append("")
        text_parts.append("üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        
        text = "\n".join(text_parts)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å–∞–π—Ç–∞
        documents = await self.get_shift_documents_real(month_number)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        keyboard_rows = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for doc in documents:
            keyboard_rows.append([
                InlineKeyboardButton(
                    text=f"üìÑ {doc['title']}", 
                    url=doc['url']
                )
            ])
        
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É
        if not documents:
            keyboard_rows.append([
                InlineKeyboardButton(
                    text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ", 
                    url=self.schedule_url
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", 
                callback_data="back_to_calendar"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
        return text, keyboard
    
    async def get_shift_documents_real(self, month_number: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω—ã —Å —Å–∞–π—Ç–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(self.schedule_url, headers=headers) as response:
                    if response.status != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                        return []
                    
                    html = await response.text()
            
            soup = BeautifulSoup(html, 'html.parser')
            
            # –ò—â–µ–º –ø–∞–Ω–µ–ª—å —Å –Ω—É–∂–Ω–æ–π —Å–º–µ–Ω–æ–π
            panels = soup.find_all('div', class_='fusion-panel')
            
            shift_names = {
                1: "–Ø–Ω–≤–∞—Ä—Å–∫–∞—è", 2: "–§–µ–≤—Ä–∞–ª—å—Å–∫–∞—è", 3: "–ú–∞—Ä—Ç–æ–≤—Å–∫–∞—è", 4: "–ê–ø—Ä–µ–ª—å—Å–∫–∞—è",
                5: "–ú–∞–π—Å–∫–∞—è", 6: "–ò—é–Ω—å—Å–∫–∞—è", 7: "–ò—é–ª—å—Å–∫–∞—è", 8: "–ê–≤–≥—É—Å—Ç–æ–≤—Å–∫–∞—è",
                9: "–°–µ–Ω—Ç—è–±—Ä—å—Å–∫–∞—è", 10: "–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è", 11: "–ù–æ—è–±—Ä—å—Å–∫–∞—è", 12: "–î–µ–∫–∞–±—Ä—å—Å–∫–∞—è"
            }
            
            target_shift_name = shift_names.get(month_number, "")
            documents = []
            
            for panel in panels:
                title_elem = panel.find('span', class_='fusion-toggle-heading')
                if not title_elem:
                    continue
                
                title_text = title_elem.get_text()
                if target_shift_name not in title_text:
                    continue
                
                # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏
                content = panel.find('div', class_='panel-body')
                if not content:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –¥—Ä—É–≥–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                    content = panel.find('div', class_='fusion-toggle-content')
                
                if not content:
                    continue
                
                logger.info(f"üîç –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {target_shift_name} —Å–º–µ–Ω—ã...")
                
                # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                links = content.find_all('a', href=True)
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏: {len(links)}")
                
                for link in links:
                    href = link.get('href', '')
                    text = link.get_text(strip=True)
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
                    if not text or not href:
                        continue
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã PDF –∏ DOC
                    is_document = (
                        href.endswith('.pdf') or 
                        href.endswith('.doc') or 
                        href.endswith('.docx') or
                        any(keyword in text.lower() for keyword in [
                            '–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '—Å–ø–∏—Å–æ–∫', '—Å–æ—Å—Ç–∞–≤', '—É—á–∞—Å—Ç–Ω–∏–∫', 
                            '–º–µ—Å—Ç–æ', '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ', '–∑–∞—á–∏—Å–ª', '—Å–º–µ–Ω', '–≥—Ä—É–ø–ø–∞'
                        ])
                    )
                    
                    if is_document:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                        if href.startswith('/'):
                            full_url = self.base_url + href
                        elif href.startswith('http'):
                            full_url = href
                        else:
                            full_url = self.base_url + '/' + href
                        
                        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        clean_title = text.replace('\n', ' ').replace('\t', ' ')
                        clean_title = re.sub(r'\s+', ' ', clean_title).strip()
                        
                        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        short_title = self._shorten_document_title(clean_title)
                        
                        documents.append({
                            'title': short_title,
                            'url': full_url,
                            'type': self._classify_document(text)
                        })
                        
                        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {short_title}")
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–∞–Ω–µ–ª—å —Å –Ω—É–∂–Ω–æ–π —Å–º–µ–Ω–æ–π, –≤—ã—Ö–æ–¥–∏–º
                if documents:
                    break
            
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {target_shift_name} —Å–º–µ–Ω—ã: {len(documents)}")
            return documents
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def _classify_document(self, title: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        title_lower = title.lower()
        
        if '–ø–æ–ª–æ–∂–µ–Ω–∏–µ' in title_lower:
            return 'regulation'
        elif '—Å–ø–∏—Å–æ–∫' in title_lower and '—É—á–∞—Å—Ç–Ω–∏–∫' in title_lower:
            return 'participants_list'
        elif '–º–µ—Å—Ç–æ' in title_lower and '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ' in title_lower:
            return 'venues'
        elif '–∑–∞—á–∏—Å–ª' in title_lower:
            return 'enrolled_list'
        else:
            return 'other'
    
    def _shorten_document_title(self, title: str) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        title_lower = title.lower()
        
        # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if '–ø–æ–ª–æ–∂–µ–Ω–∏–µ' in title_lower and '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω' in title_lower:
            return "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω–µ"
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É
        if ('—Å–ø–∏—Å–æ–∫' in title_lower or '—Å–æ—Å—Ç–∞–≤' in title_lower) and \
           ('—É—á–∞—Å—Ç–Ω–∏–∫' in title_lower) and \
           ('–¥–æ–ø—É—â' in title_lower or '–≤—Ç–æ—Ä' in title_lower or '2' in title):
            return "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 2 —ç—Ç–∞–ø–∞"
        
        # –ú–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if '–º–µ—Å—Ç–æ' in title_lower and '–ø—Ä–æ–≤–µ–¥–µ–Ω' in title_lower:
            return "–ú–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
        
        # –°–ø–∏—Å–æ–∫ –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ –ù–î–¢–ü
        if ('—Å–ø–∏—Å–æ–∫' in title_lower or '—Å–æ—Å—Ç–∞–≤' in title_lower) and \
           ('–∑–∞—á–∏—Å–ª–µ–Ω' in title_lower or '–≥—Ä—É–ø–ø' in title_lower) and \
           ('—Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫' in title_lower or '–Ω–¥—Ç–ø' in title_lower):
            return "–°–ø–∏—Å–æ–∫ –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ –ù–î–¢–ü"
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º
        if len(title) > 45:
            return title[:42] + "..."
        
        return title
    
    def get_shift_status_emoji(self, shift: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã"""
        try:
            if not shift.get('application_start_date'):
                return "üìÖ"
            
            app_start = datetime.strptime(shift['application_start_date'], '%d.%m.%Y').date()
            app_end = datetime.strptime(shift['application_end_date'], '%d.%m.%Y').date()
            current_date = datetime.now().date()
            
            if current_date < app_start:
                return "‚è≥"
            elif app_start <= current_date <= app_end:
                return "üü¢"
            else:
                return "üî¥"
        except Exception:
            return "üìÖ"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
calendar_module = CalendarModule()
def register_calendar_hadler(dp):
    
    @dp.callback_query(F.data == "back_to_calendar")
    @dp.callback_query(F.data == "show_calendar")
    async def handle_show_calendar(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω"""
        if not config.enable_calendar:
            await callback.answer("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        try:
            user_id = callback.from_user.id
            text, keyboard = get_calendar_interface(user_id)
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", show_alert=True)
    @dp.callback_query(F.data.startswith("calendar_shift_"))
    async def handle_calendar_shift(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω–µ"""
        if not config.enable_calendar:
            await callback.answer("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        try:
            month_number = int(callback.data.split("_")[2])
            text, keyboard = await get_shift_info(month_number)
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
        except (ValueError, IndexError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)
    
    @dp.callback_query(F.data == "notification_settings")
    async def handle_notification_settings(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not config.enable_calendar:
            await callback.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        try:
            user_id = callback.from_user.id
            text, keyboard = get_notification_settings_interface(user_id)
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
def get_calendar_interface(user_id: int = None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    return calendar_module.create_shifts_calendar(user_id)

async def get_shift_info(month_number: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω–µ"""
    return await calendar_module.get_shift_details(month_number)

async def get_shift_documents_async(month_number: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–º–µ–Ω—ã"""
    return await calendar_module.get_shift_documents_real(month_number)

def get_notification_settings_interface(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from src.handlers.notification_system import notification_system
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = notification_system.get_user_subscriptions(user_id)
    
    text_parts = [
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:",
        "",
        "üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω (–Ω–æ–≤—ã–µ –¥–∞—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∞—Ç—É—Å—ã)",
        "",
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–º–µ–Ω—ã"
    ]
    
    text = "\n".join(text_parts)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
    schedule_emoji = "‚úÖ" if subscriptions["schedule_updates"] else "‚ùå"
    reminders_emoji = "‚úÖ" if subscriptions["application_reminders"] else "‚ùå"
    
    keyboard_rows = [
        [
            InlineKeyboardButton(
                text=f"{schedule_emoji} –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                callback_data="toggle_notification_schedule_updates"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{reminders_emoji} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö", 
                callback_data="toggle_notification_application_reminders"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é",
                callback_data="back_to_calendar"
            )
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    return text, keyboard 