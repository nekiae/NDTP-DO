"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è NDTP Bot
"""
import logging
import re
from datetime import datetime
from typing import Optional

from ..core.constants import DATE_REGEX, MONTHS_PATTERNS, WEEKDAYS_RU

logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç dateparser
try:
    import dateparser
    DATEPARSER_AVAILABLE = True
    logger.info("‚úÖ dateparser —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    DATEPARSER_AVAILABLE = False
    logger.warning("‚ö†Ô∏è dateparser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback regex")


def parse_russian_date(text: str, default_year: int = None) -> Optional[datetime]:
    """
    –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç —Å fallback –Ω–∞ dateparser
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞—Ç—É
        default_year: –ì–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        
    Returns:
        datetime –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    if not text:
        return None

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    clean_text = re.sub(r"\s+", " ", text.strip())

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º dateparser (–Ω–∞–¥—ë–∂–Ω–µ–µ), –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if DATEPARSER_AVAILABLE:
        try:
            dt = dateparser.parse(
                clean_text,
                languages=["ru"],
                settings={"DATE_ORDER": "DMY", "PREFER_DAY_OF_MONTH": "first"},
            )
            if dt:
                return dt
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è dateparser –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '{clean_text}': {e}")

    # Fallback –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π regex
    try:
        match = DATE_REGEX.search(clean_text)
        if match:
            day = int(match.group("day"))
            month_text = match.group("month")
            year = int(match.group("year") or default_year or datetime.now().year)

            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
            month = None
            for pattern, num in MONTHS_PATTERNS.items():
                if re.fullmatch(pattern, month_text, re.IGNORECASE):
                    month = num
                    break

            if month:
                return datetime(year, month, day)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Regex –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '{clean_text}': {e}")

    return None


def get_russian_weekday(date: datetime) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    english_weekday = date.strftime("%A")
    return WEEKDAYS_RU.get(english_weekday, english_weekday)


def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."


def format_user_info(user_id: int, username: str = None, first_name: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤"""
    parts = [str(user_id)]
    
    if username:
        parts.append(f"@{username}")
    elif first_name:
        parts.append(first_name)
    else:
        parts.append("–±–µ–∑ –∏–º–µ–Ω–∏")
    
    return f"({' - '.join(parts)})"


def safe_int_conversion(value: str, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ"""
    try:
        return int(value)
    except (ValueError, TypeError):
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{value}' –≤ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {default}")
        return default


def extract_command_args(text: str) -> tuple[str, list[str]]:
    """
    –ò–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–∫–æ–º–∞–Ω–¥–∞, —Å–ø–∏—Å–æ–∫_–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    """
    if not text or not text.startswith("/"):
        return "", []
    
    parts = text[1:].split()  # –£–±–∏—Ä–∞–µ–º '/' –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    
    if not parts:
        return "", []
    
    command = parts[0]
    args = parts[1:] if len(parts) > 1 else []
    
    return command, args


def is_context_related_to_keywords(query: str, keywords: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤—è–∑–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    
    Args:
        query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    """
    query_lower = query.lower()
    return any(keyword in query_lower for keyword in keywords)


def format_time_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "2 —á 30 –º–∏–Ω" –∏–ª–∏ "45 —Å–µ–∫"
    """
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    
    minutes = seconds // 60
    remaining_seconds = seconds % 60
    
    if minutes < 60:
        if remaining_seconds > 0:
            return f"{minutes} –º–∏–Ω {remaining_seconds} —Å–µ–∫"
        return f"{minutes} –º–∏–Ω"
    
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if remaining_minutes > 0:
        return f"{hours} —á {remaining_minutes} –º–∏–Ω"
    return f"{hours} —á"


def clean_text_for_telegram(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    –£–¥–∞–ª—è–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    """
    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º markdown —Å–∏–º–≤–æ–ª—ã
    text = text.replace("*", "")  # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
    text = text.replace("_", "")  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    text = text.replace("`", "'")  # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
    max_length = 4096
    if len(text) > max_length:
        text = text[:max_length-3] + "..."
    
    return text


def validate_user_input(text: str, min_length: int = 1, max_length: int = 1000) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        min_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–µ–Ω
    """
    if not text or not isinstance(text, str):
        return False
    
    text = text.strip()
    return min_length <= len(text) <= max_length


# DEV ONLY - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
def debug_log_context(context: str, query: str) -> None:
    """DEV ONLY - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.debug(f"üîç DEBUG: –ó–∞–ø—Ä–æ—Å '{query[:50]}...'")
    logger.debug(f"üìÑ DEBUG: –ö–æ–Ω—Ç–µ–∫—Å—Ç ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤): '{context[:200]}...'")


def debug_log_user_action(user_id: int, action: str, details: str = "") -> None:
    """DEV ONLY - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.debug(f"üë§ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} -> {action} {details}")


def debug_measure_time(start_time: float, operation: str) -> float:
    """DEV ONLY - –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    import time
    end_time = time.time()
    duration = end_time - start_time
    logger.debug(f"‚è±Ô∏è DEBUG: {operation} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration:.3f} —Å–µ–∫")
    return duration
