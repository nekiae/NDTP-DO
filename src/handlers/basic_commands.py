"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ NDTP Bot
"""
import logging

from aiogram import Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from ..core.config import config
from ..handlers.operator_handler import operator_handler, OperatorState, UserStatus

logger = logging.getLogger(__name__)


async def cmd_start(message: Message) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–æ–ª—è–º: –∞–¥–º–∏–Ω / –æ–ø–µ—Ä–∞—Ç–æ—Ä / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    # –ê–¥–º–∏–Ω: –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    if config.is_admin(user_id):
        admin_text = (
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ /queue ‚Äî –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º)\n"
            "‚Ä¢ /consultants_stats ‚Äî —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º\n"
            "‚Ä¢ /operators ‚Äî —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ /notifications ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ /update_schedule, /update_documents ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Ç–µ—Å—Ç–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤."
        )
        await message.answer(admin_text)
        return

    # –û–ø–µ—Ä–∞—Ç–æ—Ä: –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥
    if operator_handler.operator_manager.is_operator(user_id):
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö c –∫–Ω–æ–ø–∫–æ–π: ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ /queue ‚Äî —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É\n"
            "‚Ä¢ /consultants_stats ‚Äî –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /operator_stats ‚Äî –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /end_session ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n"
            "–í–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é)\n"
            "‚Ä¢ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞\n"
        )
        await message.answer(text)
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
    await show_main_menu(message)


async def show_main_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞!\n\n"
        "ü§ñ –Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard_rows = [
        [
            InlineKeyboardButton(text="üè´ –û —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ", callback_data="info_about"),
            InlineKeyboardButton(
                text="üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", callback_data="info_programs"
            ),
        ],
        [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="info_admission")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if config.enable_brainstorm:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π", callback_data="start_brainstorm"
                )
            ]
        )

    if config.enable_calendar:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω", callback_data="show_calendar"
                )
            ]
        )

    if config.enable_lists:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="check_lists"
                )
            ]
        )

    if config.enable_quiz:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="start_quiz"
                )
            ]
        )

    keyboard_rows.append(
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                callback_data="request_consultant",
            )
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer(welcome_text, reply_markup=keyboard)


async def cmd_menu(message: Message) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–Ω–∞–ª–æ–≥ callback back_to_menu)"""
    await show_main_menu(message)


async def cmd_help(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logger.info(
        f"üÜò –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) - –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    success = await operator_handler.escalate_to_operator(
        user_id, message, auto_escalation=False, bot=bot
    )

    if success:
        await state.set_state(OperatorState.WAITING_OPERATOR)
        queue_info = operator_handler.get_queue_info()
        position = len(
            [u for u in queue_info["queue_details"] if u["user_id"] == user_id]
        )

        await message.answer(
            "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
            f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
            "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def cmd_status(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_status = operator_handler.get_user_status(user_id)

    logger.info(
        f"‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    status_descriptions = {
        UserStatus.NORMAL: "üü¢ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        UserStatus.WAITING_OPERATOR: "‚è≥ –û–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
        UserStatus.WITH_OPERATOR: "üí¨ –û–±—â–∞–µ—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
        UserStatus.RATING_OPERATOR: "‚≠ê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
    }

    status_text = (
        f"‚ÑπÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å: {status_descriptions.get(user_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (
        user_status == UserStatus.WAITING_OPERATOR
        and user_id in operator_handler.waiting_queue
    ):
        request_info = operator_handler.waiting_queue[user_id]
        status_text += (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_info['request_time'].strftime('%H:%M:%S')}\n"
            f"üìç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {request_info['queue_position']}\n\n"
        )
    elif (
        user_status == UserStatus.WITH_OPERATOR
        and user_id in operator_handler.active_sessions
    ):
        session_info = operator_handler.active_sessions[user_id]
        operator_info = operator_handler.operator_manager.get_operator_info(
            session_info["operator_id"]
        )
        status_text += (
            f"üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {operator_info['name']}\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: {session_info['start_time'].strftime('%H:%M:%S')}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {session_info.get('message_count', 0)}\n\n"
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    queue_info = operator_handler.get_queue_info()
    status_text += (
        f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n"
        f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {queue_info['waiting_count']}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {queue_info['active_sessions']}\n"
        f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {queue_info['active_operators']}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã: /help - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, /cancel - –æ—Ç–º–µ–Ω–∞"
    )

    await message.answer(status_text)


async def cmd_cancel(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    current_state = await state.get_state()
    user_status = operator_handler.get_user_status(user_id)

    logger.info(
        f"üö´ –ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if user_status == UserStatus.WAITING_OPERATOR:
        success, msg = await operator_handler.cancel_waiting(user_id, bot)
        if success:
            await state.clear()
            await message.answer(
                "‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
        else:
            await message.answer(f"‚ùå {msg}")
    elif user_status == UserStatus.WITH_OPERATOR:
        success = await operator_handler.end_session(
            user_id, bot, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        if success:
            await state.clear()
            await message.answer(
                "‚ùå –°–µ—Å—Å–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
    elif user_status == UserStatus.RATING_OPERATOR:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        operator_handler.set_user_status(user_id, UserStatus.NORMAL)
        await state.clear()
        await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    elif current_state is not None:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    else:
        await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")


async def handle_request_consultant(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º'"""
    try:
        user = callback.from_user
        chat_id = callback.message.chat.id if callback.message else user.id
        
        # –≠—Å–∫–∞–ª–∏—Ä—É–µ–º —Å —è–≤–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await operator_handler.escalate_to_operator(
            user.id,
            callback.message,
            auto_escalation=False,
            bot=bot,
            first_name=user.first_name or "",
            username=user.username or "",
            chat_id=chat_id,
            origin_message_id=None,
            original_message_override="–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        )
        
        if success:
            await state.set_state(OperatorState.WAITING_OPERATOR)
            queue_info = operator_handler.get_queue_info()
            position = len(
                [u for u in queue_info["queue_details"] if u["user_id"] == user.id]
            )
            await callback.message.answer(
                "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
                f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
                "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
            )
        else:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    finally:
        try:
            await callback.answer()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")


def register_basic_commands(dp, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_menu, Command("menu"))
    dp.message.register(lambda msg, state: cmd_help(msg, state, bot), Command("help"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(lambda msg, state: cmd_cancel(msg, state, bot), Command("cancel"))
    
    dp.callback_query.register(
        lambda cb, state: handle_request_consultant(cb, state, bot), 
        F.data == "request_consultant"
    )
    
    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
