"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ NDTP Bot
"""
import logging

from aiogram import Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from ..core.config import config
from ..handlers.operator_handler import operator_handler, OperatorState
from src.core.constants import UserStatus
logger = logging.getLogger(__name__)


async def cmd_start(message: Message) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–æ–ª—è–º: –∞–¥–º–∏–Ω / –æ–ø–µ—Ä–∞—Ç–æ—Ä / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    # –ê–¥–º–∏–Ω: –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    if config.is_admin(user_id):
        admin_text = (
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ /queue ‚Äî –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º)\n"
            "‚Ä¢ /consultants_stats ‚Äî —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º\n"
            "‚Ä¢ /operators ‚Äî —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ /notifications ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ /update_schedule, /update_documents ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Ç–µ—Å—Ç–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤."
        )
        await message.answer(admin_text)
        return

    # –û–ø–µ—Ä–∞—Ç–æ—Ä: –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥
    if operator_handler.operator_manager.is_operator(user_id):
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö c –∫–Ω–æ–ø–∫–æ–π: ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ /queue ‚Äî —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É\n"
            "‚Ä¢ /consultants_stats ‚Äî –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /operator_stats ‚Äî –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /end_session ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n"
            "–í–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é)\n"
            "‚Ä¢ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞\n"
        )
        await message.answer(text)
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
    await show_main_menu(message)


async def show_main_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞!\n\n"
        "ü§ñ –Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard_rows = [
        [
            InlineKeyboardButton(text="üè´ –û —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ", callback_data="info_about"),
            InlineKeyboardButton(
                text="üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", callback_data="info_programs"
            ),
        ],
        [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="info_admission")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if config.enable_brainstorm:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π", callback_data="start_brainstorm"
                )
            ]
        )

    if config.enable_calendar:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω", callback_data="show_calendar"
                )
            ]
        )

    if config.enable_lists:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="check_lists"
                )
            ]
        )

    if config.enable_quiz:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="start_quiz"
                )
            ]
        )

    keyboard_rows.append(
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                callback_data="request_consultant",
            )
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer(welcome_text, reply_markup=keyboard)


async def cmd_menu(message: Message) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–Ω–∞–ª–æ–≥ callback back_to_menu)"""
    await show_main_menu(message)


async def cmd_help(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logger.info(
        f"üÜò –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) - –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    success = await operator_handler.escalate_to_operator(
        user_id, message, auto_escalation=False, bot=bot
    )

    if success:
        await state.set_state(OperatorState.WAITING_OPERATOR)
        queue_info = operator_handler.get_queue_info()
        position = len(
            [u for u in queue_info["queue_details"] if u["user_id"] == user_id]
        )

        await message.answer(
            "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
            f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
            "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def cmd_status(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_status = operator_handler.get_user_status(user_id)

    logger.info(
        f"‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    status_descriptions = {
        UserStatus.NORMAL: "üü¢ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        UserStatus.WAITING_OPERATOR: "‚è≥ –û–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
        UserStatus.WITH_OPERATOR: "üí¨ –û–±—â–∞–µ—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
        UserStatus.RATING_OPERATOR: "‚≠ê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
    }

    status_text = (
        f"‚ÑπÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å: {status_descriptions.get(user_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (
        user_status == UserStatus.WAITING_OPERATOR
        and user_id in operator_handler.waiting_queue
    ):
        request_info = operator_handler.waiting_queue[user_id]
        status_text += (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_info['request_time'].strftime('%H:%M:%S')}\n"
            f"üìç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {request_info['queue_position']}\n\n"
        )
    elif (
        user_status == UserStatus.WITH_OPERATOR
        and user_id in operator_handler.active_sessions
    ):
        session_info = operator_handler.active_sessions[user_id]
        operator_info = operator_handler.operator_manager.get_operator_info(
            session_info["operator_id"]
        )
        status_text += (
            f"üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {operator_info['name']}\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: {session_info['start_time'].strftime('%H:%M:%S')}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {session_info.get('message_count', 0)}\n\n"
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    queue_info = operator_handler.get_queue_info()
    status_text += (
        f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n"
        f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {queue_info['waiting_count']}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {queue_info['active_sessions']}\n"
        f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {queue_info['active_operators']}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã: /help - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, /cancel - –æ—Ç–º–µ–Ω–∞"
    )

    await message.answer(status_text)


async def cmd_cancel(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    current_state = await state.get_state()
    user_status = operator_handler.get_user_status(user_id)

    logger.info(
        f"üö´ –ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status}"
    )

    # –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if user_status == UserStatus.WAITING_OPERATOR:
        success, msg = await operator_handler.cancel_waiting(user_id, bot)
        if success:
            await state.clear()
            await message.answer(
                "‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
        else:
            await message.answer(f"‚ùå {msg}")
    elif user_status == UserStatus.WITH_OPERATOR:
        success = await operator_handler.end_session(
            user_id, bot, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        if success:
            await state.clear()
            await message.answer(
                "‚ùå –°–µ—Å—Å–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
    elif user_status == UserStatus.RATING_OPERATOR:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        operator_handler.set_user_status(user_id, UserStatus.NORMAL)
        await state.clear()
        await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    elif current_state is not None:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    else:
        await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")


async def handle_request_consultant(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º'"""
    try:
        user = callback.from_user
        chat_id = callback.message.chat.id if callback.message else user.id
        
        # –≠—Å–∫–∞–ª–∏—Ä—É–µ–º —Å —è–≤–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await operator_handler.escalate_to_operator(
            user.id,
            callback.message,
            auto_escalation=False,
            bot=bot
        )
        
        if success:
            await state.set_state(OperatorState.WAITING_OPERATOR)
            queue_info = operator_handler.get_queue_info()
            position = len(
                [u for u in queue_info["queue_details"] if u["user_id"] == user.id]
            )
            await callback.message.answer(
                "üìû –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
                f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
                "‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
            )
        else:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    finally:
        try:
            await callback.answer()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")


async def handle_info_about(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    info_text = (
        "üéØ **–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫ (–ù–î–¢)**\n"
        "‚Äî —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—â–∏—Ö—Å—è 9‚Äì11 –∫–ª–∞—Å—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å —Ü–µ–ª—å—é —Ä–∞–∑–≤–∏—Ç–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –Ω–∞—É–∫–µ, —Ç–µ—Ö–Ω–∏–∫–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º.\n\n"
        "üöÄ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:**\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º —à–∫–æ–ª—å–Ω–∏–∫–∞–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è.\n\n"
        "üìö **–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞?**\n"
        "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 –¥–Ω–µ–π, –≤–∫–ª—é—á–∞—é—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, —à–∫–æ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—É—é –≤–Ω–µ—É—á–µ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: —ç–∫—Å–∫—É—Ä—Å–∏–∏, –∑–∞–Ω—è—Ç–∏—è –≤ –±–∞—Å—Å–µ–π–Ω–µ, —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –¥—Ä—É–≥–æ\n\n"
        "üîÑ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã:**\n"
        "–£—Å–ø–µ—à–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ ‚Äî –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ª–∏—Ü–µ–∏ –∏ –≤—É–∑—ã –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π."
    )
    
    await callback.message.edit_text(info_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

async def handle_info_programs(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    info_text = (
        "üìñ **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (15 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π):**\n"
        "–ó–∞–Ω—è—Ç–∏—è –¥–ª—è—Ç—Å—è 72 —á–∞—Å–∞ (6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 4 —á) –≤ –≥—Ä—É–ø–ø–∞—Ö 7‚Äì10 —á–µ–ª–æ–≤–µ–∫.\n\n"
        "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Å –Ω–æ—è–±—Ä—è 2022 –≥.):\n"
        "- –ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω\n"
        "- –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å\n"
        "- –ó–µ–ª—ë–Ω–∞—è —Ö–∏–º–∏—è\n"
        "- –ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è\n"
        "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –õ–∞–∑–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –ú–∞—à–∏–Ω—ã –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–∏, –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "- –ù–∞–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏—è –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "- –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "- –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞\n"
        "- –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Å–≤—è–∑—å\n"
        "- –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –±—É–¥—É—â–µ–≥–æ\n\n"
        "üõ† **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–º–µ–Ω–µ:**\n"
        "–£—á–∞—â–∏–µ—Å—è –æ—Å–≤–∞–∏–≤–∞—é—Ç —Ç–µ–æ—Ä–∏—é –∏ –∑–∞—â–∏—â–∞—é—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –∑–∞—Ç–µ–º —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –¥–∞–ª—å—à–µ –æ–Ω–ª–∞–π–Ω –∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö "
    )
    
    await callback.message.edit_text(info_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

async def handle_info_admission(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    info_text = (
        "üì• **–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫**\n"
        "–û—Ç–±–æ—Ä –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ 2 —ç—Ç–∞–ø–∞: –∑–∞–æ—á–Ω—ã–π (–æ–Ω–ª–∞–π–Ω) –∏ –æ—á–Ω—ã–π (–≤ –æ–±–ª–∞—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è).\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîπ **–≠—Ç–∞–ø 1. –ó–∞–æ—á–Ω—ã–π (–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π)**\n"
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫—É.\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –∏/–∏–ª–∏ –¥–∏–ø–ª–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö, —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏—Ö, –æ–±–ª–∞—Å—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n"
        "**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–º–∞–∫—Å. 30 –±–∞–ª–ª–æ–≤):**\n"
        "- üìå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî 0‚Äì2 –±.\n"
        "- üìå –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –¥–æ 6 –±. (–∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏–¥–µ–∏ ‚Äî 0‚Äì3, –Ω–∞—É—á–Ω–∞—è –Ω–æ–≤–∏–∑–Ω–∞ ‚Äî 0‚Äì3).\n"
        "- üìå –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –¥–æ 6 –±.\n"
        "- üìå –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ‚Äî –¥–æ 8 –±. (–≤—ã–≤–æ–¥—ã, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ª–∏—á–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è).\n"
        "- üìå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî –¥–æ 8 –±. (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç, –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Ä–∏—Å—É–Ω–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã).\n\n"
        "‚ö† –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîπ **–≠—Ç–∞–ø 2. –û—á–Ω—ã–π**\n"
        "–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "1. **–¢–µ—Å—Ç** (–ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–æ 9 –∫–ª–∞—Å—Å–∞):\n"
        "   - –û–±—â–∞—è —Ñ–∏–∑–∏–∫–∞  \n"
        "   - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n"
        "   - –õ–æ–≥–∏–∫–∞  \n"
        "   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ  \n"
        "   - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏  \n"
        "   **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–∞:**\n"
        "     - –ë–ª–æ–∫ –ê ‚Äî 30 –≤–æ–ø—Ä–æ—Å–æ–≤ √ó 1 –±–∞–ª–ª.\n"
        "     - –ë–ª–æ–∫ –ë ‚Äî 10 –≤–æ–ø—Ä–æ—Å–æ–≤ √ó 2 –±–∞–ª–ª–∞.\n"
        "   –ù–∞ –∫–∞–∂–¥—É—é —Å–º–µ–Ω—É –≥–æ—Ç–æ–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π —Ç–µ—Å—Ç. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ —É—á–∏—Ç—å—Å—è –≤ —à–∫–æ–ª–µ –∏ –∏–º–µ—Ç—å —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥–æ–∑–æ—Ä.\n\n"
        "2. **–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ**  \n"
        "   –¶–µ–ª—å ‚Äî –≤—ã—è–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.  \n"
        "   –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "   - –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –¥–∏–ø–ª–æ–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ 1 —ç—Ç–∞–ø–µ.\n"
        "   - –°—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ö–æ–¥ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º.\n"
        "   - –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üìú **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ø–æ –∏—Ç–æ–≥–∞–º 2 —ç—Ç–∞–ø–æ–≤ –ø—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–∞–∑–µ –≤ —É—á–∞—Å—Ç–∏–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω–µ."
    )
    
    await callback.message.edit_text(info_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

async def handle_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞!\n\n"
        "ü§ñ –Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard_rows = [
        [
            InlineKeyboardButton(text="üè´ –û —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ", callback_data="info_about"),
            InlineKeyboardButton(
                text="üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", callback_data="info_programs"
            ),
        ],
        [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="info_admission")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if config.enable_brainstorm:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º –∏–¥–µ–π", callback_data="start_brainstorm"
                )
            ]
        )

    if config.enable_calendar:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω", callback_data="show_calendar"
                )
            ]
        )

    if config.enable_lists:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="check_lists"
                )
            ]
        )

    if config.enable_quiz:
        keyboard_rows.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ö–≤–∏–∑: –ø–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="start_quiz"
                )
            ]
        )

    keyboard_rows.append(
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                callback_data="request_consultant",
            )
        ]
    )

    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()



async def handle_check_lists(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤"""
    if not config.enable_lists:
        await callback.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    try:
        await state.set_state(UserStatus.SEARCHING_LISTS)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞\n\n"
            "üí° –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ –û–¥–Ω–æ —Å–ª–æ–≤–æ ‚Üí –Ω–∞–π–¥–µ—Ç –ª—é–±—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n"
            "‚Ä¢ –î–≤–∞ —Å–ª–æ–≤–∞ ‚Üí –Ω–∞–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–ò–º—è –§–∞–º–∏–ª–∏—è ‚Üî –§–∞–º–∏–ª–∏—è –ò–º—è)\n\n"
            "‚ö†Ô∏è '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä' –ù–ï –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ '–ò–≤–∞–Ω–æ–≤' –∏–ª–∏ —Ç–æ–ª—å–∫–æ '–ü–µ—Ç—Ä'\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞", show_alert=True)

def register_basic_commands(dp, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_menu, Command("menu"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_cancel, Command("cancel"))

    dp.callback_query.register(handle_info_about,F.data == "info_about")
    dp.callback_query.register(handle_info_programs,F.data == "info_programs")
    dp.callback_query.register(handle_info_admission,F.data == "info_admission")
    dp.callback_query.register(handle_check_lists,F.data == "check_lists")
    dp.callback_query.register(handle_back_to_menu,F.data == "back_to_menu")
    
    dp.callback_query.register(
        handle_request_consultant, 
        F.data == "request_consultant"
    )
    
    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
