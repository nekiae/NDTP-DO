import logging
from typing import Optional, Dict, List, Tuple
from datetime import datetime
from enum import Enum
from aiogram import types, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

class UserStatus(Enum):
    NORMAL = "normal"
    WAITING_OPERATOR = "waiting_operator" 
    WITH_OPERATOR = "with_operator"
    RATING_OPERATOR = "rating_operator"

class OperatorState(StatesGroup):
    WAITING_OPERATOR = State()
    CONNECTED_TO_OPERATOR = State()
    RATING_OPERATOR = State()

class EscalationEngine:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò"""
    
    @classmethod
    def analyze_escalation_need(cls, user_message: str, ai_confidence: float = 0.8) -> bool:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ò–ò
        
        Returns:
            needs_escalation (bool)
        """
        # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò –Ω–∏–∑–∫–∞—è - —ç—Å–∫–∞–ª–∏—Ä—É–µ–º
        if ai_confidence < 0.7:
            return True
        
        return False

class OperatorManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        self.operators_config = {
            7148748755: {  # –†–µ–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
                "name": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞",
                "is_active": True,
                "rating": 5.0,
                "total_sessions": 0
            }
        }
        
    def get_active_operators(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        active_operators = []
        
        for op_id, config in self.operators_config.items():
            if config["is_active"]:
                active_operators.append(op_id)
                logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {op_id} –∞–∫—Ç–∏–≤–µ–Ω")
                
        return active_operators
    
    def is_operator(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.operators_config
    
    def get_operator_info(self, operator_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ"""
        return self.operators_config.get(operator_id)

class OperatorHandler:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º"""
    
    def __init__(self):
        self.waiting_queue: Dict[int, Dict] = {}  # –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
        self.active_sessions: Dict[int, Dict] = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.user_states: Dict[int, UserStatus] = {}  # –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.session_history: Dict[int, List] = {}  # –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π
        
        self.operator_manager = OperatorManager()
        self.escalation_engine = EscalationEngine()
        
    def get_user_status(self, user_id: int) -> UserStatus:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, UserStatus.NORMAL)
    
    def set_user_status(self, user_id: int, status: UserStatus):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_states[user_id] = status
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ {status.value}")
    
    async def analyze_message_for_escalation(self, message: str, ai_confidence: float = 0.8) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏"""
        needs_escalation = self.escalation_engine.analyze_escalation_need(message, ai_confidence)
        
        return {
            "needs_escalation": needs_escalation,
            "confidence": ai_confidence,
            "reason": "low_ai_confidence" if needs_escalation else "confident_response"
        }
    
    async def escalate_to_operator(self, user_id: int, message: types.Message, 
                                 auto_escalation: bool = False, bot=None) -> bool:
        """–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        
        if self.get_user_status(user_id) != UserStatus.NORMAL:
            return False
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        queue_position = len(self.waiting_queue) + 1
        self.waiting_queue[user_id] = {
            "user_id": user_id,
            "username": message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "first_name": message.from_user.first_name or "",
            "chat_id": message.chat.id,
            "request_time": datetime.now(),
            "original_message": message.text,
            "queue_position": queue_position,
            "auto_escalation": auto_escalation,
            "message_history": []
        }
        
        self.set_user_status(user_id, UserStatus.WAITING_OPERATOR)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        await self._notify_available_operators(user_id, bot)
        
        return True
    
    async def _notify_available_operators(self, user_id: int, bot=None):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        if user_id not in self.waiting_queue:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è")
            return
            
        request_info = self.waiting_queue[user_id]
        active_operators = self.operator_manager.get_active_operators()
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(active_operators)} - {active_operators}")
        
        if not active_operators:
            logger.warning("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        notification_text = (
            f"üìù **–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å**\n\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {request_info['first_name']}\n"
            f"üì± Username: @{request_info['username']}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {request_info['request_time'].strftime('%H:%M:%S')}\n"
            f"üìã **–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:** {request_info['queue_position']}\n\n"
            f"üí¨ **–ó–∞–ø—Ä–æ—Å:**\n_{request_info['original_message']}_"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å", 
                    callback_data=f"accept_request_{user_id}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        if bot:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {len(active_operators)} –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
            for operator_id in active_operators:
                try:
                    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}...")
                    await bot.send_message(
                        operator_id, 
                        notification_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")
        else:
            logger.error("‚ùå –û–±—ä–µ–∫—Ç bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!")
    
    def add_user_message_to_history(self, user_id: int, message: str, timestamp: datetime = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if timestamp is None:
            timestamp = datetime.now()
            
        message_entry = {
            'text': message,
            'timestamp': timestamp,
            'type': 'user'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–º
        if user_id in self.waiting_queue:
            if 'message_history' not in self.waiting_queue[user_id]:
                self.waiting_queue[user_id]['message_history'] = []
            
            self.waiting_queue[user_id]['message_history'].append(message_entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 5 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.waiting_queue[user_id]['message_history']) > 5:
                self.waiting_queue[user_id]['message_history'] = \
                    self.waiting_queue[user_id]['message_history'][-5:]
    
    async def accept_request(self, operator_id: int, user_id: int, bot: Bot) -> Tuple[bool, str]:
        """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        
        if not self.operator_manager.is_operator(operator_id):
            return False, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã"
        
        if user_id not in self.waiting_queue:
            return False, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏"
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        request_info = self.waiting_queue.pop(user_id)
        
        operator_config = self.operator_manager.get_operator_info(operator_id)
        
        self.active_sessions[user_id] = {
            **request_info,
            "operator_id": operator_id,
            "operator_name": operator_config["name"],
            "connection_time": datetime.now(),
            "last_activity": datetime.now(),
            "session_messages": [],
            "session_id": f"session_{user_id}_{int(datetime.now().timestamp())}"
        }
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.set_user_status(user_id, UserStatus.WITH_OPERATOR)
        
        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        await self._reorder_queue()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            end_session_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_user_session")]
            ])
            
            await bot.send_message(
                request_info["chat_id"],
                f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É!\n\n"
                f"üìû –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n"
                f"üí¨ –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã\n\n"
                f"‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {datetime.now().strftime('%H:%M')}",
                reply_markup=end_session_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            operator_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"operator_end_session_{user_id}")]
            ])
            
            await bot.send_message(
                operator_id,
                f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request_info['first_name']}\n"
                f"üí¨ –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {request_info['original_message']}\n\n"
                f"üìû –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                reply_markup=operator_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ {operator_id}: {e}")
        
        return True, f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request_info['first_name']}"
    
    async def _reorder_queue(self):
        """–ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        sorted_queue = sorted(
            self.waiting_queue.items(), 
            key=lambda x: x[1]["request_time"]
        )
        
        for i, (user_id, request_info) in enumerate(sorted_queue, 1):
            self.waiting_queue[user_id]["queue_position"] = i
    
    async def forward_user_message(self, user_id: int, message: types.Message, bot: Bot) -> bool:
        """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        if user_id not in self.active_sessions:
            return False
        
        session = self.active_sessions[user_id]
        operator_id = session["operator_id"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
        session["session_messages"].append({
            "from": "user",
            "text": message.text or "[–º–µ–¥–∏–∞]",
            "timestamp": datetime.now(),
            "message_type": "text" if message.text else "media"
        })
        
        session["last_activity"] = datetime.now()
        
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            prefix = f"üí¨ {session['first_name']}:"
            
            if message.text:
                await bot.send_message(operator_id, f"{prefix} {message.text}")
            elif message.photo:
                await bot.send_photo(operator_id, message.photo[-1].file_id, 
                                   caption=f"{prefix} [—Ñ–æ—Ç–æ]")
            elif message.document:
                await bot.send_document(operator_id, message.document.file_id,
                                      caption=f"{prefix} [–¥–æ–∫—É–º–µ–Ω—Ç]")
            elif message.voice:
                await bot.send_voice(operator_id, message.voice.file_id,
                                   caption=f"{prefix} [–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")
            return False
    
    async def forward_operator_message(self, operator_id: int, message_text: str, bot: Bot) -> Tuple[bool, str]:
        """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        user_session = None
        
        for user_id, session in self.active_sessions.items():
            if session["operator_id"] == operator_id:
                user_session = session
                break
        
        if not user_session:
            return False, "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        user_session["session_messages"].append({
            "from": "operator",
            "text": message_text,
            "timestamp": datetime.now(),
            "message_type": "text"
        })
        
        user_session["last_activity"] = datetime.now()
        
        try:
            await bot.send_message(
                user_session["chat_id"],
                message_text
            )
            return True, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
    
    async def end_session(self, user_id: int, bot: Bot, reason: str = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞") -> bool:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        if user_id not in self.active_sessions:
            return False
        
        session = self.active_sessions.pop(user_id)
        operator_id = session["operator_id"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        session_duration = datetime.now() - session["connection_time"]
        session["end_time"] = datetime.now()
        session["duration"] = session_duration.total_seconds()
        session["end_reason"] = reason
        
        self.session_history[user_id] = self.session_history.get(user_id, [])
        self.session_history[user_id].append(session)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
        self.set_user_status(user_id, UserStatus.RATING_OPERATOR)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ—Ü–µ–Ω–∫–∏
        try:
            rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_5_{operator_id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_4_{operator_id}")
                ],
                [
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_3_{operator_id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_2_{operator_id}")
                ],
                [
                    InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_1_{operator_id}"),
                    InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rate_skip")
                ]
            ])
            
            await bot.send_message(
                session["chat_id"],
                f"üìû –°–µ—Å—Å–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º {reason}.\n\n"
                f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(session_duration.total_seconds() // 60)} –º–∏–Ω\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(session['session_messages'])}\n\n"
                f"‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
                reply_markup=rating_keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ—Ü–µ–Ω–∫–∏: {e}")
            self.set_user_status(user_id, UserStatus.NORMAL)
        
        return True
    
    async def rate_operator(self, user_id: int, operator_id: int, rating: int, bot: Bot) -> bool:
        """–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        if self.get_user_status(user_id) != UserStatus.RATING_OPERATOR:
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        if user_id in self.session_history:
            last_session = self.session_history[user_id][-1]
            last_session["user_rating"] = rating
            last_session["rating_time"] = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_config = self.operator_manager.operators_config.get(operator_id)
        if operator_config:
            total_sessions = operator_config["total_sessions"]
            current_rating = operator_config["rating"]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            new_rating = ((current_rating * total_sessions) + rating) / (total_sessions + 1)
            operator_config["rating"] = round(new_rating, 2)
            operator_config["total_sessions"] += 1
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        self.set_user_status(user_id, UserStatus.NORMAL)
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É
        try:
            rating_text = "‚≠ê" * rating if rating > 0 else "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
            await bot.send_message(
                self.active_sessions.get(user_id, {}).get("chat_id") or user_id,
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating_text}\n\n"
                f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {e}")
        
        return True
    
    async def cancel_waiting(self, user_id: int, bot: Bot) -> Tuple[bool, str]:
        """–û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        if user_id not in self.waiting_queue:
            return False, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è"
        
        self.waiting_queue.pop(user_id)
        self.set_user_status(user_id, UserStatus.NORMAL)
        
        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        await self._reorder_queue()
        
        return True, "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    
    def get_queue_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏"""
        total_waiting = len(self.waiting_queue)
        total_active = len(self.active_sessions)
        active_operators = len(self.operator_manager.get_active_operators())
        
        return {
            "waiting_count": total_waiting,
            "active_sessions": total_active,
            "active_operators": active_operators,
            "queue_details": list(self.waiting_queue.values())
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
operator_handler = OperatorHandler()

def get_operator_handler() -> OperatorHandler:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    return operator_handler

def register_operator_handlers(dp, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    from aiogram import F
    from aiogram.filters import Command
    
    logger.info("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    @dp.message(Command("help"))
    async def help_command(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = operator_handler.get_user_status(user_id)
        
        if status == UserStatus.WAITING_OPERATOR:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ", callback_data="cancel_waiting")]
            ])
            await message.answer(
                "‚è≥ –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.",
                reply_markup=keyboard
            )
            return
        
        elif status == UserStatus.WITH_OPERATOR:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_user_session")]
            ])
            await message.answer(
                "üí¨ –í—ã —Å–µ–π—á–∞—Å –æ–±—â–∞–µ—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.\n"
                "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é.",
                reply_markup=keyboard
            )
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º", callback_data="request_operator")]
        ])
        
        await message.answer(
            "ü§ù **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞?**\n\n"
            "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            "–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–∏ –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ç—Å–∫–æ–º —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–µ.\n\n"
            "üí° *–û–±—ã—á–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    @dp.callback_query(F.data == "request_operator")
    async def request_operator_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        await callback.answer()
        
        user_id = callback.from_user.id
        success = await operator_handler.escalate_to_operator(
            user_id, callback.message, auto_escalation=False, bot=bot
        )
        
        if success:
            queue_info = operator_handler.get_queue_info()
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ", callback_data="cancel_waiting")]
            ])
            
            await callback.message.edit_text(
                f"‚úÖ **–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º!**\n\n"
                f"üìã –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: **{queue_info['waiting_count']}**\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {queue_info['active_sessions']}\n"
                f"üü¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤: {queue_info['active_operators']}\n\n"
                f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: **2-5 –º–∏–Ω—É—Ç**\n"
                f"üí¨ –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ."
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    @dp.callback_query(F.data.startswith("accept_request_"))
    async def accept_request_callback(callback: types.CallbackQuery):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        await callback.answer()
        
        try:
            user_id = int(callback.data.split("_")[-1])
            operator_id = callback.from_user.id
            
            success, message_text = await operator_handler.accept_request(
                operator_id, user_id, bot
            )
            
            if success:
                await callback.message.edit_text(
                    f"‚úÖ {message_text}\n\n"
                    f"üìû –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                )
            else:
                await callback.message.edit_text(f"‚ùå {message_text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è
    @dp.callback_query(F.data == "cancel_waiting")
    async def cancel_waiting_callback(callback: types.CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        await callback.answer()
        
        user_id = callback.from_user.id
        success, message_text = await operator_handler.cancel_waiting(user_id, bot)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ {message_text}\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º —Å–Ω–æ–≤–∞!"
            )
        else:
            await callback.message.edit_text(f"‚ùå {message_text}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @dp.callback_query(F.data == "end_user_session")
    async def end_user_session_callback(callback: types.CallbackQuery):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        await callback.answer()
        
        user_id = callback.from_user.id
        success = await operator_handler.end_session(
            user_id, bot, reason="–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        
        if success:
            await callback.message.edit_text(
                "üìû –°–µ—Å—Å–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, "
                "–º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å."
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    @dp.callback_query(F.data.startswith("operator_end_session_"))
    async def operator_end_session_callback(callback: types.CallbackQuery):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        await callback.answer()
        
        try:
            user_id = int(callback.data.split("_")[-1])
            success = await operator_handler.end_session(
                user_id, bot, reason="–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"
            )
            
            if success:
                await callback.message.edit_text(
                    "‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
                )
            else:
                await callback.message.edit_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏
    @dp.callback_query(F.data.startswith("rate_"))
    async def rate_operator_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        await callback.answer()
        
        user_id = callback.from_user.id
        
        if callback.data == "rate_skip":
            operator_handler.set_user_status(user_id, UserStatus.NORMAL)
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
            return
        
        try:
            parts = callback.data.split("_")
            rating = int(parts[1])
            operator_id = int(parts[2])
            
            success = await operator_handler.rate_operator(
                user_id, operator_id, rating, bot
            )
            
            if success:
                rating_text = "‚≠ê" * rating
                await callback.message.edit_text(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating_text}\n\n"
                    f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!\n"
                    f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
                )
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏
    @dp.message(F.text)
    async def handle_user_messages(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = message.from_user.id
        status = operator_handler.get_user_status(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if status == UserStatus.WAITING_OPERATOR:
            operator_handler.add_user_message_to_history(
                user_id, message.text, message.date
            )
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif status == UserStatus.WITH_OPERATOR:
            success = await operator_handler.forward_user_message(
                user_id, message, bot
            )
            if not success:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è."
                )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    @dp.message(F.text)
    async def handle_operator_messages(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        operator_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
        if not operator_handler.operator_manager.is_operator(operator_id):
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success, result_message = await operator_handler.forward_operator_message(
            operator_id, message.text, bot
        )
        
        if not success:
            await message.answer(f"‚ùå {result_message}")
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
