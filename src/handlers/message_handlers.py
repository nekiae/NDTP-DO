"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π NDTP Bot
"""
import asyncio
import logging
import time

from aiogram import Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from ..core.config import config
from ..core.constants import get_system_prompt
from ..handlers.operator_handler import operator_handler, UserStatus
from ..services.deepseek_client import deepseek_client
from ..services.context_service import get_enhanced_context

logger = logging.getLogger(__name__)


class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM"""
    SEARCHING_LISTS = "searching_lists"


async def handle_text_message(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    current_state = await state.get_state()

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if operator_handler.operator_manager.is_operator(user_id):
        logger.warning(
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {user_id} –ø–æ–ø–∞–ª–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        )
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª–µ–π
    if _is_special_module_state(message, current_state):
        return

    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_status = operator_handler.get_user_status(user_id)
    logger.info(f"üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_status.value}")

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if user_status == UserStatus.WAITING_OPERATOR:
        await _handle_waiting_operator(message, user_id)
    elif user_status == UserStatus.WITH_OPERATOR:
        await _handle_with_operator(message, user_id, bot)
    elif user_status == UserStatus.RATING_OPERATOR:
        await _handle_rating_required(message)
    elif current_state == UserState.SEARCHING_LISTS:
        await _handle_lists_search(message, state)
    else:
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
        await _handle_ai_response(message, bot)


def _is_special_module_state(message: Message, current_state: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–æ–¥—É–ª–µ–π"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É /quiz –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞
    if config.enable_quiz and (
        message.text == "/quiz" or 
        (current_state and current_state.startswith("QuizState"))
    ):
        return True

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É /brainstorm –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞  
    if config.enable_brainstorm and (
        message.text == "/brainstorm" or
        (current_state and current_state.startswith("BrainstormState"))
    ):
        return True

    return False


async def _handle_waiting_operator(message: Message, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    logger.info(
        f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    operator_handler.add_user_message_to_history(user_id, message.text)
    await message.answer(
        "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    )


async def _handle_with_operator(message: Message, user_id: int, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"""
    logger.info(
        f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±—â–∞–µ—Ç—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    success = await operator_handler.forward_user_message(user_id, message, bot)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")


async def _handle_rating_required(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞"""
    await message.answer(
        "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
    )


async def _handle_lists_search(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await message.answer("üîç –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    await state.clear()


async def _handle_ai_response(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    user_id = message.from_user.id
    logger.info(
        f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "
        f"'{message.text[:50]}{'...' if len(message.text) > 50 else ''}'"
    )
    
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
        
        # –ó–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        try:
            operator_handler.remember_user_message(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
        context = await get_enhanced_context(message.text)
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context[:200]}..."
            if len(context) > 200
            else f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–ò
        system_message = get_system_prompt()
        user_message = f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{context}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {message.text}

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ.
"""

        messages = [
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_message},
        ]

        logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sent_message = await message.answer("ü§î –î—É–º–∞—é...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await _process_streaming_response(message, sent_message, messages, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
        )


async def _process_streaming_response(
    original_message: Message, 
    sent_message: Message, 
    messages: list, 
    bot: Bot
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
    response_text = ""
    last_update = 0
    last_typing_time = 0
    update_interval = 100  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
    user_id = original_message.from_user.id

    try:
        async for chunk in deepseek_client.get_streaming_completion(
            messages, temperature=0.3
        ):
            if chunk:
                response_text += chunk
                current_time = time.time()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N —Å–∏–º–≤–æ–ª–æ–≤ –ò –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
                if (
                    len(response_text) - last_update >= update_interval
                    and current_time - last_typing_time >= 2.0
                ):
                    await _update_message_safely(
                        bot, sent_message, response_text + " ‚ñå"
                    )
                    last_update = len(response_text)
                    last_typing_time = current_time
                    await asyncio.sleep(1.0)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        if response_text:
            await _update_message_safely(bot, sent_message, response_text)
            logger.info(
                f"‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤ "
                f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await _show_escalation_button_if_needed(original_message, response_text)
        else:
            await _update_message_safely(
                bot, sent_message,
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
            )

    except Exception as streaming_error:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {streaming_error}")
        await _update_message_safely(
            bot, sent_message,
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
        )


async def _update_message_safely(bot: Bot, message: Message, text: str) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å Markdown
            await bot.edit_message_text(
                text,
                chat_id=message.chat.id,
                message_id=message.message_id,
                parse_mode="Markdown",
            )
        except Exception:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.edit_message_text(
                text,
                chat_id=message.chat.id,
                message_id=message.message_id,
            )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        logger.debug(f"–ò–Ω—Ñ–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")


async def _show_escalation_button_if_needed(message: Message, response_text: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    try:
        lower_text = response_text.lower()
        if ("/help" in lower_text) or ("–æ–±—Ä–∞—Ç–∏—Ç" in lower_text and "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in lower_text):
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

            help_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                            callback_data="escalate_from_last",
                        )
                    ]
                ]
            )
            await message.answer(
                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                reply_markup=help_kb,
            )
    except Exception as kb_error:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {kb_error}")


async def handle_media_message(message: Message, media_type: str, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        media_type: –¢–∏–ø –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç.–¥.)
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if operator_handler.operator_manager.is_operator(user_id):
        logger.info(f"üì® –ú–µ–¥–∏–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {user_id}: {media_type}")
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await operator_handler.forward_operator_media(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞")
        return

    user_status = operator_handler.get_user_status(user_id)
    logger.info(
        f"üìé –ü–æ–ª—É—á–µ–Ω–æ {media_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status.value}"
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.WAITING_OPERATOR:
        await message.answer(
            "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    if user_status == UserStatus.WITH_OPERATOR:
        logger.info(
            f"üí¨ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º {media_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"
        )
        success = await operator_handler.forward_user_message(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.RATING_OPERATOR:
        await message.answer(
            "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
        )
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ò–ò
    await message.answer(
        f"üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ ({media_type}) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
    )


def register_message_handlers(dp, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.message.register(
        lambda msg, state: handle_text_message(msg, state, bot),
        F.text
    )
    
    # –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.message.register(
        lambda msg: handle_media_message(msg, "—Ñ–æ—Ç–æ", bot),
        F.photo
    )
    dp.message.register(
        lambda msg: handle_media_message(msg, "–¥–æ–∫—É–º–µ–Ω—Ç", bot),
        F.document
    )
    dp.message.register(
        lambda msg: handle_media_message(msg, "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", bot),
        F.voice
    )
    dp.message.register(
        lambda msg: handle_media_message(msg, "–≤–∏–¥–µ–æ", bot),
        F.video
    )
    dp.message.register(
        lambda msg: handle_media_message(msg, "–∞—É–¥–∏–æ", bot),
        F.audio
    )
    dp.message.register(
        lambda msg: handle_media_message(msg, "—Å—Ç–∏–∫–µ—Ä", bot),
        F.sticker
    )
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
