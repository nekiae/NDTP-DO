"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π NDTP Bot
"""
import asyncio
import logging
import time

from aiogram import Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message,InlineKeyboardButton, InlineKeyboardMarkup

from src.services.parsers.lists_parser import search_name_in_lists
from src.utils.helpers import shorten_document_name
from ..core.config import config
from ..core.constants import get_system_prompt
from ..handlers.operator_handler import operator_handler
from src.core.constants import UserStatus
from ..services.deepseek_client import deepseek_client
from ..services.context_service import get_enhanced_context

logger = logging.getLogger(__name__)




async def handle_text_message(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    current_state = await state.get_state()

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if operator_handler.operator_manager.is_operator(user_id):
        logger.warning(
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {user_id} –ø–æ–ø–∞–ª–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        )
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª–µ–π
    if _is_special_module_state(message, current_state):
        return

    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_status = operator_handler.get_user_status(user_id)
    logger.info(f"üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_status}")

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if user_status == UserStatus.WAITING_OPERATOR:
        await _handle_waiting_operator(message, user_id)
    elif user_status == UserStatus.WITH_OPERATOR:
        await _handle_with_operator(message, user_id, bot)
    elif user_status == UserStatus.RATING_OPERATOR:
        await _handle_rating_required(message)
    elif current_state == UserStatus.SEARCHING_LISTS:
        await _handle_lists_search(message, state)
    else:
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
        await _handle_ai_response(message, bot)


def _is_special_module_state(message: Message, current_state: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–æ–¥—É–ª–µ–π"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É /quiz –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞
    if config.enable_quiz and (
        message.text == "/quiz" or 
        (current_state and current_state.startswith("QuizState"))
    ):
        return True

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É /brainstorm –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–µ–π–Ω—à—Ç–æ—Ä–º–∞  
    if config.enable_brainstorm and (
        message.text == "/brainstorm" or
        (current_state and current_state.startswith("BrainstormState"))
    ):
        return True

    return False


async def _handle_waiting_operator(message: Message, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    logger.info(
        f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    operator_handler.add_user_message_to_history(user_id, message.text)
    await message.answer(
        "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    )


async def _handle_with_operator(message: Message, user_id: int, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"""
    logger.info(
        f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±—â–∞–µ—Ç—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    success = await operator_handler.forward_user_message(user_id, message, bot)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")


async def _handle_rating_required(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞"""
    await message.answer(
        "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
    )


async def _handle_lists_search(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        query = message.text.strip()
        
        if not query:
            await message.answer(
                "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
                "üìù –ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_message = await message.answer(f"üîç –ü–æ–∏—Å–∫: {query}\n\n–ü—Ä–æ–≤–µ—Ä—è—é —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await search_name_in_lists(query, search_type='student_lists')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not results:
            response_text = (
                f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: '{query}'\n\n"
                "üîç –í —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏–º–µ–Ω–∏", callback_data="check_lists")],
                [InlineKeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º", callback_data="request_consultant")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        else:
            response_text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n\n"
            response_text += f"üë§ –ü–æ–∏—Å–∫: {query}\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–º–µ–Ω–∞–º
            shifts_data = {}
            for result in results:
                shift_name = result['shift']
                if shift_name not in shifts_data:
                    shifts_data[shift_name] = []
                shifts_data[shift_name].append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –≥–æ–¥—É (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            def extract_year_from_shift(shift_name):
                import re
                # –ò—â–µ–º –≥–æ–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–º–µ–Ω—ã
                year_match = re.search(r'20\d{2}', shift_name)
                if year_match:
                    return int(year_match.group())
                
                # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
                months_order = {
                    '—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4,
                    '–º–∞–π': 5, '–∏—é–Ω—å': 6, '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8, 
                    '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12
                }
                
                shift_lower = shift_name.lower()
                for month, order in months_order.items():
                    if month in shift_lower:
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                        from datetime import datetime
                        current_year = datetime.now().year
                        return current_year * 100 + order  # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                
                return 0  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É/–º–µ—Å—è—Ü—É (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            sorted_shifts = sorted(shifts_data.items(), 
                                key=lambda x: extract_year_from_shift(x[0]), 
                                reverse=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
            for i, (shift_name, shift_results) in enumerate(sorted_shifts, 1):
                response_text += f"üìã {shift_name}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                unique_docs = set()
                for result in shift_results:
                    doc_name = result['document']
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
                    short_name = shorten_document_name(doc_name)
                    unique_docs.add(short_name)
                
                for doc in sorted(unique_docs):
                    response_text += f"   ‚úì {doc}\n"
                
                response_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            response_text += "üí° –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞\n"
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ, –æ–±—Ä–µ–∑–∞–µ–º
            if len(response_text) > 3500:
                response_text = response_text[:3500] + "\n\nüìÑ *–ü–æ–∫–∞–∑–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã*"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∏–º–µ–Ω–∏", callback_data="check_lists")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await search_message.edit_text(response_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö: {e}")
        await message.answer(
            "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º", callback_data="request_consultant")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
    await state.clear()


async def _handle_ai_response(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    user_id = message.from_user.id
    logger.info(
        f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "
        f"'{message.text[:50]}{'...' if len(message.text) > 50 else ''}'"
    )
    
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
        
        # –ó–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        try:
            operator_handler.remember_user_message(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
        context = await get_enhanced_context(message.text)
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context[:200]}..."
            if len(context) > 200
            else f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–ò
        system_message = get_system_prompt()
        user_message = f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{context}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {message.text}

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ.
"""

        messages = [
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_message},
        ]

        logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sent_message = await message.answer("ü§î –î—É–º–∞—é...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await _process_streaming_response(message, sent_message, messages, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
        )


async def _process_streaming_response(
    original_message: Message, 
    sent_message: Message, 
    messages: list, 
    bot: Bot
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
    response_text = ""
    last_update = 0
    last_typing_time = 0
    update_interval = 100  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
    user_id = original_message.from_user.id

    try:
        async for chunk in deepseek_client.get_streaming_completion(
            messages, temperature=0.3
        ):
            if chunk:
                response_text += chunk
                current_time = time.time()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N —Å–∏–º–≤–æ–ª–æ–≤ –ò –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
                if (
                    len(response_text) - last_update >= update_interval
                    and current_time - last_typing_time >= 2.0
                ):
                    await _update_message_safely(
                        bot, sent_message, response_text + " ‚ñå"
                    )
                    last_update = len(response_text)
                    last_typing_time = current_time
                    await asyncio.sleep(1.0)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        if response_text:
            await _update_message_safely(bot, sent_message, response_text)
            logger.info(
                f"‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤ "
                f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await _show_escalation_button_if_needed(original_message, response_text)
        else:
            await _update_message_safely(
                bot, sent_message,
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
            )

    except Exception as streaming_error:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {streaming_error}")
        await _update_message_safely(
            bot, sent_message,
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
        )


async def _update_message_safely(bot: Bot, message: Message, text: str) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å Markdown
            await bot.edit_message_text(
                text,
                chat_id=message.chat.id,
                message_id=message.message_id,
                parse_mode="Markdown",
            )
        except Exception:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.edit_message_text(
                text,
                chat_id=message.chat.id,
                message_id=message.message_id,
            )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        logger.debug(f"–ò–Ω—Ñ–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")


async def _show_escalation_button_if_needed(message: Message, response_text: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    try:
        lower_text = response_text.lower()
        if ("/help" in lower_text) or ("–æ–±—Ä–∞—Ç–∏—Ç" in lower_text and "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in lower_text):
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

            help_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                            callback_data="escalate_from_last",
                        )
                    ]
                ]
            )
            await message.answer(
                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                reply_markup=help_kb,
            )
    except Exception as kb_error:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {kb_error}")


async def handle_media_message(message: Message, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if operator_handler.operator_manager.is_operator(user_id):
        logger.info(f"üì® –ú–µ–¥–∏–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {user_id}")
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await operator_handler.forward_operator_media(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞")
        return

    user_status = operator_handler.get_user_status(user_id)
    logger.info(
        f"üìé –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status}"
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.WAITING_OPERATOR:
        await message.answer(
            "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    if user_status == UserStatus.WITH_OPERATOR:
        logger.info(
            f"üí¨ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"
        )
        success = await operator_handler.forward_user_message(user_id, message, bot)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    if user_status == UserStatus.RATING_OPERATOR:
        await message.answer(
            "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
        )
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ò–ò
    await message.answer(
        "üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /help"
    )


def register_message_handlers(dp, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.message.register(
        handle_text_message,
        F.text
    )
    

    dp.message.register(
        handle_media_message,
        F.audio, F.sticker, F.video, F.voice, F.document, F.photo
    )

    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
