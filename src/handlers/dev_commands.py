"""
DEV ONLY - –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
"""
import logging

from aiogram import Bot
from aiogram.filters import Command
from aiogram.types import Message

from ..core.config import config
from ..services.context_service import get_rag_stats, reload_knowledge_base

logger = logging.getLogger(__name__)


# DEV ONLY - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º
async def cmd_test_rag(message: Message) -> None:
    """DEV ONLY - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    test_queries = [
        "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 
        "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å",
        "–ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è",
        "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫",
    ]

    response_text = "üîß DEV ONLY - –¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã:\n\n"
    
    from ..services.context_service import _get_best_rag_context

    for query in test_queries:
        logger.info(f"DEV: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        try:
            context = await _get_best_rag_context(query)
            
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π" in context.lower():
                response_text += f"‚ùå '{query}' - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            else:
                response_text += f"‚úÖ '{query}' - –Ω–∞–π–¥–µ–Ω–æ ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
        except Exception as e:
            response_text += f"‚ö†Ô∏è '{query}' - –æ—à–∏–±–∫–∞: {str(e)[:50]}...\n"

    await message.answer(response_text)


# DEV ONLY - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è  
async def cmd_test_location(message: Message) -> None:
    """DEV ONLY - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    test_queries = [
        "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫",
        "–∞–¥—Ä–µ—Å —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞", 
        "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è",
        "–∞–¥—Ä–µ—Å",
    ]

    response_text = "üó∫Ô∏è DEV ONLY - –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n\n"
    
    from ..services.context_service import _get_best_rag_context

    for query in test_queries:
        logger.info(f"DEV: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {query}")
        try:
            context = await _get_best_rag_context(query)

            if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π" in context.lower():
                response_text += f"‚ùå '{query}' - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è" in context or "–ú–æ—Å–∫–≤–∞" in context:
                    response_text += f"‚úÖ '{query}' - –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω\n"
                else:
                    response_text += f"‚ö†Ô∏è '{query}' - –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –±–µ–∑ –∞–¥—Ä–µ—Å–∞\n"
        except Exception as e:
            response_text += f"‚ö†Ô∏è '{query}' - –æ—à–∏–±–∫–∞: {str(e)[:50]}...\n"

    await message.answer(response_text)


# DEV ONLY - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
async def cmd_reload_kb(message: Message) -> None:
    """DEV ONLY - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    try:
        success = await reload_knowledge_base()
        if success:
            await message.answer("‚úÖ DEV ONLY - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await message.answer("‚ùå DEV ONLY - –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    except Exception as e:
        logger.error(f"DEV: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        await message.answer(f"‚ùå DEV ONLY - –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")


# DEV ONLY - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º
async def cmd_rag_stats(message: Message) -> None:
    """DEV ONLY - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö RAG —Å–∏—Å—Ç–µ–º"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    try:
        stats = get_rag_stats()
        
        response_text = "üìä DEV ONLY - –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê RAG –°–ò–°–¢–ï–ú\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º
        response_text += "üîÑ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º:\n"
        for system, available in stats["systems_available"].items():
            status = "‚úÖ" if available else "‚ùå"
            ready_status = "üü¢" if stats["systems_ready"].get(system, False) else "üî¥"
            response_text += f"  {status} {ready_status} {system.capitalize()} RAG\n"
        
        response_text += f"\nüéØ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {stats['current_mode']}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π RAG
        if "modern_stats" in stats:
            modern = stats["modern_stats"]
            if "error" not in modern:
                response_text += f"""üìö –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG (ChromaDB):
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {modern.get('total_documents', 0)}
‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–π: {modern.get('collections_count', 1)}
‚Ä¢ –ú–æ–¥–µ–ª—å: {modern.get('model_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: {modern.get('last_indexed', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {modern.get('db_size', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

"""
            else:
                response_text += f"üìö –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è RAG: –û—à–∏–±–∫–∞ - {modern['error']}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RAG
        if "optimized_stats" in stats:
            optimized = stats["optimized_stats"]
            if "error" not in optimized:
                response_text += f"üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG: {optimized}\n\n"
            else:
                response_text += f"üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RAG: –û—à–∏–±–∫–∞ - {optimized['error']}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–æ–≤–æ–π RAG
        if "basic_stats" in stats:
            basic = stats["basic_stats"]
            if "error" not in basic:
                kb_status = "‚úÖ" if basic.get("knowledge_base_loaded", False) else "‚ùå"
                kb_size = basic.get("kb_size", 0)
                response_text += f"""üìñ –ë–∞–∑–æ–≤–∞—è RAG:
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {kb_status}
‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {kb_size:,} —Å–∏–º–≤–æ–ª–æ–≤

"""
            else:
                response_text += f"üìñ –ë–∞–∑–æ–≤–∞—è RAG: –û—à–∏–±–∫–∞ - {basic['error']}\n\n"
        
        response_text += "üí° DEV INFO: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–π —Å–∏—Å—Ç–µ–º—ã"
        
        await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"DEV: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG: {e}")
        await message.answer(f"‚ùå DEV ONLY - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


# DEV ONLY - –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async def cmd_test_api(message: Message) -> None:
    """DEV ONLY - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º API"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    response_text = "üîå DEV ONLY - –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:\n\n"
    
    # –¢–µ—Å—Ç DeepSeek API
    try:
        from ..services.deepseek_client import deepseek_client
        
        api_working = await deepseek_client.test_connection()
        
        if api_working:
            response_text += "‚úÖ DeepSeek API - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            response_text += "‚ùå DeepSeek API - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        usage_stats = deepseek_client.get_usage_stats()
        response_text += f"   üîë API –∫–ª—é—á: {'‚úÖ' if usage_stats['has_api_key'] else '‚ùå'}\n"
        response_text += f"   üåê URL: {usage_stats['api_url']}\n"
        response_text += f"   üîÑ –õ–∏–º–∏—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {usage_stats['concurrency_limit']}\n\n"
        
    except Exception as e:
        response_text += f"‚ùå DeepSeek API - –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)[:100]}...\n\n"
    
    await message.answer(response_text)


# DEV ONLY - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def cmd_config_info(message: Message) -> None:
    """DEV ONLY - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    response_text = "‚öôÔ∏è DEV ONLY - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
    
    response_text += f"üêõ DEBUG —Ä–µ–∂–∏–º: {'‚úÖ' if config.debug else '‚ùå'}\n"
    response_text += f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {config.project_root}\n"
    response_text += f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.log_level}\n\n"
    
    response_text += "üîß –ú–æ–¥—É–ª–∏:\n"
    response_text += f"  üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {'‚úÖ' if config.enable_calendar else '‚ùå'}\n"
    response_text += f"  üéØ –ö–≤–∏–∑: {'‚úÖ' if config.enable_quiz else '‚ùå'}\n"
    response_text += f"  üß† –ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º: {'‚úÖ' if config.enable_brainstorm else '‚ùå'}\n"
    response_text += f"  üìã –°–ø–∏—Å–∫–∏: {'‚úÖ' if config.enable_lists else '‚ùå'}\n"
    response_text += f"  üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {'‚úÖ' if config.enable_documents else '‚ùå'}\n\n"
    
    response_text += "‚ö° –õ–∏–º–∏—Ç—ã:\n"
    response_text += f"  ‚è∞ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {config.hourly_request_limit}\n"
    response_text += f"  üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å LLM: {config.llm_concurrency_limit}\n\n"
    
    response_text += f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.admin_ids)}\n"
    response_text += f"üóÑÔ∏è RAG —Ä–µ–∂–∏–º: {config.rag_mode}\n"
    
    await message.answer(response_text)


def register_dev_commands(dp, bot: Bot) -> None:
    """DEV ONLY - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    if not config.debug:
        logger.info("üö´ DEV –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã (DEBUG=false)")
        return
        
    dp.message.register(cmd_test_rag, Command("test_rag"))
    dp.message.register(cmd_test_location, Command("test_location"))
    dp.message.register(cmd_reload_kb, Command("reload_kb"))
    dp.message.register(cmd_rag_stats, Command("rag_stats"))
    dp.message.register(cmd_test_api, Command("test_api"))
    dp.message.register(cmd_config_info, Command("config_info"))
    
    logger.info("üêõ DEV ONLY –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
