import json
import logging
import asyncio
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional
from aiogram import Bot

logger = logging.getLogger(__name__)

class NotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω"""
    
    def __init__(self):
        self.subscriptions_file = "notification_subscriptions.json"
        self.schedule_hash_file = "schedule_hash.json"
        self.bot = None
        
    def set_bot(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.bot = bot
    
    def load_subscriptions(self) -> Dict[str, List[int]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.subscriptions_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {"schedule_updates": [], "application_reminders": []}
    
    def save_subscriptions(self, subscriptions: Dict[str, List[int]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.subscriptions_file, 'w', encoding='utf-8') as f:
                json.dump(subscriptions, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    def load_schedule_hash(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–µ—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            with open(self.schedule_hash_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
    
    def save_schedule_hash(self, hash_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            with open(self.schedule_hash_file, 'w', encoding='utf-8') as f:
                json.dump(hash_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def is_subscribed(self, user_id: int, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        subscriptions = self.load_subscriptions()
        return user_id in subscriptions.get(notification_type, [])
    
    def subscribe_user(self, user_id: int, notification_type: str) -> bool:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            subscriptions = self.load_subscriptions()
            
            if notification_type not in subscriptions:
                subscriptions[notification_type] = []
            
            if user_id not in subscriptions[notification_type]:
                subscriptions[notification_type].append(user_id)
                self.save_subscriptions(subscriptions)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {notification_type}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def unsubscribe_user(self, user_id: int, notification_type: str) -> bool:
        """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            subscriptions = self.load_subscriptions()
            
            if notification_type in subscriptions and user_id in subscriptions[notification_type]:
                subscriptions[notification_type].remove(user_id)
                self.save_subscriptions(subscriptions)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç {notification_type}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_user_subscriptions(self, user_id: int) -> Dict[str, bool]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        subscriptions = self.load_subscriptions()
        return {
            "schedule_updates": user_id in subscriptions.get("schedule_updates", []),
            "application_reminders": user_id in subscriptions.get("application_reminders", [])
        }
    
    def generate_schedule_hash(self, shifts_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        import hashlib
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        hash_data = []
        
        if shifts_data and "shifts" in shifts_data:
            for shift in shifts_data["shifts"]:
                shift_str = f"{shift.get('name', '')}-{shift.get('start_date', '')}-{shift.get('end_date', '')}-{shift.get('application_start_date', '')}-{shift.get('application_end_date', '')}-{shift.get('raw_status', '')}"
                hash_data.append(shift_str)
        
        combined_data = "|".join(sorted(hash_data))
        return hashlib.sha256(combined_data.encode()).hexdigest()[:16]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ SHA256
    
    def check_schedule_changes(self, new_shifts_data: Dict) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        try:
            old_hash_data = self.load_schedule_hash()
            new_hash = self.generate_schedule_hash(new_shifts_data)
            
            old_hash = old_hash_data.get("hash", "")
            
            if new_hash != old_hash:
                # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                changes = {
                    "has_changes": True,
                    "old_hash": old_hash,
                    "new_hash": new_hash,
                    "timestamp": datetime.now().isoformat(),
                    "details": self._analyze_changes(old_hash_data.get("shifts", {}), new_shifts_data.get("shifts", []))
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
                new_hash_data = {
                    "hash": new_hash,
                    "timestamp": datetime.now().isoformat(),
                    "shifts": {shift["name"]: shift for shift in new_shifts_data.get("shifts", [])}
                }
                self.save_schedule_hash(new_hash_data)
                
                return changes
            
            return {"has_changes": False}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return None
    
    def _analyze_changes(self, old_shifts: Dict, new_shifts: List[Dict]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        changes = []
        
        try:
            new_shifts_dict = {shift["name"]: shift for shift in new_shifts}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–º–µ–Ω—ã
            for shift_name, shift_data in new_shifts_dict.items():
                if shift_name not in old_shifts:
                    changes.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–º–µ–Ω–∞: {shift_name}")
                else:
                    old_shift = old_shifts[shift_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫
                    if (old_shift.get("application_start_date") != shift_data.get("application_start_date") or
                        old_shift.get("application_end_date") != shift_data.get("application_end_date")):
                        if shift_data.get("application_start_date") and shift_data.get("application_end_date"):
                            changes.append(f"üìÖ {shift_name}: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞—Ç—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ ({shift_data['application_start_date']} - {shift_data['application_end_date']})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    if old_shift.get("raw_status") != shift_data.get("raw_status"):
                        changes.append(f"üìä {shift_name}: –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ '{shift_data.get('raw_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
            for shift_name in old_shifts:
                if shift_name not in new_shifts_dict:
                    changes.append(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Å–º–µ–Ω–∞: {shift_name}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            changes.append("‚ùì –ü—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ (–¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
        
        return changes
    
    async def send_schedule_update_notification(self, changes: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        if not self.bot or not changes.get("has_changes"):
            return
        
        subscriptions = self.load_subscriptions()
        subscribers = subscriptions.get("schedule_updates", [])
        
        if not subscribers:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_parts = [
            "üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–º–µ–Ω!",
            "",
            "üìÖ –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        ]
        
        details = changes.get("details", [])
        if details:
            for detail in details[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–º–µ–Ω–µ–Ω–∏–π
                message_parts.append(f"‚Ä¢ {detail}")
            
            if len(details) > 5:
                message_parts.append(f"‚Ä¢ ... –∏ –µ—â–µ {len(details) - 5} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            message_parts.append("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–∞—Ö")
        
        message_parts.extend([
            "",
            "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calendar –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            "",
            "üîï –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /calendar –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
        ])
        
        message = "\n".join(message_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        success_count = 0
        for user_id in subscribers:
            try:
                await self.bot.send_message(user_id, message)
                success_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {success_count}/{len(subscribers)}")
    
    async def check_application_deadlines(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–µ–¥–ª–∞–π–Ω—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        if not self.bot:
            return
        
        try:
            from schedule_parser import ScheduleParser
            parser = ScheduleParser()
            shifts_data = parser.load_shifts()
            
            if not shifts_data or "shifts" not in shifts_data:
                return
            
            current_date = date.today()
            subscriptions = self.load_subscriptions()
            subscribers = subscriptions.get("application_reminders", [])
            
            if not subscribers:
                return
            
            notifications = []
            
            for shift in shifts_data["shifts"]:
                app_start = shift.get("application_start_date")
                app_end = shift.get("application_end_date")
                
                if not app_start or not app_end:
                    continue
                
                try:
                    app_start_date = datetime.strptime(app_start, "%d.%m.%Y").date()
                    app_end_date = datetime.strptime(app_end, "%d.%m.%Y").date()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è
                    if app_start_date == current_date:
                        notifications.append({
                            "type": "application_start",
                            "shift": shift["name"],
                            "date": app_start,
                            "end_date": app_end
                        })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø—Äiem –∑–∞—è–≤–æ–∫ –∑–∞–≤—Ç—Ä–∞
                    elif app_end_date == current_date + timedelta(days=1):
                        notifications.append({
                            "type": "application_end_tomorrow",
                            "shift": shift["name"],
                            "date": app_end
                        })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è
                    elif app_end_date == current_date:
                        notifications.append({
                            "type": "application_end_today",
                            "shift": shift["name"],
                            "date": app_end
                        })
                        
                except ValueError:
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for notification in notifications:
                await self._send_deadline_notification(notification, subscribers)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
    
    async def _send_deadline_notification(self, notification: Dict, subscribers: List[int]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
        if notification["type"] == "application_start":
            message = (
                f"üöÄ –°–µ–≥–æ–¥–Ω—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫!\n\n"
                f"üìö –°–º–µ–Ω–∞: {notification['shift']}\n"
                f"üìÖ –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫: —Å {notification['date']} –ø–æ {notification['end_date']}\n\n"
                f"‚è∞ –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!\n"
                f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calendar –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            )
        elif notification["type"] == "application_end_tomorrow":
            message = (
                f"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫!\n\n"
                f"üìö –°–º–µ–Ω–∞: {notification['shift']}\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–∞—á–∏: {notification['date']}\n\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Å–ø–µ—à–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ!\n"
                f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calendar –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            )
        elif notification["type"] == "application_end_today":
            message = (
                f"üî• –°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫!\n\n"
                f"üìö –°–º–µ–Ω–∞: {notification['shift']}\n"
                f"üìÖ –ü—Ä–∏–µ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {notification['date']}\n\n"
                f"‚ö° –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!\n"
                f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calendar –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            )
        else:
            return
        
        success_count = 0
        for user_id in subscribers:
            try:
                await self.bot.send_message(user_id, message)
                success_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–µ ({notification['type']}): {success_count}/{len(subscribers)}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = NotificationSystem() 