"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö RAG —Å–∏—Å—Ç–µ–º –∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
"""
import logging
from typing import Optional

from ..core.config import config
from ..core.constants import DOCUMENT_KEYWORDS, SCHEDULE_KEYWORDS
from ..utils.helpers import is_context_related_to_keywords

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
basic_rag = None

# –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
BASIC_RAG_AVAILABLE = False


async def initialize_rag_systems() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    await _init_basic_rag()


async def _init_basic_rag() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    global basic_rag, BASIC_RAG_AVAILABLE
    try:
        logger.info("üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã...")
        from ..services.rag.rag_system import rag_system
        basic_rag = rag_system
        BASIC_RAG_AVAILABLE = True
        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π RAG: {e}")




async def get_enhanced_context(query: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã, –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
        base_context = await _get_best_rag_context(query)
        
        enhanced_contexts = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º/—Å–º–µ–Ω–∞–º–∏
        if is_context_related_to_keywords(query, SCHEDULE_KEYWORDS):
            logger.info("üìÖ –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            schedule_context = await _get_schedule_context(query)
            if schedule_context:
                enhanced_contexts.append(schedule_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        if is_context_related_to_keywords(query, DOCUMENT_KEYWORDS):
            logger.info("üìÑ –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            documents_context = await _get_documents_context(query)
            if documents_context:
                enhanced_contexts.append(documents_context)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        if enhanced_contexts:
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π" not in base_context:
                final_context = f"{base_context}\n\n" + "\n\n".join(enhanced_contexts)
            else:
                final_context = "\n\n".join(enhanced_contexts)

            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
            return final_context
        else:
            logger.info("üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return base_context

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return await _get_fallback_context(query)


async def _get_best_rag_context(query: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üìñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é RAG —Å–∏—Å—Ç–µ–º—É")
    if basic_rag and BASIC_RAG_AVAILABLE:
        return basic_rag.get_context_for_query(query)
    else:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."


async def _get_schedule_context(query: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    try:
        if config.enable_documents:
            from ..services.parsers.schedule_parser import get_schedule_context_async
            return await get_schedule_context_async(query)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    return None


async def _get_documents_context(query: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    try:
        if config.enable_documents:
            from ..services.parsers.documents_parser import get_documents_context_async
            return await get_documents_context_async(query)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
    return None


async def _get_fallback_context(query: str) -> str:
    """Fallback –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫"""
    try:
        if basic_rag and BASIC_RAG_AVAILABLE:
            return basic_rag.get_context_for_query(query)
        else:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
    except Exception:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


def get_rag_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    stats = {
        "basic_available": BASIC_RAG_AVAILABLE,
        "current_mode": "basic",
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if BASIC_RAG_AVAILABLE and basic_rag:
        try:
            stats["basic_stats"] = {
                "knowledge_base_loaded": bool(basic_rag.knowledge_base),
                "kb_size": len(str(basic_rag.knowledge_base)) if basic_rag.knowledge_base else 0
            }
        except Exception as e:
            stats["basic_stats"] = {"error": str(e)}
    
    return stats


async def reload_knowledge_base() -> bool:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    try:
        if basic_rag and BASIC_RAG_AVAILABLE:
            basic_rag.load_knowledge_base()
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False
