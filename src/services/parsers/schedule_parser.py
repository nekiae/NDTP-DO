import asyncio
import json
import logging
import re
from datetime import datetime
from typing import List, Dict, Optional, Tuple
import aiohttp
from bs4 import BeautifulSoup
import os

logger = logging.getLogger(__name__)

class ScheduleParser:
    """–ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–º–µ–Ω –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞"""
    
    def __init__(self):
        from ...core.config import config
        self.url = "https://ndtp.by/educational-shifts/schedule/"
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        self.shifts_file = config.parsers_data_dir / "current_shifts.json"
        self.last_update_file = config.parsers_data_dir / "last_schedule_update.txt"
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
        self.month_map = {
            1: "–Ø–Ω–≤–∞—Ä—Å–∫–∞—è —Å–º–µ–Ω–∞",
            2: "–§–µ–≤—Ä–∞–ª—å—Å–∫–∞—è —Å–º–µ–Ω–∞", 
            3: "–ú–∞—Ä—Ç–æ–≤—Å–∫–∞—è —Å–º–µ–Ω–∞",
            4: "–ê–ø—Ä–µ–ª—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
            5: "–ú–∞–π—Å–∫–∞—è —Å–º–µ–Ω–∞",
            6: "–ò—é–Ω—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
            7: "–ò—é–ª—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
            8: "–ê–≤–≥—É—Å—Ç—Å–∫–∞—è —Å–º–µ–Ω–∞",
            9: "–°–µ–Ω—Ç—è–±—Ä—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
            10: "–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
            11: "–ù–æ—è–±—Ä—å—Å–∫–∞—è —Å–º–µ–Ω–∞",
            12: "–î–µ–∫–∞–±—Ä—å—Å–∫–∞—è —Å–º–µ–Ω–∞"
        }
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç
        self.app_period_pattern = r'^–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å (\d{2}\.\d{2}\.(?:\d{4}|\d{2})) –ø–æ (\d{2}\.\d{2}\.(?:\d{4}|\d{2}))–≥\.$'
        self.shift_period_pattern = r'—Å (\d{2}\.\d{2}\.\d{4})–≥\. –ø–æ (\d{2}\.\d{2}\.\d{4})–≥\.'
    
    def normalize_date(self, date_str: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY"""
        parts = date_str.split('.')
        if len(parts) == 3:
            day, month, year = parts
            # –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º 20
            if len(year) == 2:
                if int(year) < 50:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 20XX
                    year = "20" + year
                else:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 19XX
                    year = "19" + year
            return f"{day.zfill(2)}.{month.zfill(2)}.{year}"
        return date_str
    
    def get_month_from_date(self, date_str: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏–∑ –¥–∞—Ç—ã"""
        try:
            parts = date_str.split('.')
            if len(parts) >= 2:
                return int(parts[1])
        except (ValueError, IndexError):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Å—è—Ü –∏–∑ –¥–∞—Ç—ã: {date_str}")
        return 0
    
    async def fetch_page(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ {self.url}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url, headers=self.headers, timeout=30) as response:
                    if response.status == 200:
                        content = await response.text()
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        return content
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: HTTP {response.status}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        
        return None
    
    def parse_shifts(self, html_content: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–∞—Ö"""
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ù–∞–π–¥–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
            panels = soup.find_all('div', class_='fusion-panel')
            logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(panels)} –ø–∞–Ω–µ–ª–µ–π –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞")
            
            results = []
            
            for i, panel in enumerate(panels):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–º–µ–Ω—ã
                    title_elem = panel.find('span', class_='fusion-toggle-heading')
                    if not title_elem:
                        continue
                    
                    title_text = title_elem.get_text(strip=True)
                    
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –∏ –¥–∞—Ç—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    shift_pattern = r'(–Ø–Ω–≤–∞—Ä—Å–∫–∞—è|–§–µ–≤—Ä–∞–ª—å—Å–∫–∞—è|–ú–∞—Ä—Ç–æ–≤—Å–∫–∞—è|–ê–ø—Ä–µ–ª—å—Å–∫–∞—è|–ú–∞–π—Å–∫–∞—è|–ò—é–Ω—å—Å–∫–∞—è|–ò—é–ª—å—Å–∫–∞—è|–ê–≤–≥—É—Å—Ç–æ–≤—Å–∫–∞—è|–°–µ–Ω—Ç—è–±—Ä—å—Å–∫–∞—è|–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è|–ù–æ—è–±—Ä—å—Å–∫–∞—è|–î–µ–∫–∞–±—Ä—å—Å–∫–∞—è)\s+—Å–º–µ–Ω–∞.*?(\d{2}\.\d{2}\.\d{4})\s*[‚Äì-]\s*(\d{2}\.\d{2}\.\d{4})'
                    
                    shift_match = re.search(shift_pattern, title_text)
                    if not shift_match:
                        continue
                    
                    month_name = shift_match.group(1)
                    start_date = shift_match.group(2)
                    end_date = shift_match.group(3)
                    
                    # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞—á–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    status = "–ü–æ–¥–∞—á–∏ –Ω–µ—Ç" if "–ü–æ–¥–∞—á–∏ –Ω–µ—Ç" in title_text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–∞—Ö
                    content = panel.find('div', class_='panel-body')
                    app_start_date = None
                    app_end_date = None
                    
                    if content:
                        content_text = content.get_text(strip=True)
                        
                        # –ò—â–µ–º –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                        app_patterns = [
                            r'–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å (\d{1,2}\.\d{1,2}) –ø–æ (\d{1,2}\.\d{1,2})\.(\d{4})–≥?\.',
                            r'–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å (\d{1,2}\.\d{1,2})\.(\d{4}) –ø–æ (\d{1,2}\.\d{1,2})\.(\d{4})–≥?\.',
                            r'–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å (\d{1,2}\.\d{1,2}) –ø–æ (\d{1,2}\.\d{1,2})\.(\d{4}) –≥\.'
                        ]
                        
                        for pattern in app_patterns:
                            app_match = re.search(pattern, content_text)
                            if app_match:
                                if len(app_match.groups()) == 3:  # –§–æ—Ä–º–∞—Ç: dd.mm –ø–æ dd.mm.yyyy
                                    app_start_date = f"{app_match.group(1)}.{app_match.group(3)}"
                                    app_end_date = f"{app_match.group(2)}.{app_match.group(3)}"
                                elif len(app_match.groups()) == 4:  # –§–æ—Ä–º–∞—Ç: dd.mm.yyyy –ø–æ dd.mm.yyyy
                                    app_start_date = f"{app_match.group(1)}.{app_match.group(2)}"
                                    app_end_date = f"{app_match.group(3)}.{app_match.group(4)}"
                                break
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–º–µ–Ω–µ
                    shift_data = {
                        'name': f"{month_name} —Å–º–µ–Ω–∞",
                        'start_date': start_date,
                        'end_date': end_date,
                        'month_number': self.get_month_from_name(month_name),
                        'raw_status': status,
                        'application_start_date': app_start_date,
                        'application_end_date': app_end_date
                    }
                    
                    results.append(shift_data)
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–º–µ–Ω–∞: {month_name} —Å–º–µ–Ω–∞ ({start_date} - {end_date})")
                    if app_start_date and app_end_date:
                        logger.info(f"üìÖ –ó–∞—è–≤–∫–∏: {app_start_date} - {app_end_date}")
                    else:
                        logger.info(f"üìÖ –ó–∞—è–≤–∫–∏: {status}")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–µ–ª–∏ {i+1}: {e}")
                    continue
            
            logger.info(f"üéØ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–º–µ–Ω: {len(results)}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return []
    
    def get_month_from_name(self, month_name: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        month_mapping = {
            "–Ø–Ω–≤–∞—Ä—Å–∫–∞—è": 1, "–§–µ–≤—Ä–∞–ª—å—Å–∫–∞—è": 2, "–ú–∞—Ä—Ç–æ–≤—Å–∫–∞—è": 3, "–ê–ø—Ä–µ–ª—å—Å–∫–∞—è": 4,
            "–ú–∞–π—Å–∫–∞—è": 5, "–ò—é–Ω—å—Å–∫–∞—è": 6, "–ò—é–ª—å—Å–∫–∞—è": 7, "–ê–≤–≥—É—Å—Ç–æ–≤—Å–∫–∞—è": 8,
            "–°–µ–Ω—Ç—è–±—Ä—å—Å–∫–∞—è": 9, "–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è": 10, "–ù–æ—è–±—Ä—å—Å–∫–∞—è": 11, "–î–µ–∫–∞–±—Ä—å—Å–∫–∞—è": 12
        }
        return month_mapping.get(month_name, 1)
    
    def save_shifts(self, shifts: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            data = {
                "last_updated": datetime.now().isoformat(),
                "total_shifts": len(shifts),
                "source_url": self.url,
                "shifts": shifts
            }
            
            with open(self.shifts_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            with open(self.last_update_file, 'w', encoding='utf-8') as f:
                f.write(datetime.now().isoformat())
            
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.shifts_file}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def load_shifts(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–∞—Ö"""
        try:
            if os.path.exists(self.shifts_file):
                with open(self.shifts_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data.get('total_shifts', 0)} —Å–º–µ–Ω")
                return data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    
    def get_last_update_time(self) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if os.path.exists(self.last_update_file):
                with open(self.last_update_file, 'r', encoding='utf-8') as f:
                    time_str = f.read().strip()
                return datetime.fromisoformat(time_str)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return None
    
    def should_update(self, hours_threshold: int = 6) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        last_update = self.get_last_update_time()
        if not last_update:
            return True
        
        time_diff = datetime.now() - last_update
        should_update = time_diff.total_seconds() > hours_threshold * 3600
        
        if should_update:
            logger.info(f"‚è∞ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update})")
        else:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update})")
        
        return should_update
    
    async def update_schedule(self, force: bool = False) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω"""
        try:
            if not force and not self.should_update():
                return True
            
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–º–µ–Ω...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            html_content = await self.fetch_page()
            if not html_content:
                return False
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            shifts = self.parse_shifts(html_content)
            if not shifts:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–∞—Ö")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            new_shifts_data = {
                "last_updated": datetime.now().isoformat(),
                "total_shifts": len(shifts),
                "source_url": self.url,
                "shifts": shifts
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            try:
                from notification_system import notification_system
                changes = notification_system.check_schedule_changes(new_shifts_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if self.save_shifts(shifts):
                    logger.info(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(shifts)} —Å–º–µ–Ω")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if changes and changes.get("has_changes"):
                        logger.info("üì¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                        await notification_system.send_schedule_update_notification(changes)
                    
                    return True
                else:
                    return False
                    
            except ImportError:
                logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if self.save_shifts(shifts):
                    logger.info(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(shifts)} —Å–º–µ–Ω")
                    return True
                else:
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return False
    
    def get_current_shifts_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–∞—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ò–ò"""
        data = self.load_shifts()
        if not data or not data.get('shifts'):
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        shifts = data['shifts']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
        shifts_sorted = sorted(shifts, key=lambda x: datetime.strptime(x['start_date'], '%d.%m.%Y'))
        
        info_parts = [
            f"üìÖ –ê–ö–¢–£–ê–õ–¨–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –°–ú–ï–ù (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data['last_updated'][:16]})",
            ""
        ]
        
        for shift in shifts_sorted:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                shift_status, app_status = self.get_shift_status(shift, datetime.now())
                
                info_parts.extend([
                    f"‚Ä¢ {shift['name']}: {shift['start_date']} - {shift['end_date']}",
                    f"  –°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã: {shift_status}",
                    f"  –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫: {app_status}",
                    ""
                ])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã {shift.get('name', 'Unknown')}: {e}")
                continue
        
        return "\n".join(info_parts)
    
    def get_shifts_for_query(self, query: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–∞—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(self.shifts_file, 'r', encoding='utf-8') as file:
                data = json.load(file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–æ–∫
            application_keywords = ['–∑–∞—è–≤–∫', '–ø–æ–¥–∞—á', '–ø–æ–¥–∞—Ç—å', '–∑–∞–ø–∏—Å–∞—Ç', '—Ä–µ–≥–∏—Å—Ç—Ä', '–ø–æ—Å—Ç—É–ø']
            is_about_applications = any(keyword in query.lower() for keyword in application_keywords)
            
            if is_about_applications:
                return self.get_available_shifts_for_application()
            
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–º–µ–Ω—ã
            info_parts = [
                "üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–• –°–ú–ï–ù –ù–ê 2025 –ì–û–î",
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['last_updated']}",
                f"–°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y (%A)')}",
                ""
            ]
            
            for shift in data['shifts']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                shift_status, app_status = self.get_shift_status(shift, datetime.now())
                
                info_parts.append(f"üéì {shift['name']}")
                info_parts.append(f"üìÖ –î–∞—Ç—ã: {shift['start_date']} - {shift['end_date']}")
                info_parts.append(f"üìä –°—Ç–∞—Ç—É—Å: {shift_status}")
                info_parts.append(f"üìù –ó–∞—è–≤–∫–∏: {app_status}")
                info_parts.append("")
            
            return "\n".join(info_parts)
            
        except FileNotFoundError:
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–∞—Ö: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–∞—Ö"
    
    def get_shift_status(self, shift: Dict, current_date: datetime) -> Tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã"""
        try:
            start_date = datetime.strptime(shift['start_date'], '%d.%m.%Y').date()
            end_date = datetime.strptime(shift['end_date'], '%d.%m.%Y').date()
            current_date_only = current_date.date()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
            if current_date_only < start_date:
                if (start_date - current_date_only).days <= 30:
                    shift_status = "üîú –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è"
                else:
                    shift_status = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
            elif start_date <= current_date_only <= end_date:
                shift_status = "‚ö° –ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞"
            else:
                shift_status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫
            app_status = "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
            
            if shift.get('application_start_date') and shift.get('application_end_date'):
                try:
                    app_start = datetime.strptime(shift['application_start_date'], '%d.%m.%Y').date()
                    app_end = datetime.strptime(shift['application_end_date'], '%d.%m.%Y').date()
                    
                    if current_date_only < app_start:
                        app_status = f"üîú –°–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è ({shift['application_start_date']})"
                    elif app_start <= current_date_only <= app_end:
                        app_status = f"üü¢ –ü—Ä–∏–µ–º –æ—Ç–∫—Ä—ã—Ç (–¥–æ {shift['application_end_date']})"
                    else:
                        app_status = f"üî¥ –ü—Ä–∏–µ–º –∑–∞–∫—Ä—ã—Ç (–±—ã–ª –¥–æ {shift['application_end_date']})"
                except ValueError:
                    pass
            elif shift.get('raw_status') == "–ü–æ–¥–∞—á–∏ –Ω–µ—Ç":
                app_status = "üî¥ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç–∞"
            
            return shift_status, app_status
            
        except (ValueError, KeyError) as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–º–µ–Ω—ã {shift.get('name', 'Unknown')}: {e}")
            return "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
    
    def get_available_shifts_for_application(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ —Å–º–µ–Ω–∞—Ö"""
        try:
            with open(self.shifts_file, 'r', encoding='utf-8') as file:
                data = json.load(file)
            
            available_shifts = []
            upcoming_shifts = []
            
            for shift in data['shifts']:
                shift_status, app_status = self.get_shift_status(shift, datetime.now())
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å–º–µ–Ω—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
                if "üü¢" in app_status:  # –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
                    available_shifts.append((shift, shift_status, app_status))
                elif "üü°" in app_status:  # –°–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ—é—Ç—Å—è
                    upcoming_shifts.append((shift, shift_status, app_status))
            
            info_parts = [
                "üìù –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ê–ß–ï –ó–ê–Ø–í–û–ö –ù–ê –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –°–ú–ï–ù–´",
                f"–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {datetime.now().strftime('%d.%m.%Y')}", 
                ""
            ]
            
            if available_shifts:
                info_parts.append("üü¢ –°–ï–ô–ß–ê–° –û–¢–ö–†–´–¢ –ü–†–ò–ï–ú –ó–ê–Ø–í–û–ö:")
                info_parts.append("")
                
                for shift, shift_status, app_status in available_shifts:
                    info_parts.append(f"‚úÖ {shift['name']}")
                    info_parts.append(f"üìÖ –î–∞—Ç—ã —Å–º–µ–Ω—ã: {shift['start_date']} - {shift['end_date']}")
                    info_parts.append(f"üìù {app_status}")
                    info_parts.append("")
            
            if upcoming_shifts:
                info_parts.append("üü° –°–ö–û–†–û –û–¢–ö–†–û–ï–¢–°–Ø –ü–†–ò–ï–ú –ó–ê–Ø–í–û–ö:")
                info_parts.append("")
                
                for shift, shift_status, app_status in upcoming_shifts:
                    info_parts.append(f"‚è∞ {shift['name']}")
                    info_parts.append(f"üìÖ –î–∞—Ç—ã —Å–º–µ–Ω—ã: {shift['start_date']} - {shift['end_date']}")
                    info_parts.append(f"üìù {app_status}")
                    info_parts.append("")
            
            if not available_shifts and not upcoming_shifts:
                info_parts.append("üî¥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫.")
                info_parts.append("")
                info_parts.append("üìã –í—Å–µ —Å–º–µ–Ω—ã –Ω–∞ 2025 –≥–æ–¥:")
                info_parts.append("")
                
                for shift in data['shifts']:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    shift_status, app_status = self.get_shift_status(shift, datetime.now())
                    
                    info_parts.append(f"‚Ä¢ {shift['name']}: {shift['start_date']} - {shift['end_date']}")
                    info_parts.append(f"  {app_status}")
                    info_parts.append("")
                
                info_parts.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                info_parts.append("‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ ndtp.by")
                info_parts.append("‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ–µ–∫—Ç –∑–∞—Ä–∞–Ω–µ–µ")
                info_parts.append("‚Ä¢ –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É —á–µ—Ä–µ–∑ /help")
            
            return "\n".join(info_parts)
            
        except FileNotFoundError:
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω–∞—Ö"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
schedule_parser = ScheduleParser()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
async def get_schedule_context_async(query: str = "") -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await schedule_parser.update_schedule()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if query:
            return schedule_parser.get_shifts_for_query(query)
        else:
            return schedule_parser.get_current_shifts_info()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω."

def get_schedule_context(query: str = "") -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if query:
            return schedule_parser.get_shifts_for_query(query)
        else:
            return schedule_parser.get_current_shifts_info()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–º–µ–Ω."

async def force_update_schedule() -> bool:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    return await schedule_parser.update_schedule(force=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def schedule_updater_loop(interval_hours: int = 6):
    """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤)")
    
    while True:
        try:
            await schedule_parser.update_schedule()
            await asyncio.sleep(interval_hours * 3600)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ 