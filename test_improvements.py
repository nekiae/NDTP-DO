#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞
- –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç
- –õ–∏–º–∏—Ç—ã API –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
"""

import asyncio
import time
from datetime import datetime
from typing import Optional

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
import re
try:
    import dateparser
    DATEPARSER_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è dateparser –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install dateparser")
    DATEPARSER_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –¥–ª—è Redis
try:
    import aioredis
    REDIS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è aioredis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install aioredis")
    REDIS_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –¥–ª—è retry
try:
    from tenacity import retry, wait_exponential, stop_after_attempt
    TENACITY_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è tenacity –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install tenacity")
    TENACITY_AVAILABLE = False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
MONTHS_PATTERNS = {
    r'—è–Ω–≤–∞—Ä\w*': 1, r'—Ñ–µ–≤—Ä–∞–ª\w*': 2, r'–º–∞—Ä—Ç\w*': 3,
    r'–∞–ø—Ä–µ–ª\w*': 4, r'–º–∞[–π—è]\w*': 5, r'–∏—é–Ω\w*': 6,
    r'–∏—é–ª\w*': 7, r'–∞–≤–≥—É—Å—Ç\w*': 8, r'—Å–µ–Ω—Ç—è–±—Ä\w*': 9,
    r'–æ–∫—Ç—è–±—Ä\w*': 10, r'–Ω–æ—è–±—Ä\w*': 11, r'–¥–µ–∫–∞–±—Ä\w*': 12,
}

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º regex –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
DATE_REGEX = re.compile(
    rf'(?P<day>\d{{1,2}})\s+(?P<month>{"|".join(MONTHS_PATTERNS)})\s*(?P<year>\d{{4}})?',
    re.IGNORECASE | re.UNICODE,
)

def parse_russian_date(text: str, default_year: int = None) -> Optional[datetime]:
    """–ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç —Å fallback –Ω–∞ dateparser"""
    if not text:
        return None
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    clean_text = re.sub(r'\s+', ' ', text.strip())
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º dateparser (–Ω–∞–¥—ë–∂–Ω–µ–µ)
    if DATEPARSER_AVAILABLE:
        try:
            dt = dateparser.parse(
                clean_text,
                languages=['ru'],
                settings={
                    'DATE_ORDER': 'DMY',
                    'PREFER_DAY_OF_MONTH': 'first'
                }
            )
            if dt:
                return dt
        except Exception as e:
            print(f"‚ö†Ô∏è dateparser –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '{clean_text}': {e}")
    
    # Fallback –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π regex
    try:
        match = DATE_REGEX.search(clean_text)
        if match:
            day = int(match.group('day'))
            month_text = match.group('month')
            year = int(match.group('year') or default_year or datetime.now().year)
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
            month = None
            for pattern, num in MONTHS_PATTERNS.items():
                if re.fullmatch(pattern, month_text, re.IGNORECASE):
                    month = num
                    break
            
            if month:
                return datetime(year, month, day)
    except Exception as e:
        print(f"‚ö†Ô∏è Regex –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '{clean_text}': {e}")
    
    return None

# –°–∏–º—É–ª—è—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ API
class RateLimitSimulator:
    def __init__(self, limit_per_hour: int = 50):
        self.limit = limit_per_hour
        self.cache = {}
        
    def check_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        current_hour = int(current_time // 3600)
        
        if user_id not in self.cache:
            self.cache[user_id] = {'hour': current_hour, 'count': 0}
        
        user_data = self.cache[user_id]
        
        # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
        if user_data['hour'] != current_hour:
            user_data['hour'] = current_hour
            user_data['count'] = 0
        
        user_data['count'] += 1
        
        if user_data['count'] > self.limit:
            return False
        
        return True
    
    def get_usage(self, user_id: int) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.cache:
            return 0, self.limit
        
        user_data = self.cache[user_id]
        current_hour = int(time.time() // 3600)
        
        if user_data['hour'] != current_hour:
            return 0, self.limit
        
        return user_data['count'], self.limit

# –°–∏–º—É–ª—è—Ü–∏—è —Å–µ–º–∞—Ñ–æ—Ä–∞
class SemaphoreSimulator:
    def __init__(self, limit: int = 10):
        self.limit = limit
        self.current = 0
        
    async def acquire(self):
        while self.current >= self.limit:
            await asyncio.sleep(0.1)
        self.current += 1
        
    def release(self):
        if self.current > 0:
            self.current -= 1
    
    async def __aenter__(self):
        await self.acquire()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        self.release()

# –°–∏–º—É–ª—è—Ü–∏—è retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
def simple_retry(max_attempts: int = 3):
    def decorator(func):
        async def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(2 ** attempt)
                    else:
                        raise
            return None
        return wrapper
    return decorator

# –¢–µ—Å—Ç—ã
def test_date_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç"""
    print("üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç:")
    print("=" * 50)
    
    test_dates = [
        "13 —è–Ω–≤–∞—Ä—è 2025 –≥. –≤ 13:34",
        "5 —Ñ–µ–≤—Ä–∞–ª—è 2025",
        "–º–∞—Ä—Ç 2025",
        "–ê–≤–≥—É—Å—Ç–æ–≤—Å–∫–∞—è —Å–º–µ–Ω–∞ 2025",
        "10 –º–∞—è",
        "25 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞",
        "1 –∏—é–Ω—è 2025–≥.",
        "15 —Å–µ–Ω—Ç—è–±—Ä—è",
        "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞",
        "01.02.2025",
        "–∑–∞–≤—Ç—Ä–∞",
        "—á–µ—Ä–µ–∑ 3 –¥–Ω—è"
    ]
    
    for date_str in test_dates:
        try:
            parsed_date = parse_russian_date(date_str)
            if parsed_date:
                formatted = parsed_date.strftime("%d.%m.%Y %H:%M")
                print(f"‚úÖ '{date_str}' ‚Üí {formatted}")
            else:
                print(f"‚ùå '{date_str}' ‚Üí –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è '{date_str}' ‚Üí –æ—à–∏–±–∫–∞: {str(e)[:30]}")
    
    print("\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–π (—è–Ω–≤–∞—Ä—å/—è–Ω–≤–∞—Ä—è)")
    print("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ '–≥.' –∏ '–≥–æ–¥–∞'")
    print("‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã (–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ N –¥–Ω–µ–π)")
    print("‚Ä¢ Fallback –Ω–∞ regex –ø—Ä–∏ —Å–±–æ–µ dateparser")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞")

def test_rate_limits():
    """–¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ API"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ API:")
    print("=" * 50)
    
    rate_limiter = RateLimitSimulator(limit_per_hour=5)  # –ù–∏–∑–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = [12345, 67890, 11111]
    
    for user_id in users:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        for i in range(7):
            allowed = rate_limiter.check_limit(user_id)
            used, limit = rate_limiter.get_usage(user_id)
            
            status = "‚úÖ" if allowed else "‚ùå"
            print(f"  {status} –ó–∞–ø—Ä–æ—Å {i+1}: {used}/{limit}")
            
            if not allowed:
                print(f"  ‚åõ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω")
                break
    
    print("\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–π —á–∞—Å")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS")
    print("‚Ä¢ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –±–µ–∑ Redis")

async def test_semaphore():
    """–¢–µ—Å—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è LLM"""
    print("\n‚ö° –¢–µ—Å—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞ LLM:")
    print("=" * 50)
    
    semaphore = SemaphoreSimulator(limit=3)  # –õ–∏–º–∏—Ç 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    
    @simple_retry(max_attempts=2)
    async def mock_llm_request(request_id: int):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
        async with semaphore:
            print(f"  üöÄ –ó–∞–ø—Ä–æ—Å {request_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            await asyncio.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {request_id} –∑–∞–≤–µ—Ä—à—ë–Ω")
            return f"–û—Ç–≤–µ—Ç {request_id}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    tasks = [mock_llm_request(i) for i in range(1, 6)]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for i, result in enumerate(results, 1):
        if isinstance(result, Exception):
            print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i}: {result}")
        else:
            print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {i}: {result}")
    
    print("\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    print("‚Ä¢ Graceful degradation")

async def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\nüî¥ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:")
    print("=" * 50)
    
    if not REDIS_AVAILABLE:
        print("‚ùå aioredis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    try:
        redis = aioredis.from_url("redis://localhost", decode_responses=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await redis.ping()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á—ë–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        await redis.set("test_key", "test_value", ex=10)
        value = await redis.get("test_key")
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è: {value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫
        await redis.incr("test_counter")
        counter = await redis.get("test_counter")
        print(f"‚úÖ –¢–µ—Å—Ç —Å—á—ë—Ç—á–∏–∫–∞: {counter}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await redis.delete("test_key", "test_counter")
        
        await redis.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω: redis-server")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π TechnoBot")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
    test_date_parser()
    
    # –¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ API
    test_rate_limits()
    
    # –¢–µ—Å—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞
    await test_semaphore()
    
    # –¢–µ—Å—Ç Redis
    await test_redis_connection()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    print(f"‚Ä¢ dateparser: {'‚úÖ' if DATEPARSER_AVAILABLE else '‚ùå'}")
    print(f"‚Ä¢ aioredis: {'‚úÖ' if REDIS_AVAILABLE else '‚ùå'}")
    print(f"‚Ä¢ tenacity: {'‚úÖ' if TENACITY_AVAILABLE else '‚ùå'}")
    
    if not all([DATEPARSER_AVAILABLE, REDIS_AVAILABLE, TENACITY_AVAILABLE]):
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("pip install dateparser aioredis tenacity")

if __name__ == "__main__":
    asyncio.run(main()) 